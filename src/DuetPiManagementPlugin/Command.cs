using System.Diagnostics;
using System.Text;
using System.Threading.Tasks;

namespace DuetPiManagementPlugin
{
    /// <summary>
    /// Static class to provide functions for invoking commands
    /// </summary>
    public static class Command
    {
        /// <summary>
        /// Execute a process, wait for it to exit, and return the stdout/stderr output
        /// </summary>
        /// <param name="fileName">File to execute</param>
        /// <param name="arguments">Command-line arguments</param>
        /// <returns>Command output</returns>
        public static async Task<string> Execute(string fileName, string arguments)
        {
            ProcessStartInfo startInfo = new()
            {
                FileName = fileName,
                Arguments = arguments,
                RedirectStandardError = true,
                RedirectStandardOutput = true
            };

            using Process? process = Process.Start(startInfo);
            if (process is not null)
            {
                await process.WaitForExitAsync(Program.CancellationToken);

                string output;
                output  = await process.StandardOutput.ReadToEndAsync();
                output += await process.StandardError.ReadToEndAsync();
                return output.Replace("\u001b[2K", string.Empty).Trim();        // Escape sequence generated by nmcli
            }
            return string.Empty;
        }

        /// <summary>
        /// Execute a process to check if a condition is true or false
        /// </summary>
        /// <param name="fileName">File to execute</param>
        /// <param name="arguments">Command-line arguments</param>
        /// <returns>Query result</returns>
        public static async Task<bool> ExecQuery(string fileName, string arguments)
        {
            using Process process = Process.Start(fileName, arguments);
            await process.WaitForExitAsync(Program.CancellationToken);
            return process.ExitCode == 0;
        }
    }
}
