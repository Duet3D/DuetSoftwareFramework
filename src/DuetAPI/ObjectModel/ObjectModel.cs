using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace DuetAPI.ObjectModel
{
    /// <summary>
    /// Representation of the Duet3D object model
    /// </summary>
    public partial class ObjectModel : ModelObject, IStaticModelObject
    {
        /// <summary>
        /// List of connected boards
        /// </summary>
        /// <seealso cref="Board"/>
        /// <remarks>
        /// The first item represents the main board
        /// </remarks>
        public StaticModelCollection<Board> Boards { get; } = [];

        /// <summary>
        /// Information about the individual directories
        /// </summary>
        /// <remarks>
        /// This may not be available in RepRapFirmware if no mass storages are available
        /// </remarks>
        public Directories Directories { get; } = new Directories();

        /// <summary>
        /// List of configured fans
        /// </summary>
        /// <seealso cref="Fan"/>
        public StaticModelCollection<Fan?> Fans { get; } = [];

        /// <summary>
        /// Dictionary of global variables vs JSON values
        /// </summary>
        /// <remarks>
        /// When DSF attempts to reconnect to RRF, this may be set to null to clear the contents
        /// </remarks>
        public JsonModelDictionary Global { get; } = new JsonModelDictionary(false);

        /// <summary>
        /// Information about the heat subsystem
        /// </summary>
        public Heat Heat { get; } = new Heat();

        /// <summary>
        /// Information about every available G/M/T-code channel
        /// </summary>
        public Inputs Inputs { get; } = [];

        /// <summary>
        /// Information about the current job
        /// </summary>
        public Job Job { get; } = new Job();

        /// <summary>
        /// List of configured LED strips
        /// </summary>
        /// <seealso cref="LedStrip"/>
        public StaticModelCollection<LedStrip> LedStrips { get; } = [];

        /// <summary>
        /// Machine configuration limits
        /// </summary>
        public Limits Limits { get; } = new Limits();

        /// <summary>
        /// Generic messages that do not belong explicitly to codes being executed.
        /// This includes status messages, generic errors and outputs generated by M118
        /// </summary>
        /// <seealso cref="Message"/>
        [SbcProperty(false)]
        public MessageCollection Messages { get; } = [];

        /// <summary>
        /// Information about the move subsystem
        /// </summary>
        public Move Move { get; } = new Move();

        /// <summary>
        /// Information about connected network adapters
        /// </summary>
        public Network Network { get; } = new Network();

        /// <summary>
        /// Dictionary of loaded plugins where each key is the plugin identifier
        /// </summary>
        /// <remarks>
        /// This is only populated by DSF in SBC mode, however it may be populated manually as well in standalone mode.
        /// Values in this dictionary cannot become null. If a value is changed to null, the corresponding item is deleted
        /// </remarks>
        [SbcProperty(false)]
        public StaticModelDictionary<Plugin> Plugins { get; } = new StaticModelDictionary<Plugin>(true);

        /// <summary>
        /// Information about the SBC which Duet Software Framework is running on.
        /// This is null if the system is operating in standalone mode
        /// </summary>
        [SbcProperty(false)]
        public SBC? SBC
        {
            get => _sbc;
            set => SetPropertyValue(ref _sbc, value);
        }
        private SBC? _sbc;

        /// <summary>
        /// Information about connected sensors including Z-probes and endstops
        /// </summary>
        public Sensors Sensors { get; } = new Sensors();
        
        /// <summary>
        /// List of configured CNC spindles
        /// </summary>
        /// <seealso cref="Spindle"/>
        public StaticModelCollection<Spindle?> Spindles { get; } = [];
        
        /// <summary>
        /// Information about the machine state
        /// </summary>
        public State State { get; } = new State();
        
        /// <summary>
        /// List of configured tools
        /// </summary>
        /// <seealso cref="Tool"/>
        public StaticModelCollection<Tool?> Tools { get; } = [];

        /// <summary>
        /// List of available mass storages
        /// </summary>
        /// <seealso cref="Volume"/>
        [SbcProperty(true)]
        public StaticModelCollection<Volume> Volumes { get; } = [];

        /// <summary>
        /// Update a specific key of this instance from a given JSON element as provided by the firmware
        /// </summary>
        /// <param name="key">Property name to update</param>
        /// <param name="jsonElement">Element to update this intance from</param>
        /// <param name="offset">Index offset</param>
        /// <param name="last">Whether this is the last update</param>
        /// <returns>Whether the key could be updated</returns>
        public bool UpdateFromFirmwareJson(string? key, JsonElement jsonElement, int offset = 0, bool last = true) => GeneratedUpdateFromJson(key, jsonElement, true, offset, last);

        /// <summary>
        /// Update a specific key of this instance from a given JSON reader as provided by the firmware
        /// </summary>
        /// <param name="key">Property name to update</param>
        /// <param name="reader">JSON reader</param>
        /// <param name="offset">Index offset</param>
        /// <param name="last">Whether this is the last update</param>
        /// <returns>Whether the key could be updated</returns>
        public bool UpdateFromFirmwareJsonReader(string? key, ref Utf8JsonReader reader, int offset = 0, bool last = true) => GeneratedUpdateFromJsonReader(key, ref reader, true, offset, last);

        /// <summary>
        /// Update this instance from a given JSON element
        /// </summary>
        /// <param name="jsonElement">Element to update this intance from</param>
        /// <returns>Whether the key could be updated</returns>
        public bool UpdateFromJson(JsonElement jsonElement) => GeneratedUpdateFromJson(null, jsonElement, false);

        /// <summary>
        /// Update a specific key of this instance from a given JSON element
        /// </summary>
        /// <param name="key">Property name to update</param>
        /// <param name="jsonElement">Element to update this intance from</param>
        /// <returns>Whether the key could be updated</returns>
        public bool UpdateFromJson(string key, JsonElement jsonElement) => GeneratedUpdateFromJson(key, jsonElement, false);

        /// <summary>
        /// Update a specific key of this instance from a given JSON reader
        /// </summary>
        /// <param name="key">Property name to update</param>
        /// <param name="reader">JSON reader</param>
        /// <returns>Whether the key could be updated</returns>
        public bool UpdateFromJsonReader(string key, ref Utf8JsonReader reader) => GeneratedUpdateFromJsonReader(key, ref reader, false);

        /// <summary>
        /// Convert this instance to a JSON text
        /// </summary>
        /// <returns>JSON object</returns>
        public override string ToString() => JsonSerializer.Serialize(this, typeof(ObjectModel), ObjectModelContext.Default);

        /// <summary>
        /// Serialize this instance to a UTF-8 string
        /// </summary>
        /// <returns></returns>
        public byte[] ToUtf8Json() => JsonSerializer.SerializeToUtf8Bytes(this, typeof(ObjectModel), ObjectModelContext.Default);

        /// <summary>
        /// Static event to be called when the deserialization of a property failed.
        /// If an event handler is assigned, potential JsonExceptions are suppressed and the event is called instead
        /// </summary>
        public static event DeserializationFailedEventHandler? OnDeserializationFailed;

        /// <summary>
        /// Internal function to be called when the deserialization of a sub-property failed
        /// </summary>
        /// <param name="sender">Object that caused the exception</param>
        /// <param name="type">Type of the object that could not be deserialized</param>
        /// <param name="jsonValue">JSON data</param>
        /// <param name="e">Exception that caused the error</param>
        /// <returns>True if the exception can be suppressed</returns>
        internal static bool DeserializationFailed(object sender, Type type, JsonElement jsonValue, JsonException e)
        {
            if (OnDeserializationFailed is null)
            {
                return false;
            }
            OnDeserializationFailed.Invoke(sender, new DeserializationFailedEventArgs(type, jsonValue, e));
            return true;
        }
    }

    /// <summary>
    /// Delegate of the event to be called when deserialization of a property fails
    /// </summary>
    /// <param name="sender">Instance of the object that tried to deserialize a value`</param>
    /// <param name="e">Event arguments pointing to the property that failed to be deserialized</param>
    public delegate void DeserializationFailedEventHandler(object sender, DeserializationFailedEventArgs e);

    /// <summary>
    /// Event arguments for the event to be called when deserialization fails
    /// </summary>
    /// <param name="type">Type that failed to be deserialized</param>
    /// <param name="jsonValue">Data that failed to be deserialized</param>
    /// <param name="e">Exception that caused the deserialization to fail</param>
    public sealed class DeserializationFailedEventArgs(Type type, JsonElement jsonValue, Exception e) : EventArgs
    {
        /// <summary>
        /// Type that failed to be deserialized
        /// </summary>
        public Type TargetType { get; private set; } = type;

        /// <summary>
        /// Data that failed to be deserialized
        /// </summary>
        public JsonElement JsonValue { get; private set; } = jsonValue;

        /// <summary>
        /// Exception that caused the deserialization to fail
        /// </summary>
        public Exception Exception { get; private set; } = e;
    }

    /// <summary>
    /// Context for JSON handling of the main object model classes
    /// </summary>
    [JsonSerializable(typeof(ObjectModel))]
    [JsonSourceGenerationOptions(DictionaryKeyPolicy = JsonKnownNamingPolicy.CamelCase, PreferredObjectCreationHandling = JsonObjectCreationHandling.Populate, PropertyNamingPolicy = JsonKnownNamingPolicy.CamelCase)]
    public partial class ObjectModelContext : JsonSerializerContext { }
}