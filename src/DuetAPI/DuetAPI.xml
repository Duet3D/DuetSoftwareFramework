<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DuetAPI</name>
    </assembly>
    <members>
        <member name="T:DuetAPI.CodeChannel">
            <summary>
            Enumeration of every available code channel
            </summary>
            <seealso cref="T:DuetAPI.Commands.Code"/>
            <seealso cref="T:DuetAPI.Commands.SimpleCode"/>
            <seealso cref="T:DuetAPI.Machine.Channels"/>
        </member>
        <member name="F:DuetAPI.CodeChannel.HTTP">
            <summary>
            Code channel for HTTP requests
            </summary>
        </member>
        <member name="F:DuetAPI.CodeChannel.Telnet">
            <summary>
            Code channel for Telnet requests
            </summary>
        </member>
        <member name="F:DuetAPI.CodeChannel.File">
            <summary>
            Code channel for file prints
            </summary>
        </member>
        <member name="F:DuetAPI.CodeChannel.USB">
            <summary>
            Code channel for USB requests
            </summary>
        </member>
        <member name="F:DuetAPI.CodeChannel.AUX">
            <summary>
            Code channel for serial devices (e.g. PanelDue)
            </summary>
        </member>
        <member name="F:DuetAPI.CodeChannel.Trigger">
            <summary>
            Code channel for running triggers or config.g
            </summary>
        </member>
        <member name="F:DuetAPI.CodeChannel.CodeQueue">
            <summary>
            Code channel for the code queue that executes a couple of codes in-sync with moves
            </summary>
        </member>
        <member name="F:DuetAPI.CodeChannel.LCD">
            <summary>
            Code channel for auxiliary LCD devices (e.g. PanelOne)
            </summary>
        </member>
        <member name="F:DuetAPI.CodeChannel.SPI">
            <summary>
            Default code channel for requests over SPI
            </summary>
        </member>
        <member name="F:DuetAPI.CodeChannel.Daemon">
            <summary>
            Code channel that executes the daemon process
            </summary>
        </member>
        <member name="F:DuetAPI.CodeChannel.AutoPause">
            <summary>
            Code channel that executes macros on power fail, heater faults and filament out
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.AddHttpEndpoint">
            <summary>
            Register a new HTTP endpoint via DuetWebServer. This will create a new HTTP endpoint under /machine/{Namespace}/{EndpointPath}.
            Returns a path to the UNIX socket which DuetWebServer will connect to whenever a matching HTTP request is received.
            A plugin using this command has to open a new UNIX socket with the given path that DuetWebServer can connect to
            </summary>
            <seealso cref="T:DuetAPI.Commands.ReceivedHttpRequest"/>.
            <seealso cref="T:DuetAPI.Commands.SendHttpResponse"/>
        </member>
        <member name="P:DuetAPI.Commands.AddHttpEndpoint.EndpointType">
            <summary>
            Type of the HTTP request
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.AddHttpEndpoint.Namespace">
            <summary>
            Namespace of the plugin wanting to create a new third-party endpoint
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.AddHttpEndpoint.Path">
            <summary>
            Path to the endpoint to register
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.AddUserSession">
            <summary>
            Register a new user session.
            Returns the ID of the new user session
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.AddUserSession.AccessLevel">
            <summary>
            Access level of this session
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.AddUserSession.SessionType">
            <summary>
            Type of this session
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.AddUserSession.Origin">
            <summary>
            Origin of this session. For remote sessions, this equals the remote IP address
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.AddUserSession.OriginPort">
            <summary>
            Corresponding identifier of the origin.
            If it is a remote session, it is the remote port, else it defaults to the PID of the current process
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.BaseCommand">
            <summary>
            Base class of a command.
            When an instance of this class is processed in the control server, the connection identifier of the channel it was received from is assigned.
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.BaseCommand.#ctor">
            <summary>
            Creates a new instance of the BaseCommand
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.BaseCommand.Command">
            <summary>
            Name of the command to execute
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.BaseCommand.Invoke">
            <summary>
            Invokes the command implementation
            </summary>
            <returns>Result of the command</returns>
        </member>
        <member name="T:DuetAPI.Commands.Command">
            <summary>
            Base class of commands that do not return a result
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.Command.Execute">
            <summary>
            Reserved for the actual command implementation in the control server
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetAPI.Commands.Command.Invoke">
            <summary>
            Invokes the command implementation
            </summary>
            <returns>null</returns>
        </member>
        <member name="T:DuetAPI.Commands.Command`1">
            <summary>
            Base class of a command that returns a result
            </summary>
            <typeparam name="T">Type of the command result</typeparam>
        </member>
        <member name="M:DuetAPI.Commands.Command`1.Execute">
            <summary>
            Reserved for the actual command implementation in the control server
            </summary>
            <returns>Command result</returns>
        </member>
        <member name="M:DuetAPI.Commands.Command`1.Invoke">
            <summary>
            Invokes the command implementation
            </summary>
            <returns>Command result</returns>
        </member>
        <member name="T:DuetAPI.Commands.Code">
            <summary>
            A parsed representation of a generic G/M/T-code
            </summary>
            <seealso cref="T:DuetAPI.Commands.CodeResult"/>
        </member>
        <member name="M:DuetAPI.Commands.Code.#ctor">
            <summary>
            Create an empty Code representation
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.Code.#ctor(System.String)">
            <summary>
            Create a new Code instance and attempt to parse the given code string
            </summary>
            <param name="code">G/M/T-Code</param>
        </member>
        <member name="P:DuetAPI.Commands.Code.SourceConnection">
            <summary>
            The connection ID this code was received from. If this is 0, the code originates from an internal DCS task
            </summary>
            <remarks>
            Usually there is no need to populate this property. It is internally overwritten by the control server on receipt
            </remarks>
        </member>
        <member name="P:DuetAPI.Commands.Code.Result">
            <summary>
            Result of this code. This property is only set when the code has finished its excution.
            It remains null if the code has been cancelled
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.Type">
            <summary>
            Type of the code. If no exact type could be determined, it is interpreted as a comment
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.Channel">
            <summary>
            Code channel to send this code to
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.LineNumber">
            <summary>
            Line number of this code
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.Indent">
            <summary>
            Number of whitespaces prefixing the command content
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.Keyword">
            <summary>
            Type of conditional G-code (if any)
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.KeywordArgument">
            <summary>
            Argument of the conditional G-code (if any)
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.MajorNumber">
            <summary>
            Major code number (e.g. 28 in G28)
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.MinorNumber">
            <summary>
            Minor code number (e.g. 3 in G54.3)
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.Flags">
            <summary>
            Flags of this code
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.Comment">
            <summary>
            Comment of the G/M/T-code
            </summary>
            <remarks>
            The parser combines different comment segments and concatenates them as a single value.
            So for example a code like 'G28 (Do homing) ; via G28' causes the Comment field to be filled with 'Do homing via G28'
            </remarks>
        </member>
        <member name="P:DuetAPI.Commands.Code.FilePosition">
            <summary>
            File position of this code in bytes (optional)
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.Length">
            <summary>
            Length of the original code in bytes (optional)
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.Parameters">
            <summary>
            List of parsed code parameters (see <see cref="T:DuetAPI.Commands.CodeParameter"/> for further information)
            </summary>
            <seealso cref="T:DuetAPI.Commands.CodeParameter"/>
        </member>
        <member name="M:DuetAPI.Commands.Code.Reset(System.Boolean)">
            <summary>
            Reset this instance
            </summary>
            <param name="keepLineNumber">Keep the line number</param>
        </member>
        <member name="M:DuetAPI.Commands.Code.Parameter(System.Char)">
            <summary>
            Retrieve the parameter whose letter equals c. Note that this look-up is case-insensitive
            </summary>
            <param name="c">Letter of the parameter to find</param>
            <returns>The parsed parameter instance or null if none could be found</returns>
        </member>
        <member name="M:DuetAPI.Commands.Code.Parameter(System.Char,System.Object)">
            <summary>
            Retrieve the parameter whose letter equals c or generate a default parameter
            </summary>
            <param name="c">Letter of the parameter to find</param>
            <param name="defaultValue">Default parameter value (no expression)</param>
            <returns>The parsed parameter instance or null if none could be found</returns>
        </member>
        <member name="M:DuetAPI.Commands.Code.GetUnprecedentedString(System.Boolean)">
            <summary>
            Reconstruct an unprecedented string from the parameter list or
            retrieve the parameter which does not have a letter assigned
            </summary>
            <param name="quoteStrings">Encapsulate strings in double quotes</param>
            <returns>Unprecedented string</returns>
        </member>
        <member name="M:DuetAPI.Commands.Code.ToString">
            <summary>
            Convert the parsed code back to a text-based G/M/T-code
            </summary>
            <returns>Reconstructed code string</returns>
        </member>
        <member name="M:DuetAPI.Commands.Code.ToShortString">
            <summary>
            Convert only the command portion to a text-based G/M/T-code (e.g. G28)
            </summary>
            <returns>Command fraction of the code</returns>
        </member>
        <member name="M:DuetAPI.Commands.Code.Parse(System.IO.TextReader,DuetAPI.Commands.Code,System.Boolean@)">
            <summary>
            Parse the next available G/M/T-code from the given stream
            </summary>
            <param name="reader">Input to read from</param>
            <param name="result">Code to fill</param>
            <param name="enforcingAbsolutePosition">If G53 is in effect for the current line</param>
            <returns>Whether anything could be read</returns>
            <exception cref="T:DuetAPI.Commands.CodeParserException">Thrown if the code contains errors like unterminated strings or unterminated comments</exception>
        </member>
        <member name="T:DuetAPI.Commands.KeywordType">
            <summary>
            Types of conditional G-code
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.KeywordType.None">
            <summary>
            No conditional code
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.KeywordType.If">
            <summary>
            If condition
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.KeywordType.ElseIf">
            <summary>
            Else-if condition
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.KeywordType.Else">
            <summary>
            Else condition
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.KeywordType.While">
            <summary>
            While condition
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.KeywordType.Break">
            <summary>
            Break instruction
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.KeywordType.Return">
            <summary>
            Return instruction
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.KeywordType.Abort">
            <summary>
            Abort instruction
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.KeywordType.Var">
            <summary>
            Var operation
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.KeywordType.Set">
            <summary>
            Set operation
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.KeywordType.Echo">
            <summary>
            Echo operation
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.CodeFlags">
            <summary>
            Code bits to classify G/M/T-codes
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeFlags.None">
            <summary>
            Placeholder to indicate that no flags are set
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeFlags.Asynchronous">
            <summary>
            Code execution finishes as soon as it is enqueued in the code queue
            </summary>
            <remarks>
            If codes are started asynchronously, code replies are normally reported via the object model.
            In order to keep track of code replies, an <see cref="F:DuetAPI.Connection.ConnectionMode.Intercept"/> connection
            in <see cref="F:DuetAPI.Connection.InterceptionMode.Executed"/> mode can be used
            </remarks>
        </member>
        <member name="F:DuetAPI.Commands.CodeFlags.IsPreProcessed">
            <summary>
            Code has been preprocessed (i.e. it has been processed by the DCS pre-side code interceptors)
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeFlags.IsPostProcessed">
            <summary>
            Code has been postprocessed (i.e. it has been processed by the internal DCS code processor)
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeFlags.IsFromMacro">
            <summary>
            Code originates from a macro file
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeFlags.IsNestedMacro">
            <summary>
            Code originates from a system macro file (i.e. RRF requested it)
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeFlags.IsFromConfig">
            <summary>
            Code comes from config.g or config.g.bak
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeFlags.IsFromConfigOverride">
            <summary>
            Code comes from config-override.g
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeFlags.EnforceAbsolutePosition">
            <summary>
            Enforce absolute positioning via prefixed G53 code
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeFlags.IsPrioritized">
            <summary>
            Override every other code and send it to the firmware as quickly as possible
            </summary>
            <remarks>
            When this type of code is intercepted, the code can be ignored, cancelled, or resolved,
            but it is not possible to insert asynchronous codes that complete before the given code.
            In a future DSF version it may be no longer possible to intercept prioritized codes
            </remarks>
        </member>
        <member name="F:DuetAPI.Commands.CodeFlags.Unbuffered">
            <summary>
            Do NOT process another code on the same channel before this code has been fully executed
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.CodeParameter">
            <summary>
            Represents a parsed parameter of a G/M/T-code
            Initial parsing is done whenever a code is processed
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.CodeParameter.Letter">
            <summary>
            Letter of the code parameter (e.g. P in M106 P3)
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.CodeParameter.IsExpression">
            <summary>
            Indicates if this parameter is an expression that can be evaluated
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.CodeParameter.IsDriverId">
            <summary>
            Indicates if this parameter is a driver identifier
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeParameter._stringValue">
            <summary>
            Unparsed string representation of the code parameter or an empty string if none present
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeParameter._parsedValue">
            <summary>
            Internal parsed representation of the string value (one of string, int, uint, float, int[], uint[] or float[])
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.#ctor(System.Char,System.String,System.Boolean)">
            <summary>
            Creates a new CodeParameter instance and parses value to a native data type if applicable
            </summary>
            <param name="letter">Letter of the code parameter</param>
            <param name="value">String representation of the value</param>
            <param name="isString">Whether this is a string. This is set to true if the parameter was inside quotation marks.</param>
            <remarks>This constructor does not parsed long (aka int64) values because RRF cannot handle them</remarks>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.#ctor(System.Char,System.Object)">
            <summary>
            Creates a new CodeParameter instance and with the given value
            </summary>
            <param name="letter">Letter of the code parameter (automatically converted to upper-case)</param>
            <param name="value">Value of this parameter</param>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.ConvertDriverIds">
            <summary>
            Convert this parameter to driver id(s)
            </summary>
            <remarks>The data remains a uint (array) after the conversion. The top 16 bits reflect the board number and the bottom 16 bits the port</remarks>
        </member>
        <member name="P:DuetAPI.Commands.CodeParameter.Type">
            <summary>
            Data type of the internally parsed value
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Implicit(DuetAPI.Commands.CodeParameter)~System.Single">
            <summary>
            Implicit conversion operator to float
            </summary>
            <param name="codeParameter">Target object</param>
            <returns>Converted value</returns>
            <exception cref="T:System.ArgumentException">Data type is not convertible</exception>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Implicit(DuetAPI.Commands.CodeParameter)~System.Int32">
            <summary>
            Implicit conversion operator to int
            </summary>
            <param name="codeParameter">Target object</param>
            <returns>Converted value</returns>
            <exception cref="T:System.ArgumentException">Data type is not convertible</exception>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Implicit(DuetAPI.Commands.CodeParameter)~System.UInt32">
            <summary>
            Implicit conversion operator to uint
            </summary>
            <param name="codeParameter">Target object</param>
            <returns>Converted value</returns>
            <exception cref="T:System.ArgumentException">Data type is not convertible</exception>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Implicit(DuetAPI.Commands.CodeParameter)~System.Int64">
            <summary>
            Implicit conversion operator to long
            </summary>
            <param name="codeParameter">Target object</param>
            <returns>Converted value</returns>
            <exception cref="T:System.ArgumentException">Data type is not convertible</exception>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Implicit(DuetAPI.Commands.CodeParameter)~System.Boolean">
            <summary>
            Implicit conversion operator to bool
            </summary>
            <param name="codeParameter">Target object</param>
            <returns>Converted value</returns>
            <exception cref="T:System.ArgumentException">Data type is not convertible</exception>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Implicit(DuetAPI.Commands.CodeParameter)~System.String">
            <summary>
            Implicit conversion operator to string
            </summary>
            <param name="codeParameter">Target object</param>
            <returns>Converted value</returns>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Implicit(DuetAPI.Commands.CodeParameter)~System.Single[]">
            <summary>
            Implicit conversion operator to float array
            </summary>
            <param name="codeParameter">Target object</param>
            <returns>Converted value</returns>
            <exception cref="T:System.ArgumentException">Data type is not convertible</exception>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Implicit(DuetAPI.Commands.CodeParameter)~System.Int32[]">
            <summary>
            Implicit conversion operator to integer array
            </summary>
            <param name="codeParameter">Target object</param>
            <returns>Converted value</returns>
            <exception cref="T:System.ArgumentException">Data type is not convertible</exception>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Implicit(DuetAPI.Commands.CodeParameter)~System.UInt32[]">
            <summary>
            Implicit conversion operator to unsigned integer array
            </summary>
            <param name="codeParameter">Target object</param>
            <returns>Converted value</returns>
            <exception cref="T:System.ArgumentException">Data type is not convertible</exception>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Implicit(DuetAPI.Commands.CodeParameter)~System.Int64[]">
            <summary>
            Implicit conversion operator to long array
            </summary>
            <param name="codeParameter">Target object</param>
            <returns>Converted value</returns>
            <exception cref="T:System.ArgumentException">Data type is not convertible</exception>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Equality(DuetAPI.Commands.CodeParameter,System.Object)">
            <summary>
            Equality operator
            </summary>
            <param name="a">Code parameter</param>
            <param name="b">Other object</param>
            <returns>True if both objects are equal</returns>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Inequality(DuetAPI.Commands.CodeParameter,System.Object)">
            <summary>
            Inequality operator
            </summary>
            <param name="a">Code parameter</param>
            <param name="b">Other object</param>
            <returns>True if both objects are not equal</returns>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.Equals(System.Object)">
            <summary>
            Checks if the other obj equals this instance
            </summary>
            <param name="obj">Other object</param>
            <returns>True if both objects are not equal</returns>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.GetHashCode">
            <summary>
            Returns the hash code of this instance
            </summary>
            <returns>Computed hash code</returns>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.ToString">
            <summary>
            Converts this parameter to a string
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:DuetAPI.Commands.CodeParameterConverter">
            <summary>
            Converts a <see cref="T:DuetAPI.Commands.CodeParameter"/> instance to JSON
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameterConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read a CodeParameter object from JSON
            </summary>
            <param name="reader">JSON reader</param>
            <param name="typeToConvert">Type to convert</param>
            <param name="options">Serializer options</param>
            <returns>Read value</returns>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameterConverter.Write(System.Text.Json.Utf8JsonWriter,DuetAPI.Commands.CodeParameter,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write a CodeParameter to JSON
            </summary>
            <param name="writer">JSON writer</param>
            <param name="value">Value to serialize</param>
            <param name="options">Write options</param>
        </member>
        <member name="T:DuetAPI.Commands.CodeParserException">
            <summary>
            Exception class that is thrown when a G/M/T-code could not be parsed
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.CodeParserException.#ctor">
            <summary>
            Creates a new CodeParserException
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.CodeParserException.#ctor(System.String)">
            <summary>
            Creates a new CodeParserException
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:DuetAPI.Commands.CodeParserException.#ctor(System.String,DuetAPI.Commands.Code)">
            <summary>
            Creates a new CodeParserException with details where the parser failed to read data
            </summary>
            <param name="message">Exception message</param>
            <param name="code">Code being parsed</param>
        </member>
        <member name="M:DuetAPI.Commands.CodeParserException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new CodeParserException
            </summary>
            <param name="message">Exception message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="T:DuetAPI.Commands.CodeResult">
            <summary>
            List-based representation of a code result.
            Each item represents a <see cref="T:DuetAPI.Message"/> instance which can be easily converted to a string
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.CodeResult.#ctor">
            <summary>
            Create a new code result indicating success
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.CodeResult.#ctor(DuetAPI.MessageType,System.String)">
            <summary>
            Create a new code result with an initial message
            </summary>
            <param name="type">Message type</param>
            <param name="content">Message content</param>
        </member>
        <member name="M:DuetAPI.Commands.CodeResult.Add(DuetAPI.MessageType,System.String)">
            <summary>
            Add another message
            </summary>
            <param name="type">Message type</param>
            <param name="content">Message content</param>
        </member>
        <member name="P:DuetAPI.Commands.CodeResult.IsEmpty">
            <summary>
            Checks if the message contains any data
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.CodeResult.IsSuccessful">
            <summary>
            Indicates if the code could complete without an error
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.CodeResult.ToString">
            <summary>
            Converts the CodeResult to a string
            </summary>
            <returns>The CodeResult as a string</returns>
        </member>
        <member name="T:DuetAPI.Commands.CodeType">
            <summary>
            Type of a generic G/M/T-code. If none is applicable, it is treated as a comment
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeType.Comment">
            <summary>
            Comment type (ignored during execution)
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeType.GCode">
            <summary>
            G-code
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeType.MCode">
            <summary>
            M-code
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeType.TCode">
            <summary>
            T-code
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.Flush">
            <summary>
            Wait for all pending (macro) codes on the given channel to finish.
            This effectively guarantees that all buffered codes are processed by RRF before this command finishes.
            If the flush request is successful, true is returned
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Flush.Channel">
            <summary>
            Code channel to flush
            </summary>
            <remarks>
            This value is ignored if this request is processed while a code is being intercepted
            </remarks>
        </member>
        <member name="T:DuetAPI.Commands.GetFileInfo">
            <summary>
            Analyse a G-code file and return an instance of <see cref="T:DuetAPI.ParsedFileInfo"/> when ready
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.GetFileInfo.FileName">
            <summary>
            The filename to extract information from
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.GetMachineModel">
            <summary>
            Get the current RepRapFirmware machine model
            </summary>
            <seealso cref="T:DuetAPI.Machine.MachineModel"/>
        </member>
        <member name="T:DuetAPI.Commands.Cancel">
            <summary>
            Cancel a code in <see cref="T:DuetAPI.Connection.InterceptionMode"/>
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.Ignore">
            <summary>
            Ignore the code to intercept and allow it to be processed without any modifications
            </summary>
            <remarks>
            This command is only permitted in <see cref="F:DuetAPI.Connection.ConnectionMode.Intercept"/> mode
            </remarks>
        </member>
        <member name="T:DuetAPI.Commands.Resolve">
            <summary>
            Resolve the code to intercept and return the given message details for its completion.
            </summary>
            <remarks>
            This command is only permitted in <see cref="F:DuetAPI.Connection.ConnectionMode.Intercept"/> mode
            </remarks>
        </member>
        <member name="P:DuetAPI.Commands.Resolve.Type">
            <summary>
            Type of the resolving message
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Resolve.Content">
            <summary>
            Content of the resolving message
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.LockMachineModel">
            <summary>
            Lock the machine model for read/write access.
            This may be used to update the machine model and to change array items
            </summary>
            <seealso cref="T:DuetAPI.Commands.UnlockMachineModel"/>
        </member>
        <member name="T:DuetAPI.Commands.ReceivedHttpRequest">
            <summary>
            Notification sent by the webserver when a new HTTP request is received
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.ReceivedHttpRequest.SessionId">
            <summary>
            Identifier of the corresponding user session. This is -1 if it is an anonymous request
            </summary>
            <seealso cref="T:DuetAPI.Machine.UserSession"/>
        </member>
        <member name="P:DuetAPI.Commands.ReceivedHttpRequest.Queries">
            <summary>
            List of HTTP query pairs
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.ReceivedHttpRequest.Headers">
            <summary>
            List of HTTP header pairs
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.ReceivedHttpRequest.ContentType">
            <summary>
            Type of the body content
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.ReceivedHttpRequest.Body">
            <summary>
            Body content as plain text
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.RemoveHttpEndpoint">
            <summary>
            Remove an existing HTTP endpoint.
            Returns true if the endpoint could be successfully removed
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.RemoveHttpEndpoint.EndpointType">
            <summary>
            Type of the endpoint
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.RemoveHttpEndpoint.Namespace">
            <summary>
            Namespace of the endpoint
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.RemoveHttpEndpoint.Path">
            <summary>
            Endpoint path to unregister
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.RemoveUserSession">
            <summary>
            Remove an existing user session
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.RemoveUserSession.Id">
            <summary>
            Identifier of the user session to remove
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.ResolvePath">
            <summary>
            Resolve a RepRapFirmware-style path to an actual file path
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.ResolvePath.Path">
            <summary>
            Path that is RepRapFirmware-compatible
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.BaseResponse">
            <summary>
            Base class for every response to a command request.
            An instance of this is returned when a regular <see cref="T:DuetAPI.Commands.Command"/> has finished.
            </summary>
            <seealso cref="T:DuetAPI.Commands.Response`1"/>
            <seealso cref="T:DuetAPI.Commands.ErrorResponse"/>
        </member>
        <member name="P:DuetAPI.Commands.BaseResponse.Success">
            <summary>
            Indicates if the command could complete without a runtime error
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.Response`1">
            <summary>
            Response of a <see cref="T:DuetAPI.Commands.Command`1"/>
            </summary>
            <typeparam name="T">Type of the response</typeparam>
        </member>
        <member name="P:DuetAPI.Commands.Response`1.Result">
            <summary>
            Result of the command
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.Response`1.#ctor">
            <summary>
            Default constructor for a response
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.Response`1.#ctor(`0)">
            <summary>
            Creates a new Response instance from the given result
            </summary>
            <param name="result">Response result</param>
        </member>
        <member name="T:DuetAPI.Commands.ErrorResponse">
            <summary>
            Response indicating a runtime exception during the internal processing of a command
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.ErrorResponse.ErrorType">
            <summary>
            Name of the .NET exception
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.ErrorResponse.ErrorMessage">
            <summary>
            Message of the .NET exception
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.ErrorResponse.#ctor">
            <summary>
            Creates a new response indicating a runtime error.
            This constructor is only used for deserialization
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.ErrorResponse.#ctor(System.Exception)">
            <summary>
            Creates a new response indicating a runtime error
            </summary>
            <param name="e">Exception to report</param>
        </member>
        <member name="T:DuetAPI.Commands.SendHttpResponse">
            <summary>
            Send a response to a received HTTP request
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.SendHttpResponse.StatusCode">
            <summary>
            HTTP or WebSocket status code to return. If this is greater than or equal to 1000, the WebSocket is closed
            </summary>
            <remarks>Codes greater than 1000 represent WebSocket status codes (1000 = normal close)</remarks>
        </member>
        <member name="P:DuetAPI.Commands.SendHttpResponse.Response">
            <summary>
            Content to return. If this is null or empty and a WebSocket is connected, the connection is closed
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.SendHttpResponse.ResponseType">
            <summary>
            Type of the content to return. Ignored if a WebSocket is connected
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.HttpResponseType">
            <summary>
            Enumeration of supported HTTP responses
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.HttpResponseType.StatusCode">
            <summary>
            HTTP status code without payload
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.HttpResponseType.PlainText">
            <summary>
            Plain text (UTF-8)
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.HttpResponseType.JSON">
            <summary>
            JSON-formatted data
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.HttpResponseType.File">
            <summary>
            File content. Response must hold the absolute path to the file to return
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.SetMachineModel">
            <summary>
            Set an atomic property in the machine model. Make sure to acquire the read/write lock first!
            Returns true if the field could be updated
            </summary>
            <seealso cref="T:DuetAPI.Commands.LockMachineModel"/>
            <seealso cref="T:DuetAPI.Commands.UnlockMachineModel"/>
        </member>
        <member name="P:DuetAPI.Commands.SetMachineModel.PropertyPath">
            <summary>
            Path to the property in the machine model
            </summary>
            <seealso cref="P:DuetAPI.Connection.InitMessages.SubscribeInitMessage.Filter"/>
        </member>
        <member name="P:DuetAPI.Commands.SetMachineModel.Value">
            <summary>
            String representation of the value to set
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.SimpleCode">
            <summary>
            Perform a simple G/M/T-code
            </summary>
            <remarks>
            Internally the code passed is populated as a full <see cref="P:DuetAPI.Commands.SimpleCode.Code"/> instance and on completion
            its <see cref="T:DuetAPI.Commands.CodeResult"/> is transformed back into a basic string. This is useful for minimal
            extensions that do not require granular control of the code details. Except for certain cases, it
            is NOT recommended for usage in <see cref="T:DuetAPI.Connection.InterceptionMode"/> because it renders the
            internal code buffer useless.
            </remarks>
        </member>
        <member name="P:DuetAPI.Commands.SimpleCode.Code">
            <summary>
            Code to parse and execute
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.SimpleCode.Channel">
            <summary>
            Destination channel
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.Acknowledge">
            <summary>
            Acknowledge a (partial) model update.
            </summary>
            <remarks>
            This command is only permitted in <see cref="F:DuetAPI.Connection.ConnectionMode.Subscribe"/> mode
            </remarks>
        </member>
        <member name="T:DuetAPI.Commands.SyncMachineModel">
            <summary>
            Wait for the machine model to be fully updated from RepRapFirmware
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.UnlockMachineModel">
            <summary>
            Unlock the machine model after obtaining read/write access.
            This is mandatory after <see cref="T:DuetAPI.Commands.LockMachineModel"/> has been invoked
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.WriteMessage">
            <summary>
            Write an arbitrary message
            </summary>
            <remarks>If neither <c>OutputMessage</c> nor <c>LogMessage</c> is true, the message is written to the console output</remarks>
        </member>
        <member name="P:DuetAPI.Commands.WriteMessage.Type">
            <summary>
            Type of the message to write
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.WriteMessage.Content">
            <summary>
            Content of the message to write
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.WriteMessage.OutputMessage">
            <summary>
            Output the message on the console and via the object model
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.WriteMessage.LogMessage">
            <summary>
            Write the message to the log file (if applicable)
            </summary>
        </member>
        <member name="T:DuetAPI.Connection.ConnectionMode">
            <summary>
            Supported connection types for client connections
            </summary>
        </member>
        <member name="F:DuetAPI.Connection.ConnectionMode.Unknown">
            <summary>
            Unknown connection type. If this is used, the connection is immediately terminated
            </summary>
        </member>
        <member name="F:DuetAPI.Connection.ConnectionMode.Command">
            <summary>
            Command mode. This allows clients to send general purpose messages to the control server like
            G-codes or requests of the full object model
            </summary>
            <seealso cref="T:DuetAPI.Connection.InitMessages.CommandInitMessage"/>
        </member>
        <member name="F:DuetAPI.Connection.ConnectionMode.Intercept">
            <summary>
            Interception mode. This allows clients to intercept G/M/T-codes before or after they are initially processed
            </summary>
            <seealso cref="T:DuetAPI.Connection.InitMessages.InterceptInitMessage"/>
        </member>
        <member name="F:DuetAPI.Connection.ConnectionMode.Subscribe">
            <summary>
            Subscription mode. In this mode object model updates are transmitted to the client after each update
            </summary>
            <seealso cref="T:DuetAPI.Connection.InitMessages.SubscribeInitMessage"/>
        </member>
        <member name="T:DuetAPI.Connection.Defaults">
            <summary>
            Static class that holds the connection defaults
            </summary>
        </member>
        <member name="F:DuetAPI.Connection.Defaults.SocketDirectory">
            <summary>
            Default directory in which DSF-related UNIX sockets reside
            </summary>
        </member>
        <member name="F:DuetAPI.Connection.Defaults.SocketFile">
            <summary>
            Default UNIX socket file for DuetControlServer
            </summary>
        </member>
        <member name="F:DuetAPI.Connection.Defaults.FullSocketPath">
            <summary>
            Default fully-qualified path to the UNIX socket for DuetControlServer
            </summary>
        </member>
        <member name="F:DuetAPI.Connection.Defaults.Channel">
            <summary>
            Default code channel to use
            </summary>
        </member>
        <member name="T:DuetAPI.Connection.InitMessages.ClientInitMessage">
            <summary>
            An instance of this class is sent from the client to the server as a response to the <see cref="T:DuetAPI.Connection.InitMessages.ServerInitMessage"/>.
            It allows a client to select the connection mode (<see cref="T:DuetAPI.Connection.ConnectionMode"/>).
            </summary>
        </member>
        <member name="P:DuetAPI.Connection.InitMessages.ClientInitMessage.Mode">
            <summary>
            Desired mode of the new connection
            </summary>
        </member>
        <member name="T:DuetAPI.Connection.InitMessages.CommandInitMessage">
            <summary>
            Enter command-based connection mode
            In this conneciton mode nearly all of the commands in the <see cref="N:DuetAPI.Commands"/> namespace can be used
            </summary>
        </member>
        <member name="M:DuetAPI.Connection.InitMessages.CommandInitMessage.#ctor">
            <summary>
            Creates a new init message instance
            </summary>
        </member>
        <member name="T:DuetAPI.Connection.InitMessages.InterceptInitMessage">
            <summary>
            Enter interception mode
            Whenever a code is received, the connection must respond with one of
            - <cref see="DuetAPI.Commands.Cancel">Cancel</cref> to cancel the code
            - <cref see="DuetAPI.Commands.Ignore">Ignore</cref> to pass through the code without modifications
            - <cref see="DuetAPI.Commands.Resolve">Resolve</cref> to resolve the current code and to return a message
            In addition the interceptor may issue custom commands once a code has been received
            </summary>
            <remarks>
            Do not attempt to perform commands before an intercepting code is received, else the order of
            command execution cannot be guaranteed. Furthermore, avoid the usage of <see cref="T:DuetAPI.Commands.SimpleCode"/>
            if new movement codes (G0/G1) are supposed to be inserted before another one. It is better to send a full
            <see cref="T:DuetAPI.Commands.Code"/> object with the <see cref="F:DuetAPI.Commands.CodeFlags.Asynchronous"/> flag set.
            If a code from a macro file is intercepted, make sure to set the <see cref="F:DuetAPI.Commands.CodeFlags.IsFromMacro"/>
            flag when you insert a new coe, else the code will be started when the macro file(s) have finished.
            </remarks>
        </member>
        <member name="M:DuetAPI.Connection.InitMessages.InterceptInitMessage.#ctor">
            <summary>
            Creates a new init message instance
            </summary>
        </member>
        <member name="P:DuetAPI.Connection.InitMessages.InterceptInitMessage.InterceptionMode">
            <summary>
            Defines in what mode commands are supposed to be intercepted
            </summary>
        </member>
        <member name="T:DuetAPI.Connection.InitMessages.ServerInitMessage">
            <summary>
            An instance of this class is sent by the server to the client in JSON format once a connection has been established.
            </summary>
        </member>
        <member name="P:DuetAPI.Connection.InitMessages.ServerInitMessage.Version">
            <summary>
            Version of the server-side API. A client is supposed to check if the received API level is greater than
            or equal to its own API level once a connection has been etablished. This is recommended to ensure that all
            of the required commands are actually supported by the control server
            </summary>
        </member>
        <member name="P:DuetAPI.Connection.InitMessages.ServerInitMessage.Id">
            <summary>
            Unique connection ID assigned by the control server to allow clients to track their commands
            </summary>
        </member>
        <member name="T:DuetAPI.Connection.InitMessages.SubscribeInitMessage">
            <summary>
            Enter subscription mode and receive either the full object model or parts of it after every update
            </summary>
        </member>
        <member name="M:DuetAPI.Connection.InitMessages.SubscribeInitMessage.#ctor">
            <summary>
            Creates a new init message instance
            </summary>
        </member>
        <member name="P:DuetAPI.Connection.InitMessages.SubscribeInitMessage.SubscriptionMode">
            <summary>
            Type of the subscription
            </summary>
        </member>
        <member name="P:DuetAPI.Connection.InitMessages.SubscribeInitMessage.Filter">
            <summary>
            Optional filter path for <see cref="F:DuetAPI.Connection.SubscriptionMode.Patch"/> mode
            </summary>
            <remarks>
            The style of a filter is similar to XPath. For example, if you want to monitor only the current heater temperatures,
            you can use the filter expression "heat/heaters[*]/current". Wildcards are supported either for full names or indices.
            To get updates for an entire namespace, the ** wildcard can be used (for example heat/** for everything heat-related),
            however it can be only used at the end of a filter expression. Multiple filters can be used on one connection and they
            have to be delimited by one of these charaters: ['|', ',', ' ', '\r', '\n']
            </remarks>
        </member>
        <member name="T:DuetAPI.Connection.InterceptionMode">
            <summary>
            Type of the intercepting connection
            </summary>
            <seealso cref="T:DuetAPI.Connection.InitMessages.InterceptInitMessage"/>
        </member>
        <member name="F:DuetAPI.Connection.InterceptionMode.Pre">
            <summary>
            Intercept codes before they are internally processed by the control server
            </summary>
        </member>
        <member name="F:DuetAPI.Connection.InterceptionMode.Post">
            <summary>
            Intercept codes after the initial processing of the control server but before they are forwarded to the RepRapFirmware controller
            </summary>
        </member>
        <member name="F:DuetAPI.Connection.InterceptionMode.Executed">
            <summary>
            Receive a notification for executed codes. In this state the final result can be still changed
            </summary>
        </member>
        <member name="T:DuetAPI.Connection.SubscriptionMode">
            <summary>
            Type of the model subscription
            </summary>
            <seealso cref="T:DuetAPI.Connection.InitMessages.SubscribeInitMessage"/>
        </member>
        <member name="F:DuetAPI.Connection.SubscriptionMode.Full">
            <summary>
            Receive full object model after every update
            </summary>
            <remarks>
            Generic messages may or may not be included in the full object model. To keep track of messages reliably,
            it is strongly advised to create a subscription in <see cref="F:DuetAPI.Connection.SubscriptionMode.Patch"/> mode.
            </remarks>
        </member>
        <member name="F:DuetAPI.Connection.SubscriptionMode.Patch">
            <summary>
            Receive only updated JSON fragments of the object model
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Channel">
            <summary>
            Information about a G/M/T-code channel
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.Channel.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Channel.Compatibility">
            <summary>
            Emulation used on this channel
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Channel.Feedrate">
            <summary>
            Current feedrate in mm/s
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Channel.RelativeExtrusion">
            <summary>
            Whether relative extrusion is being used
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Channel.VolumetricExtrusion">
            <summary>
            Whether volumetric extrusion is being used
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Channel.RelativePositioning">
            <summary>
            Whether relative positioning is being used
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Channel.UsingInches">
            <summary>
            Whether inches are being used instead of mm
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Channel.StackDepth">
            <summary>
            Depth of the stack
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Channel.LineNumber">
            <summary>
            Number of the current line
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.Channel.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Channel.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.Channels">
            <summary>
            Information about the available G/M/T-code channels
            </summary>
            <seealso cref="T:DuetAPI.CodeChannel"/>
        </member>
        <member name="F:DuetAPI.Machine.Channels.Total">
            <summary>
            Total number of code channels
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Channels.HTTP">
            <summary>
            G/M/T-code channel for HTTP requests
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Channels.Telnet">
            <summary>
            G/M/T-code channel for Telnet requests
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Channels.File">
            <summary>
            G/M/T-code channel for file prints
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Channels.USB">
            <summary>
            G/M/T-code channel for USB
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Channels.AUX">
            <summary>
            G/M/T-code channel for AUX (UART/PanelDue)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Channels.Trigger">
            <summary>
            G/M/T-code channel for running triggers or config.g
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Channels.CodeQueue">
            <summary>
            G/M/T-code channel for the code queue
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Channels.LCD">
            <summary>
            G/M/T-code channel for AUX (UART/PanelDue)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Channels.SPI">
            <summary>
            Default G/M/T-code channel for generic codes
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Channels.Daemon">
            <summary>
            Code channel that executes the daemon process
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Channels.AutoPause">
            <summary>
            G/M/T-code chanel for auto pause events
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Channels.Item(DuetAPI.CodeChannel)">
            <summary>
            Index operator for simple access via the <see cref="T:DuetAPI.CodeChannel"/> enum
            </summary>
            <param name="key">Channel to access</param>
            <returns>Channel instance</returns>
        </member>
        <member name="M:DuetAPI.Machine.Channels.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Channels.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>Clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.Compatibility">
            <summary>
            Compatibility level for emulation
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.Compatibility.Me">
            <summary>
            No emulation (same as RepRapFirmware)
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.Compatibility.RepRapFirmware">
            <summary>
            Emulating RepRapFirmware
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.Compatibility.Marlin">
            <summary>
            Emulating Marlin
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.Compatibility.Teacup">
            <summary>
            Emulating Teacup
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.Compatibility.Sprinter">
            <summary>
            Emulating Sprinter
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.Compatibility.Repetier">
            <summary>
            Emulating Repetier
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.Compatibility.NanoDLP">
            <summary>
            Special emulation for NanoDLP
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Directories">
            <summary>
            Information about the machine state
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.Directories.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Directories.Filaments">
            <summary>
            Path to the Filaments directory
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Directories.GCodes">
            <summary>
            Path to the G-Codes directory
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Directories.Macros">
            <summary>
            Path to the macros directory
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Directories.Menu">
            <summary>
            Path to the Menu directory
            </summary>
            <remarks>
            Intended for 12864 displays but currently unused in DSF. It is only needed for the Duet Maestro + DWC
            </remarks>
        </member>
        <member name="P:DuetAPI.Machine.Directories.System">
            <summary>
            Path to the system directory
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Directories.WWW">
            <summary>
            Path to the web directory
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.Directories.Assign(System.Object)">
            <summary>
            Assigns every property of another instance of this one
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Directories.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.Electronics">
            <summary>
            Information about the electronics used
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.Electronics.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Electronics.Version">
            <summary>
            Version of the Duet Software Framework package
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Electronics.Type">
            <summary>
            Type name of the main board
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Electronics.ShortName">
            <summary>
            Short code name of the board
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Electronics.Name">
            <summary>
            Full name of the main board
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Electronics.Revision">
            <summary>
            Revision of the main board
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Electronics.Firmware">
            <summary>
            Main firmware of the attached main board
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Electronics.ProcessorID">
            <summary>
            Processor ID of the main board
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Electronics.VIn">
            <summary>
            Input voltage details of the main board (in V or null if unknown)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Electronics.McuTemp">
            <summary>
            MCU temperature details of the main board (in degC or null if unknown)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Electronics.ExpansionBoards">
             <summary>
             Information about attached expansion boards
             </summary>
            <seealso cref="T:DuetAPI.Machine.ExpansionBoard"/>
        </member>
        <member name="M:DuetAPI.Machine.Electronics.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Electronics.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.ExpansionBoard">
            <summary>
            Represents information about an attached expansion board
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.ExpansionBoard.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ExpansionBoard.ShortName">
            <summary>
            Short code name of the board
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ExpansionBoard.Name">
            <summary>
            Name of the attached expansion board
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ExpansionBoard.Revision">
            <summary>
            Revision of the expansion board
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ExpansionBoard.Firmware">
            <summary>
            Details about the firmware running on this expansion board
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ExpansionBoard.VIn">
            <summary>
            Set of the minimum, maximum and current input voltage (in V or null if unknown)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ExpansionBoard.McuTemp">
            <summary>
            Set of the minimum, maximum and current MCU temperature (in degC or null if unknown)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ExpansionBoard.MaxHeaters">
            <summary>
            How many heaters can be attached to this board
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ExpansionBoard.MaxMotors">
            <summary>
            How many drives can be attached to this board
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.ExpansionBoard.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.ExpansionBoard.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.Firmware">
            <summary>
            Information about a firmware version
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.Firmware.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Firmware.Name">
            <summary>
            Name of the firmware
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Firmware.Version">
            <summary>
            Version of the firmware
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Firmware.Date">
            <summary>
            Date of the firmware (i.e. when it was compiled)
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.Firmware.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Firmware.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.MinMaxCurrent`1">
            <summary>
            Provides minimum, maximum and current values
            </summary>
            <typeparam name="T">ValueType of each property</typeparam>
        </member>
        <member name="E:DuetAPI.Machine.MinMaxCurrent`1.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MinMaxCurrent`1.Current">
            <summary>
            Current value
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MinMaxCurrent`1.Min">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MinMaxCurrent`1.Max">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.MinMaxCurrent`1.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.MinMaxCurrent`1.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.Fan">
            <summary>
            Class representing information about an attached fan
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.Fan.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Fan.Value">
            <summary>
            Value of the fan on a scale between 0 to 1
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Fan.Name">
            <summary>
            Name of the fan
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Fan.Rpm">
            <summary>
            Current RPM of this fan or null if unknown/unset
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Fan.Inverted">
            <summary>
            Whether the PWM signal of this fan is inverted
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Fan.Frequency">
            <summary>
            Frequency of the fan (in Hz) or null if unknown/unset
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Fan.Min">
            <summary>
            Minimum value of this fan on a scale between 0 to 1
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Fan.Max">
            <summary>
            Maximum value of this fan on a scale between 0 to 1
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Fan.Blip">
            <summary>
            Blip value indicating how long the fan is supposed to run at 100% when turning it on to get it started (in s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Fan.Thermostatic">
            <summary>
            Thermostatic control parameters
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Fan.Pin">
            <summary>
            Pin number of the assigned fan or null if unknown/unset
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.Fan.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Fan.Clone">
            <summary>
            Creates a copy of this instance
            </summary>
            <returns>A copy of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.Thermostatic">
            <summary>
            Thermostatic parameters of a fan
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.Thermostatic.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Thermostatic.Control">
            <summary>
            Defines whether thermostatic control is enabled
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Thermostatic.Heaters">
            <summary>
            The heaters to monitor (indices)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Thermostatic.Temperature">
            <summary>
            Minimum temperature required to turn on the fan (in degC or null if unknown)
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.Thermostatic.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Thermostatic.Clone">
            <summary>
            Create a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.BedOrChamber">
            <summary>
            Information about a bed or chamber heater
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.BedOrChamber.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.BedOrChamber.Active">
            <summary>
            Active temperatures (in C)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.BedOrChamber.Standby">
            <summary>
            Standby temperatures (in C)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.BedOrChamber.Name">
            <summary>
            Name of the bed or chamber or null if unset
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.BedOrChamber.Heaters">
            <summary>
            Indices of the heaters controlled by this bed or chamber
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.BedOrChamber.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.BedOrChamber.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.ExtraHeater">
            <summary>
            Information about an extra heater (virtual)
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.ExtraHeater.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ExtraHeater.Current">
            <summary>
            Current temperature (in degC)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ExtraHeater.Name">
            <summary>
            Name of the extra heater
            </summary>
            <remarks>
            This must not be set to null
            </remarks>
        </member>
        <member name="P:DuetAPI.Machine.ExtraHeater.State">
            <summary>
            State of the extra heater or null if unknown/unset
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ExtraHeater.Sensor">
            <summary>
            Sensor number (thermistor index) of the extra heater or null if unknown/unset
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.ExtraHeater.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.ExtraHeater.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.Heat">
            <summary>
            Information about the heat subsystem
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.Heat.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Heat.Beds">
            <summary>
            List of configured beds
            </summary>
            <remarks>
            This may contain null items
            </remarks>
            <seealso cref="T:DuetAPI.Machine.BedOrChamber"/>
        </member>
        <member name="P:DuetAPI.Machine.Heat.Chambers">
            <summary>
            List of configured chambers 
            </summary>
            <remarks>
            This may contain null items
            </remarks>
            <seealso cref="T:DuetAPI.Machine.BedOrChamber"/>
        </member>
        <member name="P:DuetAPI.Machine.Heat.ColdExtrudeTemperature">
            <summary>
            Minimum required temperature for extrusion moves (in C)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Heat.ColdRetractTemperature">
            <summary>
            Minimum required temperature for retraction moves (in C)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Heat.Extra">
            <summary>
            List of configured extra heaters
            </summary>
            <seealso cref="T:DuetAPI.Machine.ExtraHeater"/>
        </member>
        <member name="P:DuetAPI.Machine.Heat.Heaters">
            <summary>
            List of configured heaters
            </summary>
            <seealso cref="T:DuetAPI.Machine.Heater"/>
        </member>
        <member name="M:DuetAPI.Machine.Heat.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Heat.Clone">
            <summary>
            Creates a copy of this instance
            </summary>
            <returns>A copy of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.Heater">
            <summary>
            Information about a heater
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.Heater.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Heater.Current">
            <summary>
            Current temperature of the heater (in C)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Heater.Name">
            <summary>
            Name of the heater or null if unset
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Heater.State">
            <summary>
            State of the heater
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Heater.Model">
            <summary>
            Information about the heater model
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Heater.Max">
            <summary>
            Maximum allowed temperature for this heater (in C)
            </summary>
            <remarks>
            This is only temporary and should be replaced by a representation of the heater protection as in RRF
            </remarks>
        </member>
        <member name="P:DuetAPI.Machine.Heater.Sensor">
            <summary>
            Sensor number (thermistor index) of this heater or null if unknown
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.Heater.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Heater.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.HeaterModel">
            <summary>
            Information about the way the heater heats up
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.HeaterModel.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterModel.Gain">
            <summary>
            Gain value or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterModel.TimeConstant">
            <summary>
            Time constant or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterModel.DeadTime">
            <summary>
            Dead time of this heater or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterModel.MaxPwm">
            <summary>
            Maximum PWM or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterModel.StandardVoltage">
            <summary>
            Standard voltage of this heater or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterModel.UsePID">
            <summary>
            Indicates if PID control is being used
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterModel.CustomPID">
            <summary>
            Indicates if custom PID values are used
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterModel.P">
            <summary>
            Proportional value of the PID regulator
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterModel.I">
            <summary>
            Integral value of the PID regulator
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterModel.D">
            <summary>
            Derivative value of the PID regulator
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.HeaterModel.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.HeaterModel.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.HeaterState">
            <summary>
            State of a heater (also see RepRapFirmware)
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HeaterState.Off">
            <summary>
            Heater is turned off
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HeaterState.Standby">
            <summary>
            Heater is in standby mode
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HeaterState.Active">
            <summary>
            Heater is active
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HeaterState.Tuning">
            <summary>
            Heater is being tuned
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HeaterState.Offline">
            <summary>
            Heater is offline
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.HttpEndpoint">
            <summary>
            Class representing an extra HTTP endpoint
            </summary>
            <seealso cref="T:DuetAPI.Commands.AddHttpEndpoint"/>
            <seealso cref="T:DuetAPI.Commands.RemoveHttpEndpoint"/>
        </member>
        <member name="E:DuetAPI.Machine.HttpEndpoint.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HttpEndpoint.EndpointType">
            <summary>
            HTTP type of this endpoint
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HttpEndpoint.Namespace">
            <summary>
            Namespace of the endpoint
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HttpEndpoint.Path">
            <summary>
            Path to the endpoint
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HttpEndpoint.UnixSocket">
            <summary>
            Path to the UNIX socket
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.HttpEndpoint.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.HttpEndpoint.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>Clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.HttpEndpointType">
            <summary>
            Enumeration of supported HTTP request types
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HttpEndpointType.GET">
            <summary>
            HTTP GET request
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HttpEndpointType.POST">
            <summary>
            HTTP POST request
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HttpEndpointType.PUT">
            <summary>
            HTTP PUT request
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HttpEndpointType.PATCH">
            <summary>
            HTTP PATCH request
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HttpEndpointType.TRACE">
            <summary>
            HTTP TRACE request
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HttpEndpointType.DELETE">
            <summary>
            HTTP DELETE request
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HttpEndpointType.OPTIONS">
            <summary>
            HTTP DELETE request
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HttpEndpointType.WebSocket">
            <summary>
            WebSocket request. This has not been implemented yet but it is reserved for future usage
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Job">
            <summary>
            Information about the current file job (if any)
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.Job.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.File">
            <summary>
            Information about the file being processed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.FilePosition">
            <summary>
            Current position in the file being processed (in bytes or null)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.LastFileName">
            <summary>
            Name of the last file processed or null if none
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.LastFileAborted">
            <summary>
            Indicates if the last file was aborted (unexpected cancellation)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.LastFileCancelled">
            <summary>
            Indicates if the last file was cancelled (user cancelled)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.LastFileSimulated">
            <summary>
            Indicates if the last file processed was simulated
            </summary>
            <remarks>This is not set if the file was aborted or cancelled</remarks>
        </member>
        <member name="P:DuetAPI.Machine.Job.ExtrudedRaw">
            <summary>
            Virtual amounts of extruded filament according to the G-code file (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.Duration">
            <summary>
            Total duration of the current job (in s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.Layer">
            <summary>
            Number of the current layer or 0 if none has been started yet
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.LayerTime">
            <summary>
            Time elapsed since the beginning of the current layer (in s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.Layers">
            <summary>
            Information about the past layers
            </summary>
            <seealso cref="P:DuetAPI.Machine.Job.Layer"/>
        </member>
        <member name="P:DuetAPI.Machine.Job.WarmUpDuration">
            <summary>
            Time needed to heat up the heaters (in s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.TimesLeft">
            <summary>
            Estimated times left
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.Job.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Job.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.Layer">
            <summary>
            Information about a layer from a file being printed
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.Layer.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Layer.Duration">
            <summary>
            Duration of the layer (in s or null if unknown)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Layer.Height">
            <summary>
            Height of the layer (in mm or 0 if unknown)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Layer.Filament">
            <summary>
            Actual amount of filament extruded during this layer (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Layer.FractionPrinted">
            <summary>
            Fraction of the file printed during this layer (0..1)
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.Layer.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Layer.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>Clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.TimesLeft">
            <summary>
            Estimations about the times left
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.TimesLeft.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.TimesLeft.File">
            <summary>
            Time left based on file progress (in s or null)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.TimesLeft.Filament">
            <summary>
            Time left based on filament consumption (in s or null)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.TimesLeft.Layer">
            <summary>
            Time left based on the layer progress (in s or null)
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.TimesLeft.Assign(System.Object)">
            <summary>
            Assigns every property of another instance of this one
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.TimesLeft.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.Laser">
            <summary>
            Information about an attached laser diode
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.Laser.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Laser.ActualPwm">
            <summary>
            Actual PWM intensity (0..1)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Laser.RequestedPwm">
            <summary>
            Requested PWM intensity from the G1 move (0..1)
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.Laser.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Laser.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>Clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.MachineModel">
            <summary>
            Representation of the full machine model as maintained by DCS
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Channels">
            <summary>
            Information about every available G/M/T-code channel
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Directories">
            <summary>
            Information about the individual directories
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Electronics">
            <summary>
            Information about the main and expansion boards
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Fans">
            <summary>
            List of configured fans
            </summary>
            <seealso cref="T:DuetAPI.Machine.Fan"/>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Heat">
            <summary>
            Information about the heat subsystem
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.HttpEndpoints">
            <summary>
            List of registered third-party HTTP endpoints
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Job">
            <summary>
            Information about the current file job (if any)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Lasers">
            <summary>
            List of configured laser diodes
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.MessageBox">
            <summary>
            Information about message box requests
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Messages">
            <summary>
            Generic messages that do not belong explicitly to codes being executed.
            This includes status messages, generic errors and outputs generated by M118
            </summary>
            <seealso cref="T:DuetAPI.Message"/>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Move">
            <summary>
            Information about the move subsystem
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Network">
            <summary>
            Information about connected network adapters
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Scanner">
            <summary>
            Information about the 3D scanner subsystem
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Sensors">
            <summary>
            Information about connected sensors including Z-probes and endstops
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Spindles">
            <summary>
            List of configured CNC spindles
            </summary>
            <seealso cref="T:DuetAPI.Machine.Spindle"/>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.State">
            <summary>
            Information about the machine state
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Storages">
            <summary>
            List of configured storage devices
            </summary>
            <seealso cref="T:DuetAPI.Machine.Storage"/>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Tools">
            <summary>
            List of configured tools
            </summary>
            <seealso cref="T:DuetAPI.Machine.Tool"/>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.UserSessions">
            <summary>
            List of user sessions
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.UserVariables">
            <summary>
            List of user-defined variables
            </summary>
            <seealso cref="T:DuetAPI.Machine.UserVariable"/>
        </member>
        <member name="M:DuetAPI.Machine.MachineModel.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.MachineModel.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>Clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.MessageBox">
            <summary>
            Information about the message box to show
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.MessageBox.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MessageBox.Mode">
            <summary>
            Mode of the message box to display or null if none is shown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MessageBox.Title">
            <summary>
            Title of the message box
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MessageBox.Message">
            <summary>
            Content of the message box
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MessageBox.AxisControls">
            <summary>
            Optional axis movement controls to show (axis indices)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MessageBox.Seq">
            <summary>
            Counter that is incremented whenever a new message box is shown
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.MessageBox.Assign(System.Object)">
            <summary>
            Assigns every property of another instance of this one
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.MessageBox.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.MessageBoxMode">
            <summary>
            Supported modes of displaying a message box
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MessageBoxMode.NoButtons">
            <summary>
            Display a message box without any buttons
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MessageBoxMode.CloseOnly">
            <summary>
            Display a message box with only a Close button
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MessageBoxMode.OkOnly">
            <summary>
            Display a message box with only an Ok button which is supposed to send M292 when pressed
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MessageBoxMode.OkCancel">
            <summary>
            Display a message box with an Ok button that sends M292 P0 or a cancel button that sends M292 P1 when clicked
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Axis">
            <summary>
            Information about a configured axis
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.Axis.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.Letter">
            <summary>
            Letter of the axis (always upper-case)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.Drives">
            <summary>
            Indices of the drives used
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.Homed">
            <summary>
            Whether or not the axis is homed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.MachinePosition">
            <summary>
            Current machine position (in mm or null if unknown/unset)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.Min">
            <summary>
            Minimum travel of this axis (in mm or null if unknown/unset)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.MinEndstop">
            <summary>
            Index of the endstop that is used for the low end or null if none is configured
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.MinProbed">
            <summary>
            Whether the axis minimum was probed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.Max">
            <summary>
            Maximum travel of this axis (in mm or null if unknown/unset)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.MaxEndstop">
            <summary>
            Index of the endstop that is used for the high end or null if none is configured
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.MaxProbed">
            <summary>
            Whether the axis maximum was probed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.Visible">
            <summary>
            Whether or not the axis is visible
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.Axis.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Axis.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.CurrentMove">
            <summary>
            Information about the current move
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.CurrentMove.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.CurrentMove.RequestedSpeed">
            <summary>
            Requested speed of the current move (in mm/s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.CurrentMove.TopSpeed">
            <summary>
            Top speed of the current move (in mm/s)
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.CurrentMove.Assign(System.Object)">
            <summary>
            Assigns every property of another instance of this one
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.CurrentMove.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.Drive">
            <summary>
            Information about a drive
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.Drive.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Drive.Position">
            <summary>
            Current user position of this drive (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Drive.Microstepping">
            <summary>
            Information about the configured microstepping
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Drive.Current">
            <summary>
            Configured current of this drive (in mA)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Drive.Acceleration">
            <summary>
            Acceleration of this drive (in mm/s^2)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Drive.MinSpeed">
            <summary>
            Minimum allowed speed for this drive (in mm/s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Drive.MaxSpeed">
            <summary>
            Maximum allowed speed for this drive (in mm/s)
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.Drive.Assign(System.Object)">
            <summary>
            Assigns every property of another instance of this one
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Drive.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.DriveMicrostepping">
            <summary>
            Information about configured microstepping
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.DriveMicrostepping.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.DriveMicrostepping.Value">
            <summary>
            Microstepping value (e.g. x16)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.DriveMicrostepping.Interpolated">
            <summary>
            Whether the microstepping is interpolated
            </summary>
            <remarks>
            This may not be supported on all boards.
            </remarks>
        </member>
        <member name="M:DuetAPI.Machine.DriveMicrostepping.AssignFrom(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.DriveMicrostepping.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.Extruder">
            <summary>
            Information about an extruder drive
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.Extruder.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Extruder.Drives">
            <summary>
            Drives of this extruder
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Extruder.Factor">
            <summary>
            Extrusion factor to use (1.0 equals 100%)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Extruder.Nonlinear">
            <summary>
            Nonlinear extrusion parameters (see M592)
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.Extruder.Assign(System.Object)">
            <summary>
            Assigns every property of another instance of this one
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Extruder.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.ExtruderNonlinear">
            <summary>
            Nonlinear extrusion parameters (see M592)
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.ExtruderNonlinear.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ExtruderNonlinear.A">
            <summary>
            A coefficient in the extrusion formula
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ExtruderNonlinear.B">
            <summary>
            B coefficient in the extrusion formula
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ExtruderNonlinear.UpperLimit">
            <summary>
            Upper limit of the nonlinear extrusion compensation
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ExtruderNonlinear.Temperature">
            <summary>
            Reserved for future use, for the temperature at which these values are valid (in degC)
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.ExtruderNonlinear.Assign(System.Object)">
            <summary>
            Assigns every property of another instance of this one
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.ExtruderNonlinear.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.Geometry">
            <summary>
            Information about the configured geometry
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.Geometry.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Geometry.Type">
            <summary>
            Currently configured geometry type
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Geometry.Anchors">
            <summary>
            Hangprinter A, B, C, Dz anchors (10 values)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Geometry.PrintRadius">
            <summary>
            Print radius for Hangprinter and Delta geometries in mm
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Geometry.Diagonals">
            <summary>
            Delta diagonals
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Geometry.Radius">
            <summary>
            Delta radius in mm
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Geometry.HomedHeight">
            <summary>
            Homed height of a delta printer in mm
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Geometry.AngleCorrections">
            <summary>
            ABC angle corrections for delta geometries
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Geometry.EndstopAdjustments">
            <summary>
            Endstop adjustments of the XYZ axes in mm
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Geometry.Tilt">
            <summary>
            Tilt values of the XY axes
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.Geometry.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Geometry.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.GeometryType">
            <summary>
            Supported geometry types
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.GeometryType.Cartesian">
            <summary>
            Cartesian geometry
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.GeometryType.CoreXY">
            <summary>
            CoreXY geometry
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.GeometryType.CoreXYU">
            <summary>
            CoreXY geometry with extra U axis
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.GeometryType.CoreXYUV">
            <summary>
            CoreXY geometry with extra UV axes
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.GeometryType.CoreXZ">
            <summary>
            CoreXZ geometry
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.GeometryType.Hangprinter">
            <summary>
            Hangprinter geometry
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.GeometryType.Delta">
            <summary>
            Delta geometry
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.GeometryType.Polar">
            <summary>
            Polar geometry
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.GeometryType.RotaryDelta">
            <summary>
            Rotary delta geometry
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.GeometryType.Scara">
            <summary>
            SCARA geometry
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.GeometryType.Unknown">
            <summary>
            Unknown geometry
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.GeometryTypeConverter">
            <summary>
            Class to convert a GeometryType to and from JSON
            </summary>
            <remarks>These enum values are primarily supplied by RepRapFirmware</remarks>
        </member>
        <member name="M:DuetAPI.Machine.GeometryTypeConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read a GeometryType from JSON
            </summary>
            <param name="reader">JSON reader</param>
            <param name="typeToConvert">Type to convert</param>
            <param name="options">Serializer options</param>
            <returns>Read value</returns>
        </member>
        <member name="M:DuetAPI.Machine.GeometryTypeConverter.Write(System.Text.Json.Utf8JsonWriter,DuetAPI.Machine.GeometryType,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write a GeometryType to JSON
            </summary>
            <param name="writer">JSON writer</param>
            <param name="value">Value to serialize</param>
            <param name="options">Write options</param>
        </member>
        <member name="T:DuetAPI.Machine.MotorsIdleControl">
            <summary>
            Idle factor parameters for automatic motor current reduction
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.MotorsIdleControl.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MotorsIdleControl.Timeout">
            <summary>
            Idle timeout after which the stepper motor currents are reduced (in s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MotorsIdleControl.Factor">
            <summary>
            Motor current reduction factor (on a scale between 0 to 1)
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.MotorsIdleControl.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.MotorsIdleControl.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.Move">
            <summary>
            Information about the move subsystem
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.Move.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Move.Axes">
            <summary>
            List of the configured axes
            </summary>
            <seealso cref="T:DuetAPI.Machine.Axis"/>
        </member>
        <member name="P:DuetAPI.Machine.Move.BabystepZ">
            <summary>
            Current babystep amount in Z direction (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Move.CurrentMove">
            <summary>
            Information about the current move
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Move.Compensation">
            <summary>
            Name of the currently used bed compensation (one of "Mesh", "[n] Point", "None")
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Move.HeightmapFile">
            <summary>
            Path to the current heightmap file if Compensation is "Mesh"
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Move.Drives">
            <summary>
            List of configured drives
            </summary>
            <seealso cref="T:DuetAPI.Machine.Drive"/>
        </member>
        <member name="P:DuetAPI.Machine.Move.Extruders">
            <summary>
            List of configured extruders
            </summary>
            <seealso cref="T:DuetAPI.Machine.Extruder"/>
        </member>
        <member name="P:DuetAPI.Machine.Move.Geometry">
            <summary>
            Information about the currently configured geometry
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Move.Idle">
            <summary>
            Idle current reduction parameters
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Move.ProbeGrid">
            <summary>
            Information about the configured mesh compensation (see M557)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Move.SpeedFactor">
            <summary>
            Speed factor applied to every regular move (1.0 equals 100%)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Move.CurrentWorkplace">
            <summary>
            Index of the currently selected workspace
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Move.WorkplaceCoordinates">
            <summary>
            Axis offsets of each available workspace (in mm)
            </summary>
            <remarks>When modifying items, make sure to (re-)set an entire item to ensure the change events are called</remarks>
        </member>
        <member name="M:DuetAPI.Machine.Move.Assign(System.Object)">
            <summary>
            Assigns every property of another instance of this one
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Move.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.ProbeGrid">
            <summary>
            Information about the configured probe grid (see M557)
            </summary>
            <seealso cref="T:DuetAPI.Utility.Heightmap"/>
        </member>
        <member name="E:DuetAPI.Machine.ProbeGrid.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ProbeGrid.XMin">
            <summary>
            X start coordinate of the heightmap
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ProbeGrid.XMax">
            <summary>
            X end coordinate of the heightmap
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ProbeGrid.XSpacing">
            <summary>
            Spacing between the probe points in X direction
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ProbeGrid.YMin">
            <summary>
            Y start coordinate of the heightmap
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ProbeGrid.YMax">
            <summary>
            Y end coordinate of the heightmap
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ProbeGrid.YSpacing">
            <summary>
            Spacing between the probe points in Y direction
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ProbeGrid.Radius">
            <summary>
            Probing radius for delta kinematics
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ProbeGrid.Spacing">
            <summary>
            Spacing between the probe points for delta kinematics
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.ProbeGrid.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.ProbeGrid.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.InterfaceType">
            <summary>
            Supported types of network interfaces
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.InterfaceType.WiFi">
            <summary>
            Wireless network interface
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.InterfaceType.LAN">
            <summary>
            Wired network interface
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Network">
            <summary>
            Information about the network subsystem
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.Network.DefaultName">
            <summary>
            Default name of the machine
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.Network.DefaultHostname">
            <summary>
            Fallback hostname if the <c>Name</c> is invalid
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.Network.DefaultPassword">
            <summary>
            Default network password of the machine
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.Network.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Network.Name">
            <summary>
            Name of the machine
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Network.Hostname">
            <summary>
            Hostname of the machine
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Network.Password">
            <summary>
            Password required to access this machine
            </summary>
            <remarks>
            This concept is deprecated and may be dropped in favour of user authentication in the future
            </remarks>
        </member>
        <member name="P:DuetAPI.Machine.Network.Interfaces">
            <summary>
            List of available network interfaces
            </summary>
            <seealso cref="T:DuetAPI.Machine.NetworkInterface"/>
        </member>
        <member name="M:DuetAPI.Machine.Network.Assign(System.Object)">
            <summary>
            Assigns every property of another instance of this one
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Network.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.NetworkInterface">
            <summary>
            Information about a network interface
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.NetworkInterface.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.NetworkInterface.Type">
            <summary>
            Type of this network interface
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.NetworkInterface.FirmwareVersion">
            <summary>
            Version of the network interface or null if unknown.
            This is primarily intended for the ESP8266-based network interfaces as used on the Duet WiFi
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.NetworkInterface.Speed">
            <summary>
            Speed of the network interface (in MBit, null if unknown, 0 if not connected)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.NetworkInterface.Signal">
            <summary>
            Signal of the WiFi adapter (only WiFi, in dBm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.NetworkInterface.MacAddress">
            <summary>
            Physical address of the network adapter
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.NetworkInterface.ConfiguredIP">
            <summary>
            Configured IPv4 address of the network adapter
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.NetworkInterface.ActualIP">
            <summary>
            Actual IPv4 address of the network adapter
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.NetworkInterface.Subnet">
            <summary>
            Subnet of the network adapter
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.NetworkInterface.Gateway">
            <summary>
            Gateway of the network adapter
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.NetworkInterface.NumReconnects">
            <summary>
            Number of reconnect attempts or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.NetworkInterface.ActiveProtocols">
            <summary>
            List of active protocols
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.NetworkInterface.Assign(System.Object)">
            <summary>
            Assigns every property of another instance of this one
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.NetworkInterface.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.NetworkProtocol">
            <summary>
            Supported network protocols
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.NetworkProtocol.HTTP">
            <summary>
            HTTP protocol
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.NetworkProtocol.FTP">
            <summary>
            FTP protocol
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.NetworkProtocol.Telnet">
            <summary>
            Telnet protocol
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Scanner">
            <summary>
            Information about the 3D scanner subsystem
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.Scanner.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Scanner.Progress">
            <summary>
            Progress of the current action (on a scale between 0 to 1)
            </summary>
            <remarks>
            Previous status responses used a scale of 0..100
            </remarks>
        </member>
        <member name="P:DuetAPI.Machine.Scanner.Status">
            <summary>
            Status of the 3D scanner
            </summary>
            <seealso cref="T:DuetAPI.Machine.ScannerStatus"/>
        </member>
        <member name="M:DuetAPI.Machine.Scanner.Assign(System.Object)">
            <summary>
            Assigns every property of another instance of this one
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Scanner.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.ScannerStatus">
            <summary>
            Possible states of the attached 3D scanner
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ScannerStatus.Disconnected">
            <summary>
            Scanner is disconnected (none present)
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ScannerStatus.Idle">
            <summary>
            Scanner is registered and idle
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ScannerStatus.Scanning">
            <summary>
            Scanner is scanning an object
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ScannerStatus.PostProcessing">
            <summary>
            Scanner is post-processing a file
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ScannerStatus.Calibrating">
            <summary>
            Scanner is calibrating
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ScannerStatus.Uploading">
            <summary>
            Scanner is uploading
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Endstop">
            <summary>
            Information about an endstop
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.Endstop.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Endstop.Action">
            <summary>
            Action to perform when an endstop is hit
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Endstop.Triggered">
            <summary>
            Whether or not the endstop is hit
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Endstop.Type">
            <summary>
            Type of the endstop
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Endstop.Probe">
            <summary>
            Index of the used probe (if <see cref="P:DuetAPI.Machine.Endstop.Type"/> is <see cref="F:DuetAPI.Machine.EndstopType.Probe"/>)
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.Endstop.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Endstop.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.EndstopAction">
            <summary>
            Action that is performed when an endstop is hit
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.EndstopAction.None">
            <summary>
            Don't stop anything
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.EndstopAction.ReduceSpeed">
            <summary>
            Reduce speed because an endstop or Z-probe is close to triggering
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.EndstopAction.StopDriver">
            <summary>
            Stop a single motor driver
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.EndstopAction.StopAxis">
            <summary>
            Stop all drivers for an axis
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.EndstopAction.StopAll">
            <summary>
            Stop all drives
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.EndstopType">
            <summary>
            Type of a configured endstop
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.EndstopType.ActiveLow">
            <summary>
            The signal of the endstop is pulled from HIGH to LOW when hit
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.EndstopType.ActiveHigh">
            <summary>
            The signal of the endstop is pulled from LOW to HIGH when hit
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.EndstopType.Probe">
            <summary>
            A probe is used for this endstop
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.EndstopType.MotorStallAny">
            <summary>
            Motor load detection is used for this endstop (stop all when one motor stalls)
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.EndstopType.MotorStallIndividual">
            <summary>
            Motor load detection is used for this endstop (run each motor until it stalls)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Probe">
            <summary>
            Information about a configured probe
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.Probe.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.Type">
            <summary>
            Type of the configured probe
            </summary>
            <seealso cref="T:DuetAPI.Machine.ProbeType"/>
        </member>
        <member name="P:DuetAPI.Machine.Probe.Value">
            <summary>
            Current analog value of the probe
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.SecondaryValues">
            <summary>
            Secondary value(s) of the probe
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.Threshold">
            <summary>
            Configured trigger threshold (0..1023)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.Speed">
            <summary>
            Probe speed (in mm/s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.DiveHeight">
            <summary>
            Dive height (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.Offsets">
            <summary>
            X+Y offsets (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.TriggerHeight">
            <summary>
            Z height at which the probe is triggered (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.Filtered">
            <summary>
            Whether the probe signal is filtered
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.Inverted">
            <summary>
            Whether the probe signal is inverted
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.RecoveryTime">
            <summary>
            Recovery time (in s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.TravelSpeed">
            <summary>
            Travel speed when probing multiple points (in mm/s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.MaxProbeCount">
            <summary>
            Maximum number of times to probe after a bad reading was determined
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.Tolerance">
            <summary>
            Allowed tolerance deviation between two measures (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.DisablesBed">
            <summary>
            Whether probing disables the bed heater(s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.Persistent">
            <summary>
            Indicates if the probe parameters are supposed to be saved to config-override.g
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.Probe.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Probe.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.ProbeType">
            <summary>
            Supported probe types
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ProbeType.None">
            <summary>
            No probe
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ProbeType.Unmodulated">
            <summary>
            A simple unmodulated probe (like dc42's infrared probe)
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ProbeType.Modulated">
            <summary>
            A modulated probe (like the original one shipped with the RepRapPro Ormerod)
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ProbeType.Switch">
            <summary>
            A switch that is triggered when the probe is activated
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ProbeType.BLTouch">
            <summary>
            A BLTouch probe
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ProbeType.MotorLoadDetection">
            <summary>
            Motor load detection
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Sensors">
            <summary>
            Information about sensors
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Sensors.Endstops">
            <summary>
            List of configured endstops
            </summary>
            <seealso cref="T:DuetAPI.Machine.Endstop"/>
        </member>
        <member name="P:DuetAPI.Machine.Sensors.Probes">
            <summary>
            List of configured probes
            </summary>
            <seealso cref="T:DuetAPI.Machine.Probe"/>
        </member>
        <member name="M:DuetAPI.Machine.Sensors.Assign(System.Object)">
            <summary>
            Assigns every property of another instance of this one
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Sensors.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.Spindle">
            <summary>
            Information about a CNC spindle
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.Spindle.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Spindle.Active">
            <summary>
            Active RPM
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Spindle.Current">
            <summary>
            Current RPM
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.Spindle.Assign(System.Object)">
            <summary>
            Assigns every property of another instance of this one
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Spindle.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.BeepDetails">
            <summary>
            Details about a requested beep
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.BeepDetails.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.BeepDetails.Frequency">
            <summary>
            Frequency of the requested beep
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.BeepDetails.Duration">
            <summary>
            Duration of the requested beep (in ms)
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.BeepDetails.Assign(System.Object)">
            <summary>
            Assigns every property of another instance of this one
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.BeepDetails.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>Clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.MachineMode">
            <summary>
            Possible operation modes of the machine
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineMode.FFF">
            <summary>
            Fused Filament Fabrication (default)
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineMode.CNC">
            <summary>
            Computer Numerical Control
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineMode.Laser">
            <summary>
            Laser operation mode (e.g. laser cutters)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.MachineStatus">
            <summary>
            Possible states of the firmware
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineStatus.Updating">
            <summary>
            The firmware is being updated
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineStatus.Off">
            <summary>
            The machine is turned off (i.e. the input voltage is too low for operation)
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineStatus.Halted">
            <summary>
            The machine has encountered an emergency stop and is ready to reset
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineStatus.Pausing">
            <summary>
            The machine is about to pause a file job
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineStatus.Paused">
            <summary>
            The machine has paused a file job
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineStatus.Resuming">
            <summary>
            The machine is about to resume a paused file job
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineStatus.Processing">
            <summary>
            The machine is processing a file job
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineStatus.Simulating">
            <summary>
            The machine is simulating a file job to determine its processing time
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineStatus.Busy">
            <summary>
            The machine is busy doing something (e.g. moving)
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineStatus.ChangingTool">
            <summary>
            The machine is changing the current tool
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineStatus.Idle">
            <summary>
            The machine is on but has nothing to do
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.State">
            <summary>
            Information about the machine state
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.State.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.State.AtxPower">
            <summary>
            State of the ATX power pin (if controlled)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.State.Beep">
            <summary>
            Information about a requested beep
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.State.CurrentTool">
            <summary>
            Number of the currently selected tool or -1 if none is selected
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.State.DisplayMessage">
            <summary>
            Persistent message to display (see M117)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.State.LogFile">
            <summary>
            Log file being written to or null if logging is disabled
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.State.Mode">
            <summary>
            Current mode of operation
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.State.Status">
            <summary>
            Current state of the machine
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.State.Assign(System.Object)">
            <summary>
            Assigns every property of another instance of this one
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.State.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.Storage">
            <summary>
            Information about a storage device
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.Storage.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Storage.Mounted">
            <summary>
            Whether the storage device is mounted
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Storage.Speed">
            <summary>
            Speed of the storage device (in bytes/s or null if unknown)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Storage.Capacity">
            <summary>
            Total capacity of the storage device (in bytes)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Storage.Free">
            <summary>
            How much space is still available on this device (in bytes)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Storage.OpenFiles">
            <summary>
            Number of currently open files or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Storage.Path">
            <summary>
            Logical path of the storage device
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.Storage.Assign(System.Object)">
            <summary>
            Assigns every property of another instance of this one
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Storage.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.Tool">
            <summary>
            Information about a configured tool
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.Tool.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.Number">
            <summary>
            Number of the tool
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.Active">
            <summary>
            Active temperatures of the associated heaters (in C)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.Standby">
            <summary>
            Standby temperatures of the associated heaters (in C)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.Name">
            <summary>
            Name of the tool or null if unset
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.FilamentExtruder">
            <summary>
            Extruder drive index for resolving the tool filament (index or -1)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.Filament">
            <summary>
            Name of the currently loaded filament
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.Fans">
            <summary>
            List of associated fans (indices)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.Heaters">
            <summary>
            List of associated heaters (indices)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.Extruders">
            <summary>
            Extruder drives of this tool
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.Mix">
            <summary>
            Mix ratios of the associated extruder drives
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.Spindle">
            <summary>
            Associated spindle (index or -1)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.Axes">
            <summary>
            Associated axes. At present only X and Y can be mapped per tool.
            </summary>
            <remarks>
            The order is the same as the visual axes, so by default the layout is
            [
              [0],        // X
              [1]         // Y
            ]
            Make sure to set each item individually so the change events are called
            </remarks>
        </member>
        <member name="P:DuetAPI.Machine.Tool.Offsets">
            <summary>
            Axis offsets (in mm)
            This list is in the same order as <see cref="P:DuetAPI.Machine.Move.Axes"/>
            </summary>
            <seealso cref="T:DuetAPI.Machine.Axis"/>
        </member>
        <member name="P:DuetAPI.Machine.Tool.OffsetsProbed">
            <summary>
            Bitmap of the axes which were probed
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.Tool.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.Tool.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>Clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.AccessLevel">
            <summary>
            Defines what a user is allowed to do
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.AccessLevel.ReadOnly">
            <summary>
            Changes to the system and/or operation are not permitted
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.AccessLevel.ReadWrite">
            <summary>
            Changes to the system and/or operation are permitted
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.SessionType">
            <summary>
            Types of user sessions
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.SessionType.Local">
            <summary>
            Local client
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.SessionType.HTTP">
            <summary>
            Remote client via HTTP
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.SessionType.Telnet">
            <summary>
            Remote client via Telnet
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.UserSession">
            <summary>
            Class representing a user session
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.UserSession.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.UserSession.Id">
            <summary>
            Identifier of this session
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.UserSession.AccessLevel">
            <summary>
            Access level of this session
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.UserSession.SessionType">
            <summary>
            Type of this sessionSessionAccessLevel
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.UserSession.Origin">
            <summary>
            Origin of this session. For remote sessions, this equals the remote IP address
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.UserSession.OriginId">
            <summary>
            Corresponding identifier of the origin.
            If it is a remote session, it is the remote port, else it defaults to the PID of the current process
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.UserSession.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.UserSession.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>Clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Machine.UserVariable">
            <summary>
            Class holding information about a user variable
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.UserVariable.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.UserVariable.Name">
            <summary>
            Name of the user variable
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.UserVariable.Value">
            <summary>
            Value of the user variable
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.UserVariable.Assign(System.Object)">
            <summary>
            Assigns every property from another instance
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Machine.UserVariable.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>Clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Message">
            <summary>
            Generic container for messages
            </summary>
        </member>
        <member name="M:DuetAPI.Message.#ctor">
            <summary>
            Create a new message
            </summary>
        </member>
        <member name="M:DuetAPI.Message.#ctor(DuetAPI.MessageType,System.String)">
            <summary>
            Create a new message
            </summary>
            <param name="type">Message type</param>
            <param name="content">Message content</param>
        </member>
        <member name="P:DuetAPI.Message.Time">
            <summary>
            Time at which the message was generated
            </summary>
        </member>
        <member name="P:DuetAPI.Message.Type">
            <summary>
            Type of this message
            </summary>
        </member>
        <member name="P:DuetAPI.Message.Content">
            <summary>
            Content of this message
            </summary>
            <remarks>May be empty but not null</remarks>
        </member>
        <member name="M:DuetAPI.Message.ToString">
            <summary>
            Converts this message to a RepRapFirmware-style message
            </summary>
            <returns>RepRapFirmware-style message</returns>
        </member>
        <member name="M:DuetAPI.Message.Assign(System.Object)">
            <summary>
            Assigns every property of another instance of this one
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.Message.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>Clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.MessageType">
            <summary>
            Type of a generic message
            </summary>
        </member>
        <member name="F:DuetAPI.MessageType.Success">
            <summary>
            This is a success message
            </summary>
        </member>
        <member name="F:DuetAPI.MessageType.Warning">
            <summary>
            This is a warning message
            </summary>
        </member>
        <member name="F:DuetAPI.MessageType.Error">
            <summary>
            This is an error message
            </summary>
        </member>
        <member name="T:DuetAPI.ParsedFileInfo">
            <summary>
            Holds information about a parsed G-code file
            </summary>
        </member>
        <member name="E:DuetAPI.ParsedFileInfo.PropertyChanged">
            <summary>
            Event to trigger when a property has changed
            </summary>
        </member>
        <member name="P:DuetAPI.ParsedFileInfo.FileName">
            <summary>
            The filename of the G-code file
            </summary>
        </member>
        <member name="P:DuetAPI.ParsedFileInfo.Size">
            <summary>
            Size of the file
            </summary>
        </member>
        <member name="P:DuetAPI.ParsedFileInfo.LastModified">
            <summary>
            Date and time of the last modification or null if none is set 
            </summary>
        </member>
        <member name="P:DuetAPI.ParsedFileInfo.Height">
            <summary>
            Build height of the G-code job or 0 if not found (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.ParsedFileInfo.FirstLayerHeight">
            <summary>
            Height of the first layer or 0 if not found (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.ParsedFileInfo.LayerHeight">
            <summary>
            Height of each other layer or 0 if not found (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.ParsedFileInfo.NumLayers">
            <summary>
            Number of total layers or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.ParsedFileInfo.Filament">
            <summary>
            Filament consumption per extruder drive (in mm)
            </summary>
            <remarks>
            Do NOT update items of this collection - replace it entirely instead.
            This type will be replaced with an ObservableCollection as soon as JsonSerializer supports it.
            </remarks>
        </member>
        <member name="P:DuetAPI.ParsedFileInfo.GeneratedBy">
            <summary>
            Name of the application that generated this file
            </summary>
        </member>
        <member name="P:DuetAPI.ParsedFileInfo.PrintTime">
            <summary>
            Estimated print time (in s)
            </summary>
        </member>
        <member name="P:DuetAPI.ParsedFileInfo.SimulatedTime">
            <summary>
            Estimated print time from G-code simulation (in s)
            </summary>
        </member>
        <member name="M:DuetAPI.ParsedFileInfo.Assign(System.Object)">
            <summary>
            Assigns every property of another instance of this one
            </summary>
            <param name="from">Object to assign from</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
            <exception cref="T:System.ArgumentException">Types do not match</exception>
        </member>
        <member name="M:DuetAPI.ParsedFileInfo.Clone">
            <summary>
            Creates a clone of this instance
            </summary>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:DuetAPI.Utility.FileLists">
            <summary>
            Helper class to generate RRF-style file lists
            </summary>
        </member>
        <member name="M:DuetAPI.Utility.FileLists.MakeFileListContainer(System.Object,System.String,System.Int32)">
            <summary>
            Make a filelist container for M20
            </summary>
            <param name="items">Items to include</param>
            <param name="directory">RRF directory</param>
            <param name="startAt">First item</param>
            <returns>JSON file list object</returns>
        </member>
        <member name="M:DuetAPI.Utility.FileLists.GetFiles(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Get a /rr_files or M20 files response
            </summary>
            <param name="directory">RRF path to the directory</param>
            <param name="physicalDirectory">Physical directory</param>
            <param name="startAt">First item to send</param>
            <param name="flagDirs">Prefix directories with an asterisk</param>
            <returns>JSON file list</returns>
        </member>
        <member name="M:DuetAPI.Utility.FileLists.GetFileList(System.String,System.String,System.Int32)">
            <summary>
            Get a /rr_filelist or M20 files response
            </summary>
            <param name="directory">RRF path to the directory</param>
            <param name="physicalDirectory">Physical directory</param>
            <param name="startAt">First file index to return. Set startAt to -1 to omit error handling and the JSON object container</param>
            <returns>JSON list</returns>
        </member>
        <member name="T:DuetAPI.Utility.Heightmap">
            <summary>
            Class representing a heightmap
            </summary>
        </member>
        <member name="P:DuetAPI.Utility.Heightmap.XMin">
            <summary>
            X start coordinate of the heightmap
            </summary>
        </member>
        <member name="P:DuetAPI.Utility.Heightmap.XMax">
            <summary>
            X end coordinate of the heightmap
            </summary>
        </member>
        <member name="P:DuetAPI.Utility.Heightmap.XSpacing">
            <summary>
            Spacing between the probe points in X direction
            </summary>
        </member>
        <member name="P:DuetAPI.Utility.Heightmap.YMin">
            <summary>
            Y start coordinate of the heightmap
            </summary>
        </member>
        <member name="P:DuetAPI.Utility.Heightmap.YMax">
            <summary>
            Y end coordinate of the heightmap
            </summary>
        </member>
        <member name="P:DuetAPI.Utility.Heightmap.YSpacing">
            <summary>
            Spacing between the probe points in Y direction
            </summary>
        </member>
        <member name="P:DuetAPI.Utility.Heightmap.Radius">
            <summary>
            Probing radius on delta geometries
            </summary>
        </member>
        <member name="P:DuetAPI.Utility.Heightmap.NumX">
            <summary>
            Number of probe points in X direction
            </summary>
        </member>
        <member name="P:DuetAPI.Utility.Heightmap.NumY">
            <summary>
            Number of probe points in Y direction
            </summary>
        </member>
        <member name="P:DuetAPI.Utility.Heightmap.ZCoordinates">
            <summary>
            Z coordinate of each probe point
            </summary>
        </member>
        <member name="M:DuetAPI.Utility.Heightmap.Load(System.String)">
            <summary>
            Load a new heightmap from the given CSV file
            </summary>
            <param name="filename">Path to the file</param>
            <returns>Asynchronous task</returns>
            <exception cref="T:System.IO.IOException">Invalid file</exception>
        </member>
        <member name="M:DuetAPI.Utility.Heightmap.Save(System.String)">
            <summary>
            Save a heightmap to the given CSV file
            </summary>
            <param name="filename">Filename of the heightmap</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetAPI.Utility.IAssignable">
            <summary>
            Interface that provides a method to assign all values from another instance
            </summary>
            <remarks>Non-value types are supposed to be cloned when implementing this</remarks>
        </member>
        <member name="M:DuetAPI.Utility.IAssignable.Assign(System.Object)">
            <summary>
            Assign every property from another instance
            </summary>
            <param name="from">Source object</param>
        </member>
        <member name="T:DuetAPI.Utility.JsonCamelCaseStringEnumConverter">
            <summary>
            Class for easier access to JsonStringEnumConverter with camel-case naming
            </summary>
        </member>
        <member name="M:DuetAPI.Utility.JsonCamelCaseStringEnumConverter.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:DuetAPI.Utility.JsonCamelCaseStringEnumConverter.CanConvert(System.Type)">
            <summary>
            Checks if the given type can be converted
            </summary>
            <param name="typeToConvert">Type to convert</param>
            <returns>Whether the type can be converted</returns>
        </member>
        <member name="M:DuetAPI.Utility.JsonCamelCaseStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates a new JSON converter
            </summary>
            <param name="typeToConvert">Type to convert</param>
            <param name="options">Conversion options</param>
            <returns>JSON converter</returns>
        </member>
        <member name="T:DuetAPI.Utility.JsonCharEnumConverter">
            <summary>
            Helper class to convert char enums to strings and vice versa
            </summary>
        </member>
        <member name="M:DuetAPI.Utility.JsonCharEnumConverter.CanConvert(System.Type)">
            <summary>
            Checks if the given type can be converted
            </summary>
            <param name="typeToConvert">Type to convert</param>
            <returns>Whether the type can be converted</returns>
        </member>
        <member name="M:DuetAPI.Utility.JsonCharEnumConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read from JSON
            </summary>
            <param name="reader">JSON reader</param>
            <param name="typeToConvert">Type to convert</param>
            <param name="options">Read options</param>
            <returns>Read value</returns>
        </member>
        <member name="M:DuetAPI.Utility.JsonCharEnumConverter.Write(System.Text.Json.Utf8JsonWriter,System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write a CodeParameter to JSON
            </summary>
            <param name="writer">JSON writer</param>
            <param name="value">Value to serialize</param>
            <param name="options">Write options</param>
        </member>
        <member name="T:DuetAPI.Utility.JsonGrowingListAttribute">
            <summary>
            Flags a property so that a JSON patch creates only added items or an empty list in case it is cleared
            </summary>
        </member>
        <member name="M:DuetAPI.Utility.JsonGrowingListAttribute.#ctor">
            <summary>
            Creates a new instance of this type
            </summary>
        </member>
        <member name="T:DuetAPI.Utility.JsonRegexListConverter">
            <summary>
            JSON converter to read and write a list of regular expressions
            </summary>
            <remarks>
            This class may become obsolete in a future .NET Core version.
            For some reason it has no effect to add this converter to the default JSON options.
            </remarks>
        </member>
        <member name="M:DuetAPI.Utility.JsonRegexListConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read a Regex list from JSON
            </summary>
            <param name="reader">JSON reader</param>
            <param name="typeToConvert">Type to convert</param>
            <param name="options">Reader options</param>
            <returns>Read value</returns>
        </member>
        <member name="M:DuetAPI.Utility.JsonRegexListConverter.Write(System.Text.Json.Utf8JsonWriter,System.Collections.Generic.List{System.Text.RegularExpressions.Regex},System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write a Regex list to JSON
            </summary>
            <param name="writer">JSON writer</param>
            <param name="value">Value to serialize</param>
            <param name="options">Write options</param>
        </member>
        <member name="T:DuetAPI.Utility.JsonHelper">
            <summary>
            Helper class for JSON serialization, deserialization, patch creation and patch application
            </summary>
        </member>
        <member name="F:DuetAPI.Utility.JsonHelper.DefaultJsonOptions">
            <summary>
            Default JSON (de-)serialization options
            </summary>
        </member>
        <member name="M:DuetAPI.Utility.JsonHelper.ReceiveUtf8Json(System.Net.Sockets.Socket,System.Threading.CancellationToken)">
            <summary>
            Receive a serialized JSON object from a socket in UTF-8 format
            </summary>
            <param name="socket">Socket to read from</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Plain JSON</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Connection has been closed</exception>
        </member>
        <member name="T:DuetAPI.Utility.JsonLowerCaseStringEnumConverter">
            <summary>
            Class to convert enums to and from lowercase JSON strings
            </summary>
        </member>
        <member name="M:DuetAPI.Utility.JsonLowerCaseStringEnumConverter.CanConvert(System.Type)">
            <summary>
            Checks if the type can be converted
            </summary>
            <param name="typeToConvert">Type to convert</param>
            <returns>True if the type can be converted</returns>
        </member>
        <member name="M:DuetAPI.Utility.JsonLowerCaseStringEnumConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read an enum value from JSON
            </summary>
            <param name="reader">JSON reader</param>
            <param name="typeToConvert">Type to convert</param>
            <param name="options">Read options</param>
            <returns>Deserialized enum value</returns>
        </member>
        <member name="M:DuetAPI.Utility.JsonLowerCaseStringEnumConverter.Write(System.Text.Json.Utf8JsonWriter,System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write an enum value to lowercase JSON
            </summary>
            <param name="writer">JSON writer</param>
            <param name="value">Value to write</param>
            <param name="options">Write options</param>
        </member>
        <member name="T:DuetAPI.Utility.JsonPatch">
            <summary>
            Helper class to create and apply JSON diffs
            </summary>
        </member>
        <member name="M:DuetAPI.Utility.JsonPatch.Diff``1(``0,``0)">
            <summary>
            Create a JSON patch
            </summary>
            <typeparam name="T">Type of the objects to compare</typeparam>
            <param name="a">Old object</param>
            <param name="b">New object</param>
            <returns>Differences as UTF-8 or null both objects are equal</returns>
        </member>
        <member name="M:DuetAPI.Utility.JsonPatch.Patch(System.Object,System.Text.Json.JsonDocument)">
            <summary>
            Apply JSON patch
            </summary>
            <param name="obj">Object to patch</param>
            <param name="diff">JSON diff</param>
        </member>
        <member name="T:DuetAPI.Utility.ListHelpers">
            <summary>
            Class holding a few functions for lists that implement <c>IClonable</c> and <c>IAssignFrom</c>
            </summary>
        </member>
        <member name="M:DuetAPI.Utility.ListHelpers.AssignList``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Helper function to assign generic lists. Missing items are cloned, existing items are assigned
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="to">List to assign to</param>
            <param name="from">List to assign from</param>
        </member>
        <member name="M:DuetAPI.Utility.ListHelpers.SetList``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Helper function to set generic lists
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="destination">List to set</param>
            <param name="source">List to copy from</param>
        </member>
        <member name="M:DuetAPI.Utility.ListHelpers.AddItems``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Helper function to add items from one list to another
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="to">List to add items from</param>
            <param name="from">List to add items to</param>
        </member>
        <member name="M:DuetAPI.Utility.ListHelpers.CloneItems``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Helper function to clone items and to add them to the specified list
            </summary>
            <remarks>This function does not clear the destination list</remarks>
            <typeparam name="T">Item type</typeparam>
            <param name="destination">List to add the clones to</param>
            <param name="source">List to clone items from</param>
        </member>
        <member name="M:DuetAPI.Utility.ListHelpers.RemoveItem``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Helper functionto remove a specific item from a list of assignable items
            </summary>
            <remarks>
            This must be used to ensure Patch mode keeps working when DCS removes certain items like user sessions or HTTP endpoints
            </remarks>
            <typeparam name="T">Item type</typeparam>
            <param name="list">List to remove an item from</param>
            <param name="index">Index of the item to remove</param>
        </member>
    </members>
</doc>
