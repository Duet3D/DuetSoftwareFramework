<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DuetAPI</name>
    </assembly>
    <members>
        <member name="T:DuetAPI.CodeChannel">
            <summary>
            Enumeration of supported input channel names
            </summary>
            <remarks>
            The indices of this enum are tightly coupled with RepRapFirmware.
            Make sure to update this enum accordingly whenever changes are made to it!
            </remarks>
        </member>
        <member name="F:DuetAPI.CodeChannel.HTTP">
            <summary>
            Code channel for HTTP requests
            </summary>
        </member>
        <member name="F:DuetAPI.CodeChannel.Telnet">
            <summary>
            Code channel for Telnet requests
            </summary>
        </member>
        <member name="F:DuetAPI.CodeChannel.File">
            <summary>
            Code channel for file prints
            </summary>
        </member>
        <member name="F:DuetAPI.CodeChannel.USB">
            <summary>
            Code channel for USB requests
            </summary>
        </member>
        <member name="F:DuetAPI.CodeChannel.Aux">
            <summary>
            Code channel for serial devices (e.g. PanelDue)
            </summary>
        </member>
        <member name="F:DuetAPI.CodeChannel.Trigger">
            <summary>
            Code channel for running triggers or config.g
            </summary>
        </member>
        <member name="F:DuetAPI.CodeChannel.Queue">
            <summary>
            Code channel for the code queue that executes a couple of codes in-sync with moves
            </summary>
        </member>
        <member name="F:DuetAPI.CodeChannel.LCD">
            <summary>
            Code channel for auxiliary LCD devices (e.g. PanelOne)
            </summary>
        </member>
        <member name="F:DuetAPI.CodeChannel.SBC">
            <summary>
            Default code channel for requests over SPI
            </summary>
        </member>
        <member name="F:DuetAPI.CodeChannel.Daemon">
            <summary>
            Code channel that executes the daemon process
            </summary>
        </member>
        <member name="F:DuetAPI.CodeChannel.Aux2">
            <summary>
            Code channel for the second UART port
            </summary>
        </member>
        <member name="F:DuetAPI.CodeChannel.Autopause">
            <summary>
            Code channel that executes macros on power fail, heater faults and filament out
            </summary>
        </member>
        <member name="F:DuetAPI.CodeChannel.Unknown">
            <summary>
            Unknown code channel
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.AddHttpEndpoint">
            <summary>
            Register a new HTTP endpoint via DuetWebServer. This will create a new HTTP endpoint under /machine/{Namespace}/{EndpointPath}.
            Returns a path to the UNIX socket which DuetWebServer will connect to whenever a matching HTTP request is received.
            A plugin using this command has to open a new UNIX socket with the given path that DuetWebServer can connect to
            </summary>
            <seealso cref="T:DuetAPI.Commands.ReceivedHttpRequest"/>.
            <seealso cref="T:DuetAPI.Commands.SendHttpResponse"/>
        </member>
        <member name="P:DuetAPI.Commands.AddHttpEndpoint.EndpointType">
            <summary>
            Type of the HTTP request
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.AddHttpEndpoint.Namespace">
            <summary>
            Namespace of the plugin wanting to create a new third-party endpoint
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.AddHttpEndpoint.Path">
            <summary>
            Path to the endpoint to register
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.AddUserSession">
            <summary>
            Register a new user session.
            Returns the ID of the new user session
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.AddUserSession.AccessLevel">
            <summary>
            Access level of this session
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.AddUserSession.SessionType">
            <summary>
            Type of this session
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.AddUserSession.Origin">
            <summary>
            Origin of this session. For remote sessions, this equals the remote IP address
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.AddUserSession.OriginPort">
            <summary>
            Corresponding identifier of the origin.
            If it is a remote session, it is the remote port, else it defaults to the PID of the current process
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.BaseCommand">
            <summary>
            Base class of a command.
            When an instance of this class is processed in the control server, the connection identifier of the channel it was received from is assigned.
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.BaseCommand.#ctor">
            <summary>
            Creates a new instance of the BaseCommand
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.BaseCommand.Command">
            <summary>
            Name of the command to execute
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.BaseCommand.Invoke">
            <summary>
            Invokes the command implementation
            </summary>
            <returns>Result of the command</returns>
        </member>
        <member name="T:DuetAPI.Commands.Command">
            <summary>
            Base class of commands that do not return a result
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.Command.Execute">
            <summary>
            Reserved for the actual command implementation in the control server
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetAPI.Commands.Command.Invoke">
            <summary>
            Invokes the command implementation
            </summary>
            <returns>null</returns>
        </member>
        <member name="T:DuetAPI.Commands.Command`1">
            <summary>
            Base class of a command that returns a result
            </summary>
            <typeparam name="T">Type of the command result</typeparam>
        </member>
        <member name="M:DuetAPI.Commands.Command`1.Execute">
            <summary>
            Reserved for the actual command implementation in the control server
            </summary>
            <returns>Command result</returns>
        </member>
        <member name="M:DuetAPI.Commands.Command`1.Invoke">
            <summary>
            Invokes the command implementation
            </summary>
            <returns>Command result</returns>
        </member>
        <member name="T:DuetAPI.Commands.Code">
            <summary>
            A parsed representation of a generic G/M/T-code
            </summary>
            <seealso cref="T:DuetAPI.Commands.CodeResult"/>
        </member>
        <member name="M:DuetAPI.Commands.Code.#ctor">
            <summary>
            Create an empty Code representation
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.Code.#ctor(System.String)">
            <summary>
            Create a new Code instance and attempt to parse the given code string
            </summary>
            <param name="code">UTF8-encoded G/M/T-Code</param>
        </member>
        <member name="P:DuetAPI.Commands.Code.SourceConnection">
            <summary>
            The connection ID this code was received from. If this is 0, the code originates from an internal DCS task
            </summary>
            <remarks>
            Usually there is no need to populate this property. It is internally overwritten by the control server on receipt
            </remarks>
        </member>
        <member name="P:DuetAPI.Commands.Code.Result">
            <summary>
            Result of this code. This property is only set when the code has finished its excution.
            It remains null if the code has been cancelled
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.Type">
            <summary>
            Type of the code. If no exact type could be determined, it is interpreted as a comment
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.Channel">
            <summary>
            Code channel to send this code to
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.LineNumber">
            <summary>
            Line number of this code
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.Indent">
            <summary>
            Number of whitespaces prefixing the command content
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.Keyword">
            <summary>
            Type of conditional G-code (if any)
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.KeywordArgument">
            <summary>
            Argument of the conditional G-code (if any)
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.MajorNumber">
            <summary>
            Major code number (e.g. 28 in G28)
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.MinorNumber">
            <summary>
            Minor code number (e.g. 3 in G54.3)
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.Flags">
            <summary>
            Flags of this code
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.Comment">
            <summary>
            Comment of the G/M/T-code. May be null if no comment is present
            </summary>
            <remarks>
            The parser combines different comment segments and concatenates them as a single value.
            So for example a code like 'G28 (Do homing) ; via G28' causes the Comment field to be filled with 'Do homing via G28'
            </remarks>
        </member>
        <member name="P:DuetAPI.Commands.Code.FilePosition">
            <summary>
            File position of this code in bytes (optional)
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.Length">
            <summary>
            Length of the original code in bytes (optional)
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Code.Parameters">
            <summary>
            List of parsed code parameters (see <see cref="T:DuetAPI.Commands.CodeParameter"/> for further information)
            </summary>
            <seealso cref="T:DuetAPI.Commands.CodeParameter"/>
        </member>
        <member name="M:DuetAPI.Commands.Code.Reset">
            <summary>
            Reset this instance
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.Code.Parameter(System.Char)">
            <summary>
            Retrieve the parameter whose letter equals c. Note that this look-up is case-insensitive
            </summary>
            <param name="c">Letter of the parameter to find</param>
            <returns>The parsed parameter instance or null if none could be found</returns>
        </member>
        <member name="M:DuetAPI.Commands.Code.Parameter(System.Char,System.Object)">
            <summary>
            Retrieve the parameter whose letter equals c or generate a default parameter
            </summary>
            <param name="c">Letter of the parameter to find</param>
            <param name="defaultValue">Default parameter value (no expression)</param>
            <returns>The parsed parameter instance or null if none could be found</returns>
        </member>
        <member name="M:DuetAPI.Commands.Code.GetUnprecedentedString(System.Boolean)">
            <summary>
            Reconstruct an unprecedented string from the parameter list or
            retrieve the parameter which does not have a letter assigned
            </summary>
            <param name="quoteStrings">Encapsulate strings in double quotes</param>
            <returns>Unprecedented string</returns>
        </member>
        <member name="M:DuetAPI.Commands.Code.ToString">
            <summary>
            Convert the parsed code back to a text-based G/M/T-code
            </summary>
            <returns>Reconstructed code string</returns>
        </member>
        <member name="M:DuetAPI.Commands.Code.ToShortString">
            <summary>
            Convert only the command portion to a text-based G/M/T-code (e.g. G28)
            </summary>
            <returns>Command fraction of the code</returns>
        </member>
        <member name="M:DuetAPI.Commands.Code.KeywordToString">
            <summary>
            Convert the keyword to a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:DuetAPI.Commands.Code.Parse(System.IO.TextReader,DuetAPI.Commands.Code)">
            <summary>
            Parse the next available G/M/T-code from the given stream
            </summary>
            <param name="reader">Input to read from</param>
            <param name="result">Code to fill</param>
            <returns>Whether anything could be read</returns>
            <exception cref="T:DuetAPI.Commands.CodeParserException">Thrown if the code contains errors like unterminated strings or unterminated comments</exception>
            <remarks>
            In general it is better to use <see cref="M:DuetAPI.Commands.Code.ParseAsync(System.IO.StreamReader,DuetAPI.Commands.Code,DuetAPI.Commands.CodeParserBuffer)"/> because this implementation
            - does not update the line number unless it is specified using the 'N' character
            - does not set the corresponding flag for G53 after the first code on a line
            - sets the indentation level only for the first code in a line
            </remarks>
        </member>
        <member name="M:DuetAPI.Commands.Code.AddParameter(DuetAPI.Commands.Code,System.Char,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add a new parameter to a given <see cref="T:DuetAPI.Commands.Code"/> instance
            </summary>
            <param name="code">Code to add the parameter to</param>
            <param name="letter">Letter of the parameter to 0 if unprecedented</param>
            <param name="value">Value of the parameter</param>
            <param name="isQuoted">Whether the parameter is a quoted string</param>
            <param name="isSingleParameter">Whether the parameter is definitely a single parameter</param>
        </member>
        <member name="M:DuetAPI.Commands.Code.ConvertDriverIds">
            <summary>
            Convert parameters of this code to driver id(s)
            </summary>
            <exception cref="T:DuetAPI.Commands.CodeParserException">Driver ID could not be parsed</exception>
        </member>
        <member name="M:DuetAPI.Commands.Code.ConvertDriverIds(DuetAPI.Commands.CodeParameter)">
            <summary>
            Convert a given parameter to driver id(s)
            </summary>
            <exception cref="T:DuetAPI.Commands.CodeParserException">Driver ID could not be parsed</exception>
        </member>
        <member name="M:DuetAPI.Commands.Code.ParseAsync(System.IO.StreamReader,DuetAPI.Commands.Code,DuetAPI.Commands.CodeParserBuffer)">
            <summary>
            Parse the next available G/M/T-code from the given stream asynchronously
            </summary>
            <param name="reader">Input to read from</param>
            <param name="result">Code to fill</param>
            <param name="buffer">Internal buffer for parsing codes</param>
            <returns>Whether anything could be read</returns>
            <exception cref="T:DuetAPI.Commands.CodeParserException">Thrown if the code contains errors like unterminated strings or unterminated comments</exception>
        </member>
        <member name="T:DuetAPI.Commands.KeywordType">
            <summary>
            Enumeration of conditional G-code keywords
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.KeywordType.None">
            <summary>
            No conditional code
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.KeywordType.If">
            <summary>
            If condition
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.KeywordType.ElseIf">
            <summary>
            Else-if condition
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.KeywordType.Else">
            <summary>
            Else condition
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.KeywordType.While">
            <summary>
            While condition
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.KeywordType.Break">
            <summary>
            Break instruction
            </summary>
            <seealso cref="F:DuetAPI.Commands.KeywordType.While"/>
        </member>
        <member name="F:DuetAPI.Commands.KeywordType.Return">
            <summary>
            Return instruction
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.KeywordType.Abort">
            <summary>
            Abort instruction
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.KeywordType.Var">
            <summary>
            Var operation
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.KeywordType.Set">
            <summary>
            Set operation
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.KeywordType.Echo">
            <summary>
            Echo operation
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.KeywordType.Continue">
            <summary>
            Continue instruction
            </summary>
            <seealso cref="F:DuetAPI.Commands.KeywordType.While"/>
        </member>
        <member name="T:DuetAPI.Commands.CodeFlags">
            <summary>
            Code bits to classify G/M/T-codes
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeFlags.None">
            <summary>
            Placeholder to indicate that no flags are set
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeFlags.Asynchronous">
            <summary>
            Code execution finishes as soon as it is enqueued in the code queue
            </summary>
            <remarks>
            If codes are started asynchronously, code replies are normally reported via the object model.
            In order to keep track of code replies, an <see cref="F:DuetAPI.Connection.ConnectionMode.Intercept"/> connection
            in <see cref="F:DuetAPI.Connection.InterceptionMode.Executed"/> mode can be used
            </remarks>
        </member>
        <member name="F:DuetAPI.Commands.CodeFlags.IsPreProcessed">
            <summary>
            Code has been preprocessed (i.e. it has been processed by the DCS pre-side code interceptors)
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeFlags.IsPostProcessed">
            <summary>
            Code has been postprocessed (i.e. it has been processed by the internal DCS code processor)
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeFlags.IsFromMacro">
            <summary>
            Code originates from a macro file
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeFlags.IsNestedMacro">
            <summary>
            Code originates from a system macro file (i.e. RRF requested it)
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeFlags.IsFromConfig">
            <summary>
            Code comes from config.g or config.g.bak
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeFlags.IsFromConfigOverride">
            <summary>
            Code comes from config-override.g
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeFlags.EnforceAbsolutePosition">
            <summary>
            Enforce absolute positioning via prefixed G53 code
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeFlags.IsPrioritized">
            <summary>
            Override every other code and send it to the firmware as quickly as possible
            </summary>
            <remarks>
            When this type of code is intercepted, the code can be ignored, cancelled, or resolved,
            but it is not possible to insert asynchronous codes that complete before the given code.
            In a future DSF version it may be no longer possible to intercept prioritized codes
            </remarks>
        </member>
        <member name="F:DuetAPI.Commands.CodeFlags.Unbuffered">
            <summary>
            Do NOT process another code on the same channel before this code has been fully executed
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeFlags.IsFromFirmware">
            <summary>
            Indicates if this code was requested from the firmware
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.CodeParameter">
            <summary>
            Represents a parsed parameter of a G/M/T-code
            Initial parsing is done whenever a code is processed
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.CodeParameter.Letter">
            <summary>
            Letter of the code parameter (e.g. P in M106 P3)
            </summary>
            <remarks>
            If this is an unprecedented parameter without a letter, '@' is used
            </remarks>
        </member>
        <member name="P:DuetAPI.Commands.CodeParameter.IsExpression">
            <summary>
            Indicates if this parameter is an expression that can be evaluated
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.CodeParameter.IsDriverId">
            <summary>
            Indicates if this parameter is a driver identifier
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeParameter.StringValue">
            <summary>
            Unparsed string representation of the code parameter or an empty string if none present
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeParameter.ParsedValue">
            <summary>
            Internal parsed representation of the string value (one of string, int, uint, float, int[], uint[] or float[])
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.#ctor(System.Char,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new CodeParameter instance and parses value to a native data type if applicable
            </summary>
            <param name="letter">Letter of the code parameter</param>
            <param name="value">String representation of the value</param>
            <param name="isString">Whether this is a string. This is set to true if the parameter was inside quotation marks</param>
            <param name="isDriverId">Whether this is a driver ID</param>
            <remarks>This constructor does not parsed long (aka int64) values because RRF cannot handle them</remarks>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.#ctor(System.Char,System.Object)">
            <summary>
            Creates a new CodeParameter instance and with the given value
            </summary>
            <param name="letter">Letter of the code parameter (automatically converted to upper-case)</param>
            <param name="value">Value of this parameter</param>
        </member>
        <member name="P:DuetAPI.Commands.CodeParameter.Type">
            <summary>
            Data type of the internally parsed value
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Implicit(DuetAPI.Commands.CodeParameter)~System.Single">
            <summary>
            Implicit conversion operator to float
            </summary>
            <param name="codeParameter">Target object</param>
            <returns>Converted value</returns>
            <exception cref="T:System.ArgumentException">Data type is not convertible</exception>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Implicit(DuetAPI.Commands.CodeParameter)~System.Int32">
            <summary>
            Implicit conversion operator to int
            </summary>
            <param name="codeParameter">Target object</param>
            <returns>Converted value</returns>
            <exception cref="T:System.ArgumentException">Data type is not convertible</exception>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Implicit(DuetAPI.Commands.CodeParameter)~System.UInt32">
            <summary>
            Implicit conversion operator to uint
            </summary>
            <param name="codeParameter">Target object</param>
            <returns>Converted value</returns>
            <exception cref="T:System.ArgumentException">Data type is not convertible</exception>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Implicit(DuetAPI.Commands.CodeParameter)~DuetAPI.Utility.DriverId">
            <summary>
            Implicit conversion operator to a driver ID
            </summary>
            <param name="codeParameter">Target object</param>
            <returns>Converted value</returns>
            <exception cref="T:System.ArgumentException">Data type is not convertible</exception>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Implicit(DuetAPI.Commands.CodeParameter)~System.Int64">
            <summary>
            Implicit conversion operator to long
            </summary>
            <param name="codeParameter">Target object</param>
            <returns>Converted value</returns>
            <exception cref="T:System.ArgumentException">Data type is not convertible</exception>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Implicit(DuetAPI.Commands.CodeParameter)~System.Boolean">
            <summary>
            Implicit conversion operator to bool
            </summary>
            <param name="codeParameter">Target object</param>
            <returns>Converted value</returns>
            <exception cref="T:System.ArgumentException">Data type is not convertible</exception>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Implicit(DuetAPI.Commands.CodeParameter)~System.String">
            <summary>
            Implicit conversion operator to string
            </summary>
            <param name="codeParameter">Target object</param>
            <returns>Converted value</returns>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Implicit(DuetAPI.Commands.CodeParameter)~System.Single[]">
            <summary>
            Implicit conversion operator to float array
            </summary>
            <param name="codeParameter">Target object</param>
            <returns>Converted value</returns>
            <exception cref="T:System.ArgumentException">Data type is not convertible</exception>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Implicit(DuetAPI.Commands.CodeParameter)~System.Int32[]">
            <summary>
            Implicit conversion operator to integer array
            </summary>
            <param name="codeParameter">Target object</param>
            <returns>Converted value</returns>
            <exception cref="T:System.ArgumentException">Data type is not convertible</exception>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Implicit(DuetAPI.Commands.CodeParameter)~System.UInt32[]">
            <summary>
            Implicit conversion operator to unsigned integer array
            </summary>
            <param name="codeParameter">Target object</param>
            <returns>Converted value</returns>
            <exception cref="T:System.ArgumentException">Data type is not convertible</exception>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Implicit(DuetAPI.Commands.CodeParameter)~DuetAPI.Utility.DriverId[]">
            <summary>
            Implicit conversion operator to a driver ID array
            </summary>
            <param name="codeParameter">Target object</param>
            <returns>Converted value</returns>
            <exception cref="T:System.ArgumentException">Data type is not convertible</exception>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Implicit(DuetAPI.Commands.CodeParameter)~System.Int64[]">
            <summary>
            Implicit conversion operator to long array
            </summary>
            <param name="codeParameter">Target object</param>
            <returns>Converted value</returns>
            <exception cref="T:System.ArgumentException">Data type is not convertible</exception>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Equality(DuetAPI.Commands.CodeParameter,System.Object)">
            <summary>
            Equality operator
            </summary>
            <param name="a">Code parameter</param>
            <param name="b">Other object</param>
            <returns>True if both objects are equal</returns>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.op_Inequality(DuetAPI.Commands.CodeParameter,System.Object)">
            <summary>
            Inequality operator
            </summary>
            <param name="a">Code parameter</param>
            <param name="b">Other object</param>
            <returns>True if both objects are not equal</returns>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.Equals(System.Object)">
            <summary>
            Checks if the other obj equals this instance
            </summary>
            <param name="obj">Other object</param>
            <returns>True if both objects are not equal</returns>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.GetHashCode">
            <summary>
            Returns the hash code of this instance
            </summary>
            <returns>Computed hash code</returns>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameter.ToString">
            <summary>
            Converts this parameter to a string
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:DuetAPI.Commands.CodeParameterConverter">
            <summary>
            Converts a <see cref="T:DuetAPI.Commands.CodeParameter"/> instance to JSON
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameterConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read a CodeParameter object from JSON
            </summary>
            <param name="reader">JSON reader</param>
            <param name="typeToConvert">Type to convert</param>
            <param name="options">Serializer options</param>
            <returns>Read value</returns>
        </member>
        <member name="M:DuetAPI.Commands.CodeParameterConverter.Write(System.Text.Json.Utf8JsonWriter,DuetAPI.Commands.CodeParameter,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write a CodeParameter to JSON
            </summary>
            <param name="writer">JSON writer</param>
            <param name="value">Value to serialize</param>
            <param name="options">Write options</param>
        </member>
        <member name="T:DuetAPI.Commands.CodeParserBuffer">
            <summary>
            Internal buffer for reading asynchronously from files
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.CodeParserBuffer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Default constructor of this class
            </summary>
            <param name="bufferSize">How many bytes to buffer when reading from a file</param>
            <param name="lineNumbersValid">Indicates if line numbers are valid</param>
        </member>
        <member name="F:DuetAPI.Commands.CodeParserBuffer.SeenNewLine">
            <summary>
            Indicates if the last 
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeParserBuffer.Indent">
            <summary>
            Last indentation level
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeParserBuffer.EnforcingAbsolutePosition">
            <summary>
            Whether the line started with G53
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeParserBuffer.Buffer">
            <summary>
            Internal buffer
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeParserBuffer.BufferPointer">
            <summary>
            Pointer in the buffer
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeParserBuffer.BufferSize">
            <summary>
            How many bytes are available for reading
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.CodeParserBuffer.InvalidateData">
            <summary>
            Invalidate the buffer internally
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeParserBuffer.LineNumber">
            <summary>
            Current line number
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.CodeParserBuffer.Invalidate">
            <summary>
            Invalidate the buffer
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.CodeParserBuffer.GetPosition(System.IO.StreamReader)">
            <summary>
            Get the actual byte position when reading from a stream
            </summary>
            <param name="reader">Reader to read from</param>
            <returns>Actual position in bytes</returns>
        </member>
        <member name="T:DuetAPI.Commands.CodeParserException">
            <summary>
            Exception class that is thrown when a G/M/T-code could not be parsed
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.CodeParserException.#ctor">
            <summary>
            Creates a new CodeParserException
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.CodeParserException.#ctor(System.String)">
            <summary>
            Creates a new CodeParserException
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:DuetAPI.Commands.CodeParserException.#ctor(System.String,DuetAPI.Commands.Code)">
            <summary>
            Creates a new CodeParserException with details where the parser failed to read data
            </summary>
            <param name="message">Exception message</param>
            <param name="code">Code being parsed</param>
        </member>
        <member name="M:DuetAPI.Commands.CodeParserException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new CodeParserException
            </summary>
            <param name="message">Exception message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="T:DuetAPI.Commands.CodeResult">
            <summary>
            List-based representation of a code result.
            Each item represents a <see cref="T:DuetAPI.Machine.Message"/> instance which can be easily converted to a string
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.CodeResult.#ctor">
            <summary>
            Create a new code result indicating success
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.CodeResult.#ctor(DuetAPI.Machine.MessageType,System.String)">
            <summary>
            Create a new code result with an initial message
            </summary>
            <param name="type">Message type</param>
            <param name="content">Message content</param>
        </member>
        <member name="M:DuetAPI.Commands.CodeResult.Add(DuetAPI.Machine.MessageType,System.String)">
            <summary>
            Add another message
            </summary>
            <param name="type">Message type</param>
            <param name="content">Message content</param>
        </member>
        <member name="P:DuetAPI.Commands.CodeResult.IsEmpty">
            <summary>
            Checks if the message contains any data
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.CodeResult.IsSuccessful">
            <summary>
            Indicates if the code could complete without an error
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.CodeResult.ToString">
            <summary>
            Converts the CodeResult to a string
            </summary>
            <returns>The CodeResult as a string</returns>
        </member>
        <member name="T:DuetAPI.Commands.CodeType">
            <summary>
            Type of a generic G/M/T-code. If none is applicable, it is treated as a comment
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeType.Comment">
            <summary>
            Whole line comment
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeType.GCode">
            <summary>
            G-code
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeType.MCode">
            <summary>
            M-code
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.CodeType.TCode">
            <summary>
            T-code
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.EvaluateExpression">
            <summary>
            Evaluate an arbitrary expression on the given channel in RepRapFirmware
            </summary>
            <remarks>
            Do not use this call to evaluate file-based and network-related fields because the DSF and RRF models diverge in this regard
            </remarks>
        </member>
        <member name="P:DuetAPI.Commands.EvaluateExpression.Channel">
            <summary>
            Code channel where the expression is evaluated
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.EvaluateExpression.Expression">
            <summary>
            Expression to evaluate
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.Flush">
            <summary>
            Wait for all pending (macro) codes on the given channel to finish.
            This effectively guarantees that all buffered codes are processed by RRF before this command finishes.
            If the flush request is successful, true is returned
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Flush.Channel">
            <summary>
            Code channel to flush
            </summary>
            <remarks>
            This value is ignored if this request is processed while a code is being intercepted
            </remarks>
        </member>
        <member name="T:DuetAPI.Commands.GetFileInfo">
            <summary>
            Analyse a G-code file and return an instance of <see cref="T:DuetAPI.Machine.ParsedFileInfo"/> when ready
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.GetFileInfo.FileName">
            <summary>
            The filename to extract information from
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.GetMachineModel">
            <summary>
            Get the current RepRapFirmware machine model
            </summary>
            <seealso cref="T:DuetAPI.Machine.MachineModel"/>
        </member>
        <member name="T:DuetAPI.Commands.Cancel">
            <summary>
            Cancel a code in <see cref="T:DuetAPI.Connection.InterceptionMode"/>
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.Ignore">
            <summary>
            Ignore the code to intercept and allow it to be processed without any modifications
            </summary>
            <remarks>
            This command is only permitted in <see cref="F:DuetAPI.Connection.ConnectionMode.Intercept"/> mode
            </remarks>
        </member>
        <member name="T:DuetAPI.Commands.Resolve">
            <summary>
            Resolve the code to intercept and return the given message details for its completion.
            </summary>
            <remarks>
            This command is only permitted in <see cref="F:DuetAPI.Connection.ConnectionMode.Intercept"/> mode
            </remarks>
        </member>
        <member name="P:DuetAPI.Commands.Resolve.Type">
            <summary>
            Type of the resolving message
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.Resolve.Content">
            <summary>
            Content of the resolving message
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.LockMachineModel">
            <summary>
            Lock the machine model for read/write access.
            This may be used to update the machine model and to change array items
            </summary>
            <seealso cref="T:DuetAPI.Commands.UnlockMachineModel"/>
        </member>
        <member name="T:DuetAPI.Commands.ReceivedHttpRequest">
            <summary>
            Notification sent by the webserver when a new HTTP request is received
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.ReceivedHttpRequest.SessionId">
            <summary>
            Identifier of the corresponding user session. This is -1 if it is an anonymous request
            </summary>
            <seealso cref="T:DuetAPI.Machine.UserSession"/>
        </member>
        <member name="P:DuetAPI.Commands.ReceivedHttpRequest.Queries">
            <summary>
            List of HTTP query pairs
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.ReceivedHttpRequest.Headers">
            <summary>
            List of HTTP header pairs
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.ReceivedHttpRequest.ContentType">
            <summary>
            Type of the body content
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.ReceivedHttpRequest.Body">
            <summary>
            Body content as plain text
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.RemoveHttpEndpoint">
            <summary>
            Remove an existing HTTP endpoint.
            Returns true if the endpoint could be successfully removed
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.RemoveHttpEndpoint.EndpointType">
            <summary>
            Type of the endpoint
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.RemoveHttpEndpoint.Namespace">
            <summary>
            Namespace of the endpoint
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.RemoveHttpEndpoint.Path">
            <summary>
            Endpoint path to unregister
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.RemoveUserSession">
            <summary>
            Remove an existing user session
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.RemoveUserSession.Id">
            <summary>
            Identifier of the user session to remove
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.ResolvePath">
            <summary>
            Resolve a RepRapFirmware-style path to an actual file path
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.ResolvePath.Path">
            <summary>
            Path that is RepRapFirmware-compatible
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.BaseResponse">
            <summary>
            Base class for every response to a command request.
            An instance of this is returned when a regular <see cref="T:DuetAPI.Commands.Command"/> has finished.
            </summary>
            <seealso cref="T:DuetAPI.Commands.Response`1"/>
            <seealso cref="T:DuetAPI.Commands.ErrorResponse"/>
        </member>
        <member name="P:DuetAPI.Commands.BaseResponse.Success">
            <summary>
            Indicates if the command could complete without a runtime error
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.Response`1">
            <summary>
            Response of a <see cref="T:DuetAPI.Commands.Command`1"/>
            </summary>
            <typeparam name="T">Type of the response</typeparam>
        </member>
        <member name="P:DuetAPI.Commands.Response`1.Result">
            <summary>
            Result of the command
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.Response`1.#ctor">
            <summary>
            Default constructor for a response
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.Response`1.#ctor(`0)">
            <summary>
            Creates a new Response instance from the given result
            </summary>
            <param name="result">Response result</param>
        </member>
        <member name="T:DuetAPI.Commands.ErrorResponse">
            <summary>
            Response indicating a runtime exception during the internal processing of a command
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.ErrorResponse.ErrorType">
            <summary>
            Name of the .NET exception
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.ErrorResponse.ErrorMessage">
            <summary>
            Message of the .NET exception
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.ErrorResponse.#ctor">
            <summary>
            Creates a new response indicating a runtime error.
            This constructor is only used for deserialization
            </summary>
        </member>
        <member name="M:DuetAPI.Commands.ErrorResponse.#ctor(System.Exception)">
            <summary>
            Creates a new response indicating a runtime error
            </summary>
            <param name="e">Exception to report</param>
        </member>
        <member name="T:DuetAPI.Commands.SendHttpResponse">
            <summary>
            Send a response to a received HTTP request
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.SendHttpResponse.StatusCode">
            <summary>
            HTTP or WebSocket status code to return. If this is greater than or equal to 1000, the WebSocket is closed
            </summary>
            <remarks>Codes greater than 1000 represent WebSocket status codes (1000 = normal close)</remarks>
        </member>
        <member name="P:DuetAPI.Commands.SendHttpResponse.Response">
            <summary>
            Content to return. If this is null or empty and a WebSocket is connected, the connection is closed
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.SendHttpResponse.ResponseType">
            <summary>
            Type of the content to return. Ignored if a WebSocket is connected
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.HttpResponseType">
            <summary>
            Enumeration of supported HTTP responses
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.HttpResponseType.StatusCode">
            <summary>
            HTTP status code without payload
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.HttpResponseType.PlainText">
            <summary>
            Plain text (UTF-8)
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.HttpResponseType.JSON">
            <summary>
            JSON-formatted data
            </summary>
        </member>
        <member name="F:DuetAPI.Commands.HttpResponseType.File">
            <summary>
            File content. Response must hold the absolute path to the file to return
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.SetMachineModel">
            <summary>
            Set an atomic property in the machine model. Make sure to acquire the read/write lock first!
            Returns true if the field could be updated
            </summary>
            <seealso cref="T:DuetAPI.Commands.LockMachineModel"/>
            <seealso cref="T:DuetAPI.Commands.UnlockMachineModel"/>
        </member>
        <member name="P:DuetAPI.Commands.SetMachineModel.PropertyPath">
            <summary>
            Path to the property in the machine model
            </summary>
            <seealso cref="P:DuetAPI.Connection.InitMessages.SubscribeInitMessage.Filter"/>
        </member>
        <member name="P:DuetAPI.Commands.SetMachineModel.Value">
            <summary>
            String representation of the value to set
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.SimpleCode">
            <summary>
            Perform a simple G/M/T-code
            </summary>
            <remarks>
            Internally the code passed is populated as a full <see cref="P:DuetAPI.Commands.SimpleCode.Code"/> instance and on completion
            its <see cref="T:DuetAPI.Commands.CodeResult"/> is transformed back into a basic string. This is useful for minimal
            extensions that do not require granular control of the code details. Except for certain cases, it
            is NOT recommended for usage in <see cref="T:DuetAPI.Connection.InterceptionMode"/> because it renders the
            internal code buffer useless.
            </remarks>
        </member>
        <member name="P:DuetAPI.Commands.SimpleCode.Code">
            <summary>
            Code to parse and execute
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.SimpleCode.Channel">
            <summary>
            Destination channel
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.Acknowledge">
            <summary>
            Acknowledge a (partial) model update.
            </summary>
            <remarks>
            This command is only permitted in <see cref="F:DuetAPI.Connection.ConnectionMode.Subscribe"/> mode
            </remarks>
        </member>
        <member name="T:DuetAPI.Commands.SyncMachineModel">
            <summary>
            Wait for the machine model to be fully updated from RepRapFirmware
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.UnlockMachineModel">
            <summary>
            Unlock the machine model after obtaining read/write access.
            This is mandatory after <see cref="T:DuetAPI.Commands.LockMachineModel"/> has been invoked
            </summary>
        </member>
        <member name="T:DuetAPI.Commands.WriteMessage">
            <summary>
            Write an arbitrary message
            </summary>
            <remarks>If neither <c>OutputMessage</c> nor <c>LogMessage</c> is true, the message is written to the console output</remarks>
        </member>
        <member name="P:DuetAPI.Commands.WriteMessage.Type">
            <summary>
            Type of the message to write
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.WriteMessage.Content">
            <summary>
            Content of the message to write
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.WriteMessage.OutputMessage">
            <summary>
            Output the message on the console and via the object model
            </summary>
        </member>
        <member name="P:DuetAPI.Commands.WriteMessage.LogMessage">
            <summary>
            Write the message to the log file (if applicable)
            </summary>
        </member>
        <member name="T:DuetAPI.Connection.ConnectionMode">
            <summary>
            Supported connection types for client connections
            </summary>
        </member>
        <member name="F:DuetAPI.Connection.ConnectionMode.Unknown">
            <summary>
            Unknown connection type. If this is used, the connection is immediately terminated
            </summary>
        </member>
        <member name="F:DuetAPI.Connection.ConnectionMode.Command">
            <summary>
            Command mode. This allows clients to send general purpose messages to the control server like
            G-codes or requests of the full object model
            </summary>
            <seealso cref="T:DuetAPI.Connection.InitMessages.CommandInitMessage"/>
        </member>
        <member name="F:DuetAPI.Connection.ConnectionMode.Intercept">
            <summary>
            Interception mode. This allows clients to intercept G/M/T-codes before or after they are initially processed
            </summary>
            <seealso cref="T:DuetAPI.Connection.InitMessages.InterceptInitMessage"/>
        </member>
        <member name="F:DuetAPI.Connection.ConnectionMode.Subscribe">
            <summary>
            Subscription mode. In this mode object model updates are transmitted to the client after each update
            </summary>
            <seealso cref="T:DuetAPI.Connection.InitMessages.SubscribeInitMessage"/>
        </member>
        <member name="T:DuetAPI.Connection.Defaults">
            <summary>
            Static class that holds the connection defaults
            </summary>
        </member>
        <member name="F:DuetAPI.Connection.Defaults.ProtocolVersion">
            <summary>
            Current API protocol version number
            </summary>
        </member>
        <member name="F:DuetAPI.Connection.Defaults.SocketDirectory">
            <summary>
            Default directory in which DSF-related UNIX sockets reside
            </summary>
        </member>
        <member name="F:DuetAPI.Connection.Defaults.SocketFile">
            <summary>
            Default UNIX socket file for DuetControlServer
            </summary>
        </member>
        <member name="F:DuetAPI.Connection.Defaults.FullSocketPath">
            <summary>
            Default fully-qualified path to the UNIX socket for DuetControlServer
            </summary>
        </member>
        <member name="F:DuetAPI.Connection.Defaults.InputChannel">
            <summary>
            Default code channel to use
            </summary>
        </member>
        <member name="T:DuetAPI.Connection.IncompatibleVersionException">
            <summary>
            Exception class that is thrown if the API version of the client is incompatible to the server
            </summary>
        </member>
        <member name="M:DuetAPI.Connection.IncompatibleVersionException.#ctor">
            <summary>
            Creates a new exception instance
            </summary>
        </member>
        <member name="M:DuetAPI.Connection.IncompatibleVersionException.#ctor(System.String)">
            <summary>
            Creates a new exception instance
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:DuetAPI.Connection.IncompatibleVersionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new exception instance
            </summary>
            <param name="message">Error message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:DuetAPI.Connection.InitMessages.ClientInitMessage">
            <summary>
            An instance of this class is sent from the client to the server as a response to the <see cref="T:DuetAPI.Connection.InitMessages.ServerInitMessage"/>.
            It allows a client to select the connection mode (<see cref="T:DuetAPI.Connection.ConnectionMode"/>).
            </summary>
        </member>
        <member name="P:DuetAPI.Connection.InitMessages.ClientInitMessage.Mode">
            <summary>
            Desired mode of the new connection
            </summary>
        </member>
        <member name="P:DuetAPI.Connection.InitMessages.ClientInitMessage.Version">
            <summary>
            Version number of the client-side API
            </summary>
            <seealso cref="F:DuetAPI.Connection.Defaults.ProtocolVersion"/>
            <remarks>
            If this version is incompatible to DCS, a <see cref="T:DuetAPI.Connection.IncompatibleVersionException"/> is returned when a connection is being established
            </remarks>
        </member>
        <member name="T:DuetAPI.Connection.InitMessages.CommandInitMessage">
            <summary>
            Enter command-based connection mode
            In this conneciton mode nearly all of the commands in the <see cref="N:DuetAPI.Commands"/> namespace can be used
            </summary>
        </member>
        <member name="M:DuetAPI.Connection.InitMessages.CommandInitMessage.#ctor">
            <summary>
            Creates a new init message instance
            </summary>
        </member>
        <member name="T:DuetAPI.Connection.InitMessages.InterceptInitMessage">
            <summary>
            Enter interception mode
            Whenever a code is received, the connection must respond with one of
            - <cref see="DuetAPI.Commands.Cancel">Cancel</cref> to cancel the code
            - <cref see="DuetAPI.Commands.Ignore">Ignore</cref> to pass through the code without modifications
            - <cref see="DuetAPI.Commands.Resolve">Resolve</cref> to resolve the current code and to return a message
            In addition the interceptor may issue custom commands once a code has been received
            </summary>
            <remarks>
            If this connection mode is used to implement new G/M/T-codes, always call the <see cref="T:DuetAPI.Commands.Flush"/>
            command before further actions are started and make sure it returns <c>true</c> before the code is further
            processed. This step is mandatory to guarantee that the new code is executed when all other codes have finished
            and not when a code is being fed for the internal G-code buffer. If the flush command returns <c>false</c>, it
            is recommended to send <see cref="T:DuetAPI.Commands.Cancel"/> to resolve the command. DCS follows the same pattern for
            internally processed codes, too.
            If a code from a macro file is intercepted, make sure to set the <see cref="F:DuetAPI.Commands.CodeFlags.IsFromMacro"/>
            flag if new codes are inserted, else they will be started when the macro file(s) have finished. This step
            is obsolete if a <see cref="T:DuetAPI.Commands.SimpleCode"/> is inserted.
            </remarks>
        </member>
        <member name="M:DuetAPI.Connection.InitMessages.InterceptInitMessage.#ctor">
            <summary>
            Creates a new init message instance
            </summary>
        </member>
        <member name="P:DuetAPI.Connection.InitMessages.InterceptInitMessage.InterceptionMode">
            <summary>
            Defines in what mode commands are supposed to be intercepted
            </summary>
        </member>
        <member name="T:DuetAPI.Connection.InitMessages.ServerInitMessage">
            <summary>
            An instance of this class is sent by the server to the client in JSON format once a connection has been established.
            </summary>
        </member>
        <member name="P:DuetAPI.Connection.InitMessages.ServerInitMessage.Version">
            <summary>
            Version of the server-side API
            </summary>
        </member>
        <member name="P:DuetAPI.Connection.InitMessages.ServerInitMessage.Id">
            <summary>
            Unique connection ID assigned by the control server to allow clients to track their commands
            </summary>
        </member>
        <member name="T:DuetAPI.Connection.InitMessages.SubscribeInitMessage">
            <summary>
            Enter subscription mode and receive either the full object model or parts of it after every update
            </summary>
        </member>
        <member name="M:DuetAPI.Connection.InitMessages.SubscribeInitMessage.#ctor">
            <summary>
            Creates a new init message instance
            </summary>
        </member>
        <member name="P:DuetAPI.Connection.InitMessages.SubscribeInitMessage.SubscriptionMode">
            <summary>
            Type of the subscription
            </summary>
        </member>
        <member name="P:DuetAPI.Connection.InitMessages.SubscribeInitMessage.Filter">
            <summary>
            Optional filter path for <see cref="F:DuetAPI.Connection.SubscriptionMode.Patch"/> mode
            </summary>
            <remarks>
            The style of a filter is similar to XPath. For example, if you want to monitor only the current heater temperatures,
            you can use the filter expression "heat/heaters[*]/current". Wildcards are supported either for full names or indices.
            To get updates for an entire namespace, the ** wildcard can be used (for example heat/** for everything heat-related),
            however it can be only used at the end of a filter expression. Multiple filters can be used on one connection and they
            have to be delimited by one of these charaters: ['|', ',', ' ', '\r', '\n']
            </remarks>
        </member>
        <member name="T:DuetAPI.Connection.InterceptionMode">
            <summary>
            Type of the intercepting connection
            </summary>
            <seealso cref="T:DuetAPI.Connection.InitMessages.InterceptInitMessage"/>
        </member>
        <member name="F:DuetAPI.Connection.InterceptionMode.Pre">
            <summary>
            Intercept codes before they are internally processed by the control server
            </summary>
        </member>
        <member name="F:DuetAPI.Connection.InterceptionMode.Post">
            <summary>
            Intercept codes after the initial processing of the control server but before they are forwarded to the RepRapFirmware controller
            </summary>
        </member>
        <member name="F:DuetAPI.Connection.InterceptionMode.Executed">
            <summary>
            Receive a notification for executed codes. In this state the final result can be still changed
            </summary>
        </member>
        <member name="T:DuetAPI.Connection.SubscriptionMode">
            <summary>
            Type of the model subscription
            </summary>
            <seealso cref="T:DuetAPI.Connection.InitMessages.SubscribeInitMessage"/>
        </member>
        <member name="F:DuetAPI.Connection.SubscriptionMode.Full">
            <summary>
            Receive full object model after every update
            </summary>
            <remarks>
            Generic messages may or may not be included in the full object model. To keep track of messages reliably,
            it is strongly advised to create a subscription in <see cref="F:DuetAPI.Connection.SubscriptionMode.Patch"/> mode.
            </remarks>
        </member>
        <member name="F:DuetAPI.Connection.SubscriptionMode.Patch">
            <summary>
            Receive only updated JSON fragments of the object model
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.LinuxPropertyAttribute">
            <summary>
            Attribute used to mark properties that are overridden by the control server
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.ModelCollection">
            <summary>
            Helper class to keep track of individual model collection subtypes
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ModelCollection._derivedTypes">
            <summary>
            List of types that are derived from this class
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.ModelCollection.GetItemType(System.Type,System.Type@)">
            <summary>
            Check if the given type is derived from a <see cref="T:DuetAPI.Machine.ModelCollection`1"/> and return the corresponding item type
            </summary>
            <param name="type">Type to check</param>
            <param name="itemType">Item type</param>
            <returns>Whether the item type could be found</returns>
        </member>
        <member name="M:DuetAPI.Machine.ModelCollection.RegisterType(System.Type,System.Type)">
            <summary>
            Register another model collection type
            </summary>
            <param name="type">Specific collection type</param>
            <param name="itemType">Item type</param>
        </member>
        <member name="T:DuetAPI.Machine.ModelCollection`1">
            <summary>
            Generic container for object model arrays
            </summary>
            <typeparam name="T">Item type</typeparam>
        </member>
        <member name="M:DuetAPI.Machine.ModelCollection`1.#ctor">
            <summary>
            Constructor of this class
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.ModelCollection`1.ClearItems">
            <summary>
            Removes all items from the collection
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.ModelCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the change event handler
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:DuetAPI.Machine.ModelCollection`1.Clone">
            <summary>
            Create a clone of this list
            </summary>
            <returns>Cloned list</returns>
        </member>
        <member name="M:DuetAPI.Machine.ModelCollection`1.Assign(DuetAPI.Machine.ModelCollection{`0})">
            <summary>
            Assign this collection from another one
            </summary>
            <param name="from">Element to assign this instance from</param>
        </member>
        <member name="M:DuetAPI.Machine.ModelCollection`1.UpdateFromJson(System.Text.Json.JsonElement)">
            <summary>
            Update this collection from a given JSON array
            </summary>
            <param name="jsonElement">Element to update this intance from</param>
        </member>
        <member name="T:DuetAPI.Machine.ModelCollectionHelper">
            <summary>
            Internal untyped helper class for dealing with model collections
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.ModelCollectionHelper.Assign(System.Collections.IList,System.Type,System.Collections.IList)">
            <summary>
            Assign items to a given list
            </summary>
            <param name="list">List to assign to</param>
            <param name="itemType">Item type</param>
            <param name="from">List to assign from</param>
        </member>
        <member name="M:DuetAPI.Machine.ModelCollectionHelper.UpdateFromJson(System.Collections.IList,System.Type,System.Text.Json.JsonElement,System.Boolean)">
            <summary>
            Update a list from a given JSON array
            </summary>
            <param name="list">List to update</param>
            <param name="itemType">Item type</param>
            <param name="jsonElement">Element to update the intance from</param>
            <param name="ignoreSbcProperties">Whether SBC properties are ignored</param>
        </member>
        <member name="M:DuetAPI.Machine.ModelCollectionHelper.FindDiffs(System.Collections.IList,System.Collections.IList,System.Type)">
            <summary>
            Find the diffs between two lists
            </summary>
            <param name="oldList">Old list</param>
            <param name="newList">New list</param>
            <param name="itemType">Item type</param>
            <returns>Differences of the lists or null if they are equal</returns>
        </member>
        <member name="T:DuetAPI.Machine.ModelGrowingCollection">
            <summary>
            Helper class to keep track of individual model collection subtypes
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ModelGrowingCollection._derivedTypes">
            <summary>
            List of types that are derived from this class
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.ModelGrowingCollection.TypeMatches(System.Type)">
            <summary>
            Check if the given type is derived from a <see cref="T:DuetAPI.Machine.ModelCollection`1"/>
            </summary>
            <param name="type">Type to check</param>
            <returns>Whether the type is derived</returns>
        </member>
        <member name="M:DuetAPI.Machine.ModelGrowingCollection.RegisterType(System.Type)">
            <summary>
            Register another growing model collection type
            </summary>
            <param name="type">Specific collection type</param>
        </member>
        <member name="T:DuetAPI.Machine.ModelGrowingCollection`1">
            <summary>
            Generic list container to which items can be added or which can be cleared only
            </summary>
            <typeparam name="T">Item type</typeparam>
        </member>
        <member name="M:DuetAPI.Machine.ModelGrowingCollection`1.#ctor">
            <summary>
            Constructor of this class
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.ModelGrowingCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called after the collection has been changed but before the corresponding event has been raised
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:DuetAPI.Machine.ModelGrowingCollection`1.UpdateFromJson(System.Text.Json.JsonElement)">
            <summary>
            Update this collection from a given JSON array
            </summary>
            <param name="jsonElement">Element to update this intance from</param>
        </member>
        <member name="T:DuetAPI.Machine.ModelGrowingCollectionHelper">
            <summary>
            Internal untyped helper class for dealing with growing model collections
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.ModelGrowingCollectionHelper.Assign(System.Collections.IList,System.Collections.IList)">
            <summary>
            Assign items to a given list
            </summary>
            <param name="list">List to assign to</param>
            <param name="from">List to assign from</param>
        </member>
        <member name="M:DuetAPI.Machine.ModelGrowingCollectionHelper.UpdateFromJson(System.Collections.IList,System.Type,System.Text.Json.JsonElement,System.Boolean)">
            <summary>
            Update a list from a given JSON array
            </summary>
            <param name="list">List to update</param>
            <param name="itemType">Item type</param>
            <param name="jsonElement">Element to update the intance from</param>
            <param name="ignoreSbcProperties">Whether SBC properties are ignored</param>
        </member>
        <member name="T:DuetAPI.Machine.ModelObject">
            <summary>
            Base class for machine model properties
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ModelObject._propertyInfos">
            <summary>
            Cached dictionary of derived types vs JSON property names vs property descriptors
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ModelObject.JsonProperties">
            <summary>
            Get the cached JSON properties of this type
            </summary>
            <returns>Properties of this type</returns>
        </member>
        <member name="M:DuetAPI.Machine.ModelObject.#ctor">
            <summary>
            Default constructor to be called from derived classes
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.ModelObject.PropertyChanging">
            <summary>
            Event that is triggered when a property is being changed
            </summary>
        </member>
        <member name="E:DuetAPI.Machine.ModelObject.PropertyChanged">
            <summary>
            Event that is triggered when a property has been changed
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.ModelObject.SetPropertyValue``1(``0@,``0,System.String)">
            <summary>
            Method to update a property value internally
            </summary>
            <param name="propertyStorage">Reference to the variable that holds the current value</param>
            <param name="value">New property value</param>
            <param name="propertyName">Name of the property</param>
        </member>
        <member name="M:DuetAPI.Machine.ModelObject.Assign(DuetAPI.Machine.ModelObject)">
            <summary>
            Method to assign the value of one type to another
            </summary>
            <param name="from">Other object</param>
        </member>
        <member name="M:DuetAPI.Machine.ModelObject.Clone">
            <summary>
            Create a clone of this instance
            </summary>
            <returns>Cloned object</returns>
        </member>
        <member name="M:DuetAPI.Machine.ModelObject.UpdateFromJson(System.Text.Json.JsonElement)">
            <summary>
            Update this instance from a given JSON element
            </summary>
            <param name="jsonElement">Element to update this intance from</param>
            <returns>Updated instance</returns>
        </member>
        <member name="M:DuetAPI.Machine.ModelObject.UpdateFromJson(System.Text.Json.JsonElement,System.Boolean)">
            <summary>
            Update this instance from a given JSON element
            </summary>
            <param name="jsonElement">Element to update this intance from</param>
            <param name="ignoreSbcProperties">Whether SBC properties are ignored</param>
            <returns>Updated instance</returns>
            <exception cref="T:System.Text.Json.JsonException">Failed to deserialize data</exception>
        </member>
        <member name="M:DuetAPI.Machine.ModelObject.MakeUtf8Patch(DuetAPI.Machine.ModelObject)">
            <summary>
            Create a UTF8-encoded JSON patch to bring an old instance to this state
            </summary>
            <param name="old">Old object state</param>
            <returns>JSON patch</returns>
        </member>
        <member name="M:DuetAPI.Machine.ModelObject.MakeStringPatch(DuetAPI.Machine.ModelObject)">
            <summary>
            Create a string-encoded JSON patch to bring an old instance to this state
            </summary>
            <param name="old">Old object state</param>
            <returns>JSON patch</returns>
        </member>
        <member name="M:DuetAPI.Machine.ModelObject.MakePatch(DuetAPI.Machine.ModelObject)">
            <summary>
            Create a patch to update an old instance to this state
            </summary>
            <param name="old">Old object state</param>
            <returns>Differences between this and other or null if they are equal</returns>
        </member>
        <member name="T:DuetAPI.Machine.Board">
            <summary>
            Information about a connected board
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Board.BootloaderFileName">
            <summary>
            Filename of the firmware binary
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Board.CanAddress">
            <summary>
            CAN address of this board or null if not applicable
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Board.FirmwareDate">
            <summary>
            Date of the firmware build
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Board.FirmwareFileName">
            <summary>
            Filename of the firmware binary
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Board.FirmwareName">
            <summary>
            Name of the firmware build
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Board.FirmwareVersion">
            <summary>
            Version of the firmware build
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Board.IapFileNameSBC">
            <summary>
            Filename of the IAP binary that is used for updates from the SBC or null if unsupported
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Board.IapFileNameSD">
            <summary>
            Filename of the IAP binary that is used for updates from the SD card or null if unsupported
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Board.MaxHeaters">
            <summary>
            Maximum number of heaters this board can control
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Board.MaxMotors">
            <summary>
            Maximum number of motors this board can drive
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Board.McuTemp">
            <summary>
            Minimum, maximum, and current temperatures of the MCU
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Board.Name">
            <summary>
            Full name of the board
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Board.ShortName">
            <summary>
            Short name of this board
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Board.Supports12864">
            <summary>
            Indicates if this board supports external 12864 displays
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Board.UniqueId">
            <summary>
            Unique identifier of the board
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Board.V12">
            <summary>
            Minimum, maximum, and current voltages on the 12V rail
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Board.VIn">
            <summary>
            Minimum, maximum, and current voltages on the input rail
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.MinMaxCurrent`1">
            <summary>
            Provides minimum, maximum and current values
            </summary>
            <typeparam name="T">ValueType of each property</typeparam>
        </member>
        <member name="P:DuetAPI.Machine.MinMaxCurrent`1.Current">
            <summary>
            Current value
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MinMaxCurrent`1.Min">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MinMaxCurrent`1.Max">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Directories">
            <summary>
            Information about the configured directories
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Directories.Filaments">
            <summary>
            Path to the filaments directory
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Directories.Firmware">
            <summary>
            Path to the firmware directory
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Directories.GCodes">
            <summary>
            Path to the G-Codes directory
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Directories.Macros">
            <summary>
            Path to the macros directory
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Directories.Menu">
            <summary>
            Path to the menu directory
            </summary>
            <remarks>
            Intended for 12864 displays but currently unused in DSF. It is only needed for the Duet Maestro + DWC
            </remarks>
        </member>
        <member name="P:DuetAPI.Machine.Directories.Scans">
            <summary>
            Path to the scans directory
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Directories.System">
            <summary>
            Path to the system directory
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Directories.Web">
            <summary>
            Path to the web directory
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Fan">
            <summary>
            Class representing information about an attached fan
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Fan.ActualValue">
            <summary>
            Value of this fan (0..1 or -1 if unknown)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Fan.Blip">
            <summary>
            Blip value indicating how long the fan is supposed to run at 100% when turning it on to get it started (in s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Fan.Frequency">
            <summary>
            Configured frequency of this fan (in Hz)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Fan.Max">
            <summary>
            Maximum value of this fan (0..1)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Fan.Min">
            <summary>
            Minimum value of this fan (0..1)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Fan.Name">
            <summary>
            Name of the fan
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Fan.RequestedValue">
            <summary>
            Requested value for this fan on a scale between 0 to 1
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Fan.Rpm">
            <summary>
            Current RPM of this fan or -1 if unknown/unset
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Fan.Thermostatic">
            <summary>
            Thermostatic control parameters
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.FanThermostaticControl">
            <summary>
            Thermostatic parameters of a fan
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.FanThermostaticControl.Heaters">
            <summary>
            List of the heaters to monitor (indices)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.FanThermostaticControl.HighTemperature">
            <summary>
            Upper temperature range required to turn on the fan (in C)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.FanThermostaticControl.LowTemperature">
            <summary>
            Lower temperature range required to turn on the fan (in C)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Heat">
            <summary>
            Information about the heat subsystem
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Heat.BedHeaters">
            <summary>
            List of configured bed heaters (indices)
            </summary>
            <seealso cref="T:DuetAPI.Machine.Heater"/>
            <remarks>
            Items may be -1 if unconfigured
            </remarks>
        </member>
        <member name="P:DuetAPI.Machine.Heat.ChamberHeaters">
            <summary>
            List of configured chamber heaters (indices)
            </summary>
            <seealso cref="T:DuetAPI.Machine.Heater"/>
            <remarks>
            Items may be -1 if unconfigured
            </remarks>
        </member>
        <member name="P:DuetAPI.Machine.Heat.ColdExtrudeTemperature">
            <summary>
            Minimum required temperature for extrusion moves (in C)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Heat.ColdRetractTemperature">
            <summary>
            Minimum required temperature for retraction moves (in C)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Heat.Heaters">
            <summary>
            List of configured heaters
            </summary>
            <seealso cref="T:DuetAPI.Machine.Heater"/>
        </member>
        <member name="T:DuetAPI.Machine.Heater">
            <summary>
            Information about a heater
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Heater.Active">
            <summary>
            Active temperature of the heater (in C)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Heater.Current">
            <summary>
            Current temperature of the heater (in C)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Heater.Max">
            <summary>
            Maximum temperature allowed for this heater (in C)
            </summary>
            <remarks>
            This is only temporary and should be replaced by a representation of the heater protection as in RRF
            </remarks>
        </member>
        <member name="P:DuetAPI.Machine.Heater.Min">
            <summary>
            Minimum temperature allowed for this heater (in C)
            </summary>
            <remarks>
            This is only temporary and should be replaced by a representation of the heater protection as in RRF
            </remarks>
        </member>
        <member name="P:DuetAPI.Machine.Heater.Model">
            <summary>
            Information about the heater model
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Heater.Monitors">
            <summary>
            Monitors of this heater
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Heater.Name">
            <summary>
            Name of the heater or null if unset
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Heater.Sensor">
            <summary>
            Sensor number of this heater or -1 if not configured
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Heater.Standby">
            <summary>
            Standby temperature of the heater (in C)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Heater.State">
            <summary>
            State of the heater
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.HeaterModel">
            <summary>
            Information about the way the heater heats up
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterModel.DeadTime">
            <summary>
            Dead time
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterModel.Enabled">
            <summary>
            Indicates if this heater is enabled
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterModel.Gain">
            <summary>
            Gain value
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterModel.Inverted">
            <summary>
            Indicates if the heater PWM signal is inverted
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterModel.MaxPwm">
            <summary>
            Maximum PWM value
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterModel.PID">
            <summary>
            Details about the PID controller
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterModel.StandardVoltage">
            <summary>
            Standard voltage or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterModel.TimeConstant">
            <summary>
            Time constant
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.HeaterModelPID">
            <summary>
            Details about the PID model of a heater
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterModelPID.Overridden">
            <summary>
            Indicates if custom PID values are used
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterModelPID.P">
            <summary>
            Proportional value of the PID regulator
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterModelPID.I">
            <summary>
            Integral value of the PID regulator
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterModelPID.D">
            <summary>
            Derivative value of the PID regulator
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterModelPID.Used">
            <summary>
            Indicates if PID control is being used
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.HeaterMonitor">
            <summary>
            Information about a heater monitor
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterMonitor.Action">
            <summary>
            Action to perform when the trigger condition is met
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterMonitor.Condition">
            <summary>
            Condition to meet to perform an action
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HeaterMonitor.Limit">
            <summary>
            Limit threshold for this heater monitor
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.HeaterMonitorAction">
            <summary>
            Action to take when a heater monitor is triggered
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HeaterMonitorAction.GenerateFault">
            <summary>
            Generate a heater fault
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HeaterMonitorAction.PermanentSwitchOff">
            <summary>
            Permanently switch off the heater
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HeaterMonitorAction.TemporarySwitchOff">
            <summary>
            Temporarily switch off the heater until the condition is no longer met
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HeaterMonitorAction.ShutDown">
            <summary>
            Shut down the printer
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.HeaterMonitorCondition">
            <summary>
            Trigger condition for a heater monitor
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HeaterMonitorCondition.Disabled">
            <summary>
            Heater monitor is disabled
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HeaterMonitorCondition.TooHigh">
            <summary>
            Limit temperature has been exceeded
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HeaterMonitorCondition.TooLow">
            <summary>
            Limit temperature is too low
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HeaterMonitorCondition.Undefined">
            <summary>
            Unknown condition
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.HeaterState">
            <summary>
            State of a heater
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HeaterState.Off">
            <summary>
            Heater is turned off
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HeaterState.Standby">
            <summary>
            Heater is in standby mode
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HeaterState.Active">
            <summary>
            Heater is active
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HeaterState.Fault">
            <summary>
            Heater faulted
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HeaterState.Tuning">
            <summary>
            Heater is being tuned
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HeaterState.Offline">
            <summary>
            Heater is offline
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.HttpEndpoint">
            <summary>
            Class representing an extra HTTP endpoint
            </summary>
            <seealso cref="T:DuetAPI.Commands.AddHttpEndpoint"/>
            <seealso cref="T:DuetAPI.Commands.RemoveHttpEndpoint"/>
        </member>
        <member name="P:DuetAPI.Machine.HttpEndpoint.EndpointType">
            <summary>
            HTTP type of this endpoint
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HttpEndpoint.Namespace">
            <summary>
            Namespace of the endpoint
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HttpEndpoint.Path">
            <summary>
            Path to the endpoint
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HttpEndpoint.UnixSocket">
            <summary>
            Path to the UNIX socket
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.HttpEndpointType">
            <summary>
            Enumeration of supported HTTP request types
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HttpEndpointType.GET">
            <summary>
            HTTP GET request
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HttpEndpointType.POST">
            <summary>
            HTTP POST request
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HttpEndpointType.PUT">
            <summary>
            HTTP PUT request
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HttpEndpointType.PATCH">
            <summary>
            HTTP PATCH request
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HttpEndpointType.TRACE">
            <summary>
            HTTP TRACE request
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HttpEndpointType.DELETE">
            <summary>
            HTTP DELETE request
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HttpEndpointType.OPTIONS">
            <summary>
            HTTP DELETE request
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.HttpEndpointType.WebSocket">
            <summary>
            WebSocket request. This has not been implemented yet but it is reserved for future usage
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Compatibility">
            <summary>
            Compatibility level for emulation
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.Compatibility.Default">
            <summary>
            No emulation (same as RepRapFirmware)
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.Compatibility.RepRapFirmware">
            <summary>
            Emulating RepRapFirmware
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.Compatibility.Marlin">
            <summary>
            Emulating Marlin
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.Compatibility.Teacup">
            <summary>
            Emulating Teacup
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.Compatibility.Sprinter">
            <summary>
            Emulating Sprinter
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.Compatibility.Repetier">
            <summary>
            Emulating Repetier
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.Compatibility.NanoDLP">
            <summary>
            Special emulation for NanoDLP
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.DistanceUnit">
            <summary>
            Distance unit used for positioning
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.DistanceUnit.MM">
            <summary>
            Millimeters
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.DistanceUnit.Inch">
            <summary>
            Inches
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.InputChannel">
            <summary>
            Information about a G/M/T-code channel
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.InputChannel.AxesRelative">
            <summary>
            Whether relative positioning is being used
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.InputChannel.Compatibility">
            <summary>
            Emulation used on this channel
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.InputChannel.DistanceUnit">
            <summary>
            Whether inches are being used instead of mm
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.InputChannel.DrivesRelative">
            <summary>
            Whether relative extrusion is being used
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.InputChannel.FeedRate">
            <summary>
            Current feedrate in mm/s
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.InputChannel.InMacro">
            <summary>
            Whether a macro file is being processed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.InputChannel.Name">
            <summary>
            Name of this channel
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.InputChannel.StackDepth">
            <summary>
            Depth of the stack
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.InputChannel.State">
            <summary>
            State of this input channel
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.InputChannel.LineNumber">
            <summary>
            Number of the current line
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.InputChannel.Volumetric">
            <summary>
            Whether volumetric extrusion is being used
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.InputChannelState">
            <summary>
            State of a channel
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.InputChannelState.AwaitingAcknowledgement">
            <summary>
            Awaiting message acknowledgement
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.InputChannelState.Idle">
            <summary>
            Channel is idle
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.InputChannelState.Executing">
            <summary>
            Channel is executing a G/M/T-code
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.InputChannelState.Waiting">
            <summary>
            Channel is waiting for more data
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.InputChannelState.Reading">
            <summary>
            Channel is reading a G/M/T-code
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Inputs">
            <summary>
            List holding information about the available G/M/T-code channels
            </summary>
            <seealso cref="T:DuetAPI.Machine.InputChannel"/>
            <remarks>
            During runtime some elements may be replaced with null if they are not available
            </remarks>
        </member>
        <member name="F:DuetAPI.Machine.Inputs.Total">
            <summary>
            Total number of supported input channels
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.Inputs.#ctor">
            <summary>
            Constructor of this class
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Inputs.HTTP">
            <summary>
            G/M/T-code channel for HTTP requests
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Inputs.Telnet">
            <summary>
            G/M/T-code channel for Telnet requests
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Inputs.File">
            <summary>
            G/M/T-code channel for file prints
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Inputs.USB">
            <summary>
            G/M/T-code channel for USB
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Inputs.Aux">
            <summary>
            G/M/T-code channel for AUX (UART/PanelDue)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Inputs.Trigger">
            <summary>
            G/M/T-code channel for running triggers or config.g
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Inputs.Queue">
            <summary>
            G/M/T-code channel for the code queue
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Inputs.LCD">
            <summary>
            G/M/T-code channel for AUX (UART/PanelDue)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Inputs.SBC">
            <summary>
            Default G/M/T-code channel for generic codes
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Inputs.Daemon">
            <summary>
            Code channel that executes the daemon process
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Inputs.Autopause">
            <summary>
            G/M/T-code chanel for auto pause events
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Inputs.Item(DuetAPI.CodeChannel)">
            <summary>
            Index operator for easy access via an <see cref="T:DuetAPI.CodeChannel"/> value
            </summary>
            <param name="channel">Channel to retrieve information about</param>
            <returns>Information about the code channel</returns>
        </member>
        <member name="T:DuetAPI.Machine.Build">
            <summary>
            Information about the current build
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Build.CurrentObject">
            <summary>
            Index of the current object being printed or -1 if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Build.M486Names">
            <summary>
            Whether M486 names are being used
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Build.M486Numbers">
            <summary>
            Whether M486 numbers are being used
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Build.Objects">
            <summary>
            List of detected build objects
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.BuildObject">
            <summary>
            Information about a detected build object
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.BuildObject.Cancelled">
            <summary>
            Indicates if this build object is cancelled
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.BuildObject.Name">
            <summary>
            Name of the build object (if any)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.BuildObject.X">
            <summary>
            X coordinates of the build object (in mm or null if not found)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.BuildObject.Y">
            <summary>
            Y coordinates of the build object (in mm or null if not found)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Job">
            <summary>
            Information about the current job
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.Build">
            <summary>
            Information about the current build or null if not available
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.Duration">
            <summary>
            Total duration of the current job (in s or null)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.File">
            <summary>
            Information about the file being processed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.FilePosition">
            <summary>
            Current position in the file being processed (in bytes or null)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.FirstLayerDuration">
            <summary>
            Duration of the first layer (in s or null)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.LastDuration">
            <summary>
            Total duration of the last job (in s or null)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.LastFileName">
            <summary>
            Name of the last file processed or null if none
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.LastFileAborted">
            <summary>
            Indicates if the last file was aborted (unexpected cancellation)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.LastFileCancelled">
            <summary>
            Indicates if the last file was cancelled (user cancelled)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.LastFileSimulated">
            <summary>
            Indicates if the last file processed was simulated
            </summary>
            <remarks>This is not set if the file was aborted or cancelled</remarks>
        </member>
        <member name="P:DuetAPI.Machine.Job.Layer">
            <summary>
            Number of the current layer or null not available
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.LayerTime">
            <summary>
            Time elapsed since the beginning of the current layer (in s or null)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.Layers">
            <summary>
            Information about the past layers
            </summary>
            <seealso cref="P:DuetAPI.Machine.Job.Layer"/>
        </member>
        <member name="P:DuetAPI.Machine.Job.TimesLeft">
            <summary>
            Estimated times left
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Job.WarmUpDuration">
            <summary>
            Time needed to heat up the heaters (in s or null)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Layer">
            <summary>
            Information about a layer from a file being printed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Layer.Duration">
            <summary>
            Duration of the layer (in s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Layer.Filament">
            <summary>
            Actual amount of filament extruded during this layer (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Layer.FractionPrinted">
            <summary>
            Fraction of the file printed during this layer (0..1)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Layer.Height">
            <summary>
            Height of the layer (in mm or 0 if unknown)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.ParsedFileInfo">
            <summary>
            Holds information about a parsed G-code file
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ParsedFileInfo.Filament">
            <summary>
            Filament consumption per extruder drive (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ParsedFileInfo.FileName">
            <summary>
            The filename of the G-code file
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ParsedFileInfo.FirstLayerHeight">
            <summary>
            Height of the first layer or 0 if not found (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ParsedFileInfo.GeneratedBy">
            <summary>
            Name of the application that generated this file
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ParsedFileInfo.Height">
            <summary>
            Build height of the G-code job or 0 if not found (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ParsedFileInfo.LastModified">
            <summary>
            Value indicating when the file was last modified or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ParsedFileInfo.LayerHeight">
            <summary>
            Height of each other layer or 0 if not found (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ParsedFileInfo.NumLayers">
            <summary>
            Number of total layers or 0 if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ParsedFileInfo.PrintTime">
            <summary>
            Estimated print time (in s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ParsedFileInfo.SimulatedTime">
            <summary>
            Estimated print time from G-code simulation (in s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ParsedFileInfo.Size">
            <summary>
            Size of the file
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.TimesLeft">
            <summary>
            Estimations about the times left
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.TimesLeft.Filament">
            <summary>
            Time left based on filament consumption (in s or null)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.TimesLeft.File">
            <summary>
            Time left based on file progress (in s or null)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.TimesLeft.Layer">
            <summary>
            Time left based on the layer progress (in s or null)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Limits">
            <summary>
            Machine configuration limits
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.Axes">
            <summary>
            Maximum number of axes or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.AxesPlusExtruders">
            <summary>
            Maximum number of axes + extruders or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.BedHeaters">
            <summary>
            Maximum number of bed heaters or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.Boards">
            <summary>
            Maximum number of boards or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.ChamberHeaters">
            <summary>
            Maximum number of chamber heaters or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.Drivers">
            <summary>
            Maximum number of drivers or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.DriversPerAxis">
            <summary>
            Maximum number of drivers per axis or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.Extruders">
            <summary>
            Maximum number of extruders or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.ExtrudersPerTool">
            <summary>
            Maximum number of extruders per tool or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.Fans">
            <summary>
            Maximum number of fans or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.GpInPorts">
            <summary>
            Maximum number of general-purpose input ports or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.GpOutPorts">
            <summary>
            Maximum number of general-purpose output ports or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.Heaters">
            <summary>
            Maximum number of heaters or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.HeatersPerTool">
            <summary>
            Maximum number of heaters per tool or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.MonitorsPerHeater">
            <summary>
            Maximum number of monitors per heater or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.RestorePoints">
            <summary>
            Maximum number of restore points or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.Sensors">
            <summary>
            Maximum number of sensors or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.Spindles">
            <summary>
            Maximum number of spindles or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.Tools">
            <summary>
            Maximum number of tools or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.TrackedObjects">
            <summary>
            Maximum number of tracked objects or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.Triggers">
            <summary>
            Maximum number of triggers or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.Volumes">
            <summary>
            Maximum number of volumes or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.Workplaces">
            <summary>
            Maximum number of workplaces or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.ZProbeProgramBytes">
            <summary>
            Maximum number of Z-probe programming bytes or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Limits.ZProbes">
            <summary>
            Maximum number of Z-probes or null if unknown
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.MachineModel">
            <summary>
            Representation of the full machine model as maintained by DCS
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Boards">
            <summary>
            List of connected boards
            </summary>
            <seealso cref="T:DuetAPI.Machine.Board"/>
            <remarks>
            The first item represents the main board
            </remarks>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Directories">
            <summary>
            Information about the individual directories
            </summary>
            <remarks>
            This may not be available in RepRapFirmware if no mass storages are available
            </remarks>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Fans">
            <summary>
            List of configured fans
            </summary>
            <seealso cref="T:DuetAPI.Machine.Fan"/>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Heat">
            <summary>
            Information about the heat subsystem
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.HttpEndpoints">
            <summary>
            List of registered third-party HTTP endpoints
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Inputs">
            <summary>
            Information about every available G/M/T-code channel
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Job">
            <summary>
            Information about the current job
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Limits">
            <summary>
            Machine configuration limits
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Messages">
            <summary>
            Generic messages that do not belong explicitly to codes being executed.
            This includes status messages, generic errors and outputs generated by M118
            </summary>
            <seealso cref="T:DuetAPI.Machine.Message"/>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Move">
            <summary>
            Information about the move subsystem
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Network">
            <summary>
            Information about connected network adapters
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Scanner">
            <summary>
            Information about the 3D scanner subsystem
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Sensors">
            <summary>
            Information about connected sensors including Z-probes and endstops
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Spindles">
            <summary>
            List of configured CNC spindles
            </summary>
            <seealso cref="T:DuetAPI.Machine.Spindle"/>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.State">
            <summary>
            Information about the machine state
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Tools">
            <summary>
            List of configured tools
            </summary>
            <seealso cref="T:DuetAPI.Machine.Tool"/>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.UserSessions">
            <summary>
            List of user sessions
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.UserVariables">
            <summary>
            List of user-defined variables
            </summary>
            <seealso cref="T:DuetAPI.Machine.UserVariable"/>
        </member>
        <member name="P:DuetAPI.Machine.MachineModel.Volumes">
            <summary>
            List of available mass storages
            </summary>
            <seealso cref="T:DuetAPI.Machine.Volume"/>
        </member>
        <member name="M:DuetAPI.Machine.MachineModel.UpdateFromFirmwareModel(System.String,System.Text.Json.JsonElement)">
            <summary>
            Update a specific key of this instance from a given JSON element as provided by the firmware
            </summary>
            <param name="key">Property name to update</param>
            <param name="jsonElement">Element to update this intance from</param>
            <returns>Whether the key could be updated</returns>
        </member>
        <member name="M:DuetAPI.Machine.MachineModel.ToString">
            <summary>
            Convert this instance to a JSON text
            </summary>
            <returns>JSON object</returns>
        </member>
        <member name="M:DuetAPI.Machine.MachineModel.ToUtf8Json">
            <summary>
            Serialize this instance to a UTF-8 string
            </summary>
            <returns></returns>
        </member>
        <member name="T:DuetAPI.Machine.Message">
            <summary>
            Generic container for messages
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.Message.#ctor">
            <summary>
            Create a new message
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.Message.#ctor(DuetAPI.Machine.MessageType,System.String)">
            <summary>
            Create a new message
            </summary>
            <param name="type">Message type</param>
            <param name="content">Message content</param>
        </member>
        <member name="P:DuetAPI.Machine.Message.Time">
            <summary>
            Time at which the message was generated
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Message.Type">
            <summary>
            Type of this message
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Message.Content">
            <summary>
            Content of this message
            </summary>
            <remarks>May be empty but not null</remarks>
        </member>
        <member name="M:DuetAPI.Machine.Message.ToString">
            <summary>
            Converts this message to a RepRapFirmware-style message
            </summary>
            <returns>RepRapFirmware-style message</returns>
        </member>
        <member name="T:DuetAPI.Machine.MessageType">
            <summary>
            Type of a generic message
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MessageType.Success">
            <summary>
            This is a success message
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MessageType.Warning">
            <summary>
            This is a warning message
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MessageType.Error">
            <summary>
            This is an error message
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Axis">
            <summary>
            Information about a configured axis
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.Axis.Letters">
            <summary>
            List of supported axis letters
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.Acceleration">
            <summary>
            Acceleration of this axis (in mm/s^2)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.Babystep">
            <summary>
            Babystep amount (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.Current">
            <summary>
            Motor current (in mA)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.Drivers">
            <summary>
            List of the assigned drivers
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.Homed">
            <summary>
            Whether or not the axis is homed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.Jerk">
            <summary>
            Motor jerk (in mm/s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.Letter">
            <summary>
            Letter of the axis (always upper-case)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.MachinePosition">
            <summary>
            Current machine position (in mm) or null if unknown/unset
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.Max">
            <summary>
            Maximum travel of this axis (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.MaxProbed">
            <summary>
            Whether the axis maximum was probed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.Microstepping">
            <summary>
            Microstepping configuration
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.Min">
            <summary>
            Minimum travel of this axis (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.MinProbed">
            <summary>
            Whether the axis minimum was probed
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.Speed">
            <summary>
            Maximum speed (in mm/s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.StepsPerMm">
            <summary>
            Number of microsteps per mm
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.UserPosition">
            <summary>
            Current user position (in mm) or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.Visible">
            <summary>
            Whether or not the axis is visible
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Axis.WorkplaceOffsets">
            <summary>
            Offsets of this axis for each workplace (in mm)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.CurrentMove">
            <summary>
            Information about the current move
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.CurrentMove.Acceleration">
            <summary>
            Acceleration of the current move (in mm/s^2)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.CurrentMove.Deceleration">
            <summary>
            Deceleration of the current move (in mm/s^2)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.CurrentMove.LaserPwm">
            <summary>
            Laser PWM of the current move (0..1) or null if not applicable
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.CurrentMove.RequestedSpeed">
            <summary>
            Requested speed of the current move (in mm/s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.CurrentMove.TopSpeed">
            <summary>
            Top speed of the current move (in mm/s)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.DAA">
            <summary>
            Information about dynamic acceleration adjustment
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.DAA.Enabled">
            <summary>
            Indicates if DAA is enabled
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.DAA.MinimumAcceleration">
            <summary>
            Minimum acceleration allowed (in mm/s^2)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.DAA.Period">
            <summary>
            Period of the ringing that is supposed to be cancelled (in s)
            </summary>
            <remarks>
            This is the reciprocal of the configured ringing frequency
            </remarks>
        </member>
        <member name="T:DuetAPI.Machine.Extruder">
            <summary>
            Information about an extruder drive
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Extruder.Acceleration">
            <summary>
            Acceleration of this extruder (in mm/s^2)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Extruder.Current">
            <summary>
            Motor current (in mA)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Extruder.Driver">
            <summary>
            Assigned driver
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Extruder.Filament">
            <summary>
            Name of the currently loaded filament
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Extruder.Factor">
            <summary>
            Extrusion factor to use (0..1 or greater)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Extruder.Jerk">
            <summary>
            Motor jerk (in mm/s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Extruder.Microstepping">
            <summary>
            Microstepping configuration
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Extruder.Nonlinear">
            <summary>
            Nonlinear extrusion parameters (see M592)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Extruder.Position">
            <summary>
            Extruder position (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Extruder.PressureAdvance">
            <summary>
            Pressure advance
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Extruder.RawPosition">
            <summary>
            Raw extruder position without extrusion factor applied (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Extruder.Speed">
            <summary>
            Maximum speed (in mm/s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Extruder.StepsPerMm">
            <summary>
            Number of microsteps per mm
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.ExtruderNonlinear">
            <summary>
            Nonlinear extrusion parameters (see M592)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ExtruderNonlinear.A">
            <summary>
            A coefficient in the extrusion formula
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ExtruderNonlinear.B">
            <summary>
            B coefficient in the extrusion formula
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ExtruderNonlinear.UpperLimit">
            <summary>
            Upper limit of the nonlinear extrusion compensation
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.CoreKinematics">
            <summary>
            Information about core kinematics
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.CoreKinematics.#ctor">
            <summary>
            Constructor of this class
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.CoreKinematics.ForwardMatrix">
            <summary>
            Forward matrix
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.CoreKinematics.InverseMatrix">
            <summary>
            Inverse matrix
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.DeltaKinematics">
            <summary>
            Delta kinematics
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.DeltaKinematics.DeltaRadius">
            <summary>
            Delta radius (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.DeltaKinematics.HomedHeight">
            <summary>
            Homed height of a delta printer in mm
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.DeltaKinematics.PrintRadius">
            <summary>
            Print radius for Hangprinter and Delta geometries (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.DeltaKinematics.Towers">
            <summary>
            Delta tower properties
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.DeltaKinematics.XTilt">
            <summary>
            How much Z needs to be raised for each unit of movement in the +X direction
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.DeltaKinematics.YTilt">
            <summary>
            How much Z needs to be raised for each unit of movement in the +Y direction
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.DeltaTower">
            <summary>
            Delta tower properties
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.DeltaTower.AngleCorrection">
            <summary>
            Tower position corrections (in degrees)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.DeltaTower.Diagonal">
            <summary>
            Diagonal rod length (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.DeltaTower.EndstopAdjustment">
            <summary>
            Deviation of the ideal endstop position (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.DeltaTower.XPos">
            <summary>
            X coordinate of this tower (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.DeltaTower.YPos">
            <summary>
            Y coordinate of this tower (in mm)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.HangprinterKinematics">
            <summary>
            Information about hangprinter kinematics
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HangprinterKinematics.AnchorA">
            <summary>
            A anchor
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HangprinterKinematics.AnchorB">
            <summary>
            B anchor
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HangprinterKinematics.AnchorC">
            <summary>
            C anchor
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HangprinterKinematics.AnchorDz">
            <summary>
            Dz anchor
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.HangprinterKinematics.PrintRadius">
            <summary>
            Print radius (in mm)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Kinematics">
            <summary>
            Information about the configured geometry
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Kinematics.Name">
            <summary>
            Currently configured geometry type
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.Kinematics.GetKinematicsType(DuetAPI.Machine.KinematicsName)">
            <summary>
            Figure out the required type for the given kinematics name
            </summary>
            <param name="name">Kinematics name</param>
            <returns>Required type</returns>
        </member>
        <member name="M:DuetAPI.Machine.Kinematics.UpdateFromJson(System.Text.Json.JsonElement,System.Boolean)">
            <summary>
            Update this instance from a given JSON element
            </summary>
            <param name="jsonElement">Element to update this intance from</param>
            <param name="ignoreSbcProperties">Whether SBC properties are ignored</param>
            <returns>Updated instance</returns>
            <exception cref="T:System.Text.Json.JsonException">Failed to deserialize data</exception>
        </member>
        <member name="T:DuetAPI.Machine.KinematicsName">
            <summary>
            Enumeration of supported kinematics
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.KinematicsName.Cartesian">
            <summary>
            Cartesian
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.KinematicsName.CoreXY">
            <summary>
            CoreXY
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.KinematicsName.CoreXYU">
            <summary>
            CoreXY with extra U axis
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.KinematicsName.CoreXYUV">
            <summary>
            CoreXY with extra UV axes
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.KinematicsName.CoreXZ">
            <summary>
            CoreXZ
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.KinematicsName.MarkForged">
            <summary>
            MarkForged
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.KinematicsName.FiveBarScara">
            <summary>
            Five-bar SCARA
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.KinematicsName.Hangprinter">
            <summary>
            Hangprinter
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.KinematicsName.Delta">
            <summary>
            Linear Delta
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.KinematicsName.Polar">
            <summary>
            Polar
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.KinematicsName.RotaryDelta">
            <summary>
            Rotary delta
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.KinematicsName.Scara">
            <summary>
            SCARA
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.KinematicsName.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.KinematicsNameConverter">
            <summary>
            Class to convert a <see cref="T:DuetAPI.Machine.KinematicsName"/> to and from JSON
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.KinematicsNameConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read a <see cref="T:DuetAPI.Machine.KinematicsName"/> from JSON
            </summary>
            <param name="reader">JSON reader</param>
            <param name="typeToConvert">Type to convert</param>
            <param name="options">Serializer options</param>
            <returns>Read value</returns>
        </member>
        <member name="M:DuetAPI.Machine.KinematicsNameConverter.Write(System.Text.Json.Utf8JsonWriter,DuetAPI.Machine.KinematicsName,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write a <see cref="T:DuetAPI.Machine.KinematicsName"/> to JSON
            </summary>
            <param name="writer">JSON writer</param>
            <param name="value">Value to serialize</param>
            <param name="options">Write options</param>
        </member>
        <member name="T:DuetAPI.Machine.Microstepping">
            <summary>
            Microstepping configuration
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Microstepping.Interpolated">
            <summary>
            Indicates if the stepper driver uses interpolation
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Microstepping.Value">
            <summary>
            Microsteps per full step
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.MotorsIdleControl">
            <summary>
            Idle factor parameters for automatic motor current reduction
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MotorsIdleControl.Timeout">
            <summary>
            Idle timeout after which the stepper motor currents are reduced (in s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MotorsIdleControl.Factor">
            <summary>
            Motor current reduction factor (0..1)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Move">
            <summary>
            Information about the move subsystem
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Move.Axes">
            <summary>
            List of the configured axes
            </summary>
            <seealso cref="T:DuetAPI.Machine.Axis"/>
        </member>
        <member name="P:DuetAPI.Machine.Move.Calibration">
            <summary>
            Information about the automatic calibration
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Move.Compensation">
            <summary>
            Information about the currently configured compensation options
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Move.CurrentMove">
            <summary>
            Information about the current move
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Move.DAA">
            <summary>
            Information about the configured dynamic acceleration adjustment
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Move.Extruders">
            <summary>
            List of configured extruders
            </summary>
            <seealso cref="T:DuetAPI.Machine.Extruder"/>
        </member>
        <member name="P:DuetAPI.Machine.Move.Idle">
            <summary>
            Idle current reduction parameters
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Move.Kinematics">
            <summary>
            Configured kinematics options
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Move.PrintingAcceleration">
            <summary>
            Maximum acceleration allowed while printing (in mm/s^2)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Move.SpeedFactor">
            <summary>
            Speed factor applied to every regular move (0.01..1 or greater)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Move.TravelAcceleration">
            <summary>
            Maximum acceleration allowed while travelling (in mm/s^2)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Move.VirtualEPos">
            <summary>
            Virtual total extruder position
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Move.WorkspaceNumber">
            <summary>
            Index of the currently selected workspace
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.MoveCalibration">
            <summary>
            Information about configured calibration options
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MoveCalibration.Final">
            <summary>
            Final calibration results (for Delta calibration)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MoveCalibration.Initial">
            <summary>
            Initial calibration results (for Delta calibration)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MoveCalibration.NumFactors">
            <summary>
            Number of factors used (for Delta calibration)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.MoveCompensation">
            <summary>
            Information about the configured compensation options
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MoveCompensation.FadeHeight">
            <summary>
            Effective height before the bed compensation is turned off (in mm) or null if not configured
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MoveCompensation.File">
            <summary>
            Full path to the currently used height map file or null if none is in use
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MoveCompensation.MeshDeviation">
            <summary>
            Deviations of the mesh grid or null if not applicable
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MoveCompensation.ProbeGrid">
            <summary>
            Settings of the current probe grid
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MoveCompensation.Skew">
            <summary>
            Information about the configured orthogonal axis parameters
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MoveCompensation.Type">
            <summary>
            Type of the compensation in use
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.MoveCompensationType">
            <summary>
            Supported compensation types
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MoveCompensationType.None">
            <summary>
            No compensation
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MoveCompensationType.Mesh">
            <summary>
            Mesh compensation
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.MoveDeviations">
            <summary>
            Calibration or mesh grid results
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MoveDeviations.Deviation">
            <summary>
            RMS deviation (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MoveDeviations.Mean">
            <summary>
            Mean deviation (in mm)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.ProbeGrid">
            <summary>
            Information about the configured probe grid (see M557)
            </summary>
            <seealso cref="T:DuetAPI.Utility.Heightmap"/>
        </member>
        <member name="P:DuetAPI.Machine.ProbeGrid.XMin">
            <summary>
            X start coordinate of the heightmap
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ProbeGrid.XMax">
            <summary>
            X end coordinate of the heightmap
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ProbeGrid.XSpacing">
            <summary>
            Spacing between the probe points in X direction
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ProbeGrid.YMin">
            <summary>
            Y start coordinate of the heightmap
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ProbeGrid.YMax">
            <summary>
            Y end coordinate of the heightmap
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ProbeGrid.YSpacing">
            <summary>
            Spacing between the probe points in Y direction
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ProbeGrid.Radius">
            <summary>
            Probing radius for delta kinematics
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Skew">
            <summary>
            Class holding details about orthogonoal axis compensation parameters
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Skew.TanXY">
            <summary>
            Tangent of the skew angle for the XY axes
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Skew.TanXZ">
            <summary>
            Tangent of the skew angle for the XZ axes
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Skew.TanYZ">
            <summary>
            Tangent of the skew angle for the YZ axes
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.InterfaceType">
            <summary>
            Supported types of network interfaces
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.InterfaceType.WiFi">
            <summary>
            Wireless network interface
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.InterfaceType.LAN">
            <summary>
            Wired network interface
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Network">
            <summary>
            Information about the network subsystem
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.Network.DefaultName">
            <summary>
            Default name of the machine
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.Network.DefaultHostname">
            <summary>
            Fallback hostname if the <c>Name</c> is invalid
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.Network.DefaultPassword">
            <summary>
            Default network password of the machine
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Network.Hostname">
            <summary>
            Hostname of the machine
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Network.Interfaces">
            <summary>
            List of available network interfaces
            </summary>
            <seealso cref="T:DuetAPI.Machine.NetworkInterface"/>
        </member>
        <member name="P:DuetAPI.Machine.Network.Name">
            <summary>
            Name of the machine
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.NetworkInterface">
            <summary>
            Information about a network interface
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.NetworkInterface.ActiveProtocols">
            <summary>
            List of active protocols
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.NetworkInterface.ActualIP">
            <summary>
            Actual IPv4 address of the network adapter
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.NetworkInterface.ConfiguredIP">
            <summary>
            Configured IPv4 address of the network adapter
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.NetworkInterface.FirmwareVersion">
            <summary>
            Version of the network interface or null if unknown.
            This is primarily intended for the ESP8266-based network interfaces as used on the Duet WiFi
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.NetworkInterface.Gateway">
            <summary>
            Gateway of the network adapter
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.NetworkInterface.Mac">
            <summary>
            Physical address of the network adapter
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.NetworkInterface.NumReconnects">
            <summary>
            Number of reconnect attempts or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.NetworkInterface.Signal">
            <summary>
            Signal of the WiFi adapter (only WiFi, in dBm, or null if unknown)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.NetworkInterface.Speed">
            <summary>
            Speed of the network interface (in MBit, null if unknown, 0 if not connected)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.NetworkInterface.Subnet">
            <summary>
            Subnet of the network adapter
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.NetworkInterface.Type">
            <summary>
            Type of this network interface
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.NetworkProtocol">
            <summary>
            Supported network protocols
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.NetworkProtocol.HTTP">
            <summary>
            HTTP protocol
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.NetworkProtocol.FTP">
            <summary>
            FTP protocol
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.NetworkProtocol.Telnet">
            <summary>
            Telnet protocol
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Scanner">
            <summary>
            Information about the 3D scanner subsystem
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Scanner.Progress">
            <summary>
            Progress of the current action (on a scale between 0 to 1)
            </summary>
            <remarks>
            Previous status responses used a scale of 0..100
            </remarks>
        </member>
        <member name="P:DuetAPI.Machine.Scanner.Status">
            <summary>
            Status of the 3D scanner
            </summary>
            <seealso cref="T:DuetAPI.Machine.ScannerStatus"/>
        </member>
        <member name="T:DuetAPI.Machine.ScannerStatus">
            <summary>
            Possible states of the attached 3D scanner
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ScannerStatus.Disconnected">
            <summary>
            Scanner is disconnected (none present)
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ScannerStatus.Idle">
            <summary>
            Scanner is registered and idle
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ScannerStatus.Scanning">
            <summary>
            Scanner is scanning an object
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ScannerStatus.PostProcessing">
            <summary>
            Scanner is post-processing a file
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ScannerStatus.Calibrating">
            <summary>
            Scanner is calibrating
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ScannerStatus.Uploading">
            <summary>
            Scanner is uploading
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.AnalogSensor">
            <summary>
            Representation of an analog sensor
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.AnalogSensor.LastReading">
            <summary>
            Last sensor reading (in C) or null if invalid
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.AnalogSensor.Name">
            <summary>
            Name of this sensor or null if not configured
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.AnalogSensor.Type">
            <summary>
            Type of this sensor
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.AnalogSensorType">
            <summary>
            Enumeration of supported analog sensor types
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.AnalogSensorType.Thermistor">
            <summary>
            Regular temperature thermistor
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.AnalogSensorType.PT1000">
            <summary>
            PT1000 sensor
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.AnalogSensorType.MAX31865">
            <summary>
            RTD MAX31865
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.AnalogSensorType.MAX31855">
            <summary>
            MAX31855 thermocouple
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.AnalogSensorType.MAX31856">
            <summary>
            MAX31856 thermocouple
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.AnalogSensorType.LinearAnalaog">
            <summary>
            Linear analog sensor
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.AnalogSensorType.DHT11">
            <summary>
            DHT11 sensor
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.AnalogSensorType.DHT21">
            <summary>
            DHT21 sensor
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.AnalogSensorType.DHT22">
            <summary>
            DHT22 sensor
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.AnalogSensorType.DHTHumidity">
            <summary>
            DHT humidity sensor
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.AnalogSensorType.CurrentLoop">
            <summary>
            Current loop sensor
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.AnalogSensorType.McuTemp">
            <summary>
            MCU temperature
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.AnalogSensorType.Drivers">
            <summary>
            On-board stepper driver sensors
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.AnalogSensorType.DriversDuex">
            <summary>
            Stepper driver sensors on the DueX expansion board
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.AnalogSensorType.Unknown">
            <summary>
            Unknown temperature sensor
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.AnalogSensorTypeConverter">
            <summary>
            Class to convert an <see cref="T:DuetAPI.Machine.AnalogSensorType"/> to and from JSON
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.AnalogSensorTypeConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read an <see cref="T:DuetAPI.Machine.AnalogSensorType"/> from JSON
            </summary>
            <param name="reader">JSON reader</param>
            <param name="typeToConvert">Type to convert</param>
            <param name="options">Serializer options</param>
            <returns>Read value</returns>
        </member>
        <member name="M:DuetAPI.Machine.AnalogSensorTypeConverter.Write(System.Text.Json.Utf8JsonWriter,DuetAPI.Machine.AnalogSensorType,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write an <see cref="T:DuetAPI.Machine.AnalogSensorType"/> to JSON
            </summary>
            <param name="writer">JSON writer</param>
            <param name="value">Value to serialize</param>
            <param name="options">Write options</param>
        </member>
        <member name="T:DuetAPI.Machine.Endstop">
            <summary>
            Information about an endstop
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Endstop.Triggered">
            <summary>
            Whether or not the endstop is hit
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Endstop.Type">
            <summary>
            Type of the endstop
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Endstop.ProbeNumber">
            <summary>
            Index of the used probe (if <see cref="P:DuetAPI.Machine.Endstop.Type"/> is <see cref="F:DuetAPI.Machine.EndstopType.ZProbeAsEndstop"/>)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.EndstopType">
            <summary>
            Type of a configured endstop
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.EndstopType.InputPin">
            <summary>
            Generic input pin
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.EndstopType.ZProbeAsEndstop">
            <summary>
            Z-probe acts as an endstop
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.EndstopType.MotorStallAny">
            <summary>
            Motor stall detection stops all the drives when triggered
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.EndstopType.MotorStallIndividual">
            <summary>
            Motor stall detection stops individual drives when triggered
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.EndstopType.Unknown">
            <summary>
            Unknown type
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.FilamentMonitor">
            <summary>
            Information about a filament monitor
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.FilamentMonitor.Enabled">
            <summary>
            Indicates if this filament monitor is enabled
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.FilamentMonitor.Type">
            <summary>
            Type of this filament monitor
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.FilamentMonitor.GetFilamentMonitorType(DuetAPI.Machine.FilamentMonitorType)">
            <summary>
            Figure out the required type for the given filament monitor type
            </summary>
            <param name="type">Filament monitor type</param>
            <returns>Required type</returns>
        </member>
        <member name="M:DuetAPI.Machine.FilamentMonitor.UpdateFromJson(System.Text.Json.JsonElement,System.Boolean)">
            <summary>
            Update this instance from a given JSON element
            </summary>
            <param name="jsonElement">Element to update this intance from</param>
            <param name="ignoreSbcProperties">Whether SBC properties are ignored</param>
            <returns>Updated instance</returns>
            <exception cref="T:System.Text.Json.JsonException">Failed to deserialize data</exception>
        </member>
        <member name="T:DuetAPI.Machine.FilamentMonitorType">
            <summary>
            Enumeration of supported filament sensors
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.FilamentMonitorType.Simple">
            <summary>
            Simple filament sensor
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.FilamentMonitorType.Laser">
            <summary>
            Laser filament sensor
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.FilamentMonitorType.Pulsed">
            <summary>
            Pulsed filament sensor
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.FilamentMonitorType.RotatingMagnet">
            <summary>
            Rotating magnet filament sensor
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.FilamentMonitorType.Unknown">
            <summary>
            Unknown sensor type
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.LaserFilamentMonitorCalibrated">
            <summary>
            Calibrated properties of a laser filament monitor
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.LaserFilamentMonitorCalibrated.PercentMax">
            <summary>
            Maximum percentage (0..1 or greater)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.LaserFilamentMonitorCalibrated.PercentMin">
            <summary>
            Minimum percentage (0..1)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.LaserFilamentMonitorCalibrated.Sensivity">
            <summary>
            Calibrated sensivity
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.LaserFilamentMonitorCalibrated.TotalDistance">
            <summary>
            Total extruded distance (in mm)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.LaserFilamentMonitorConfigured">
            <summary>
            Configured properties of a laser filament monitor
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.LaserFilamentMonitorConfigured.PercentMax">
            <summary>
            Maximum percentage (0..1 or greater)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.LaserFilamentMonitorConfigured.PercentMin">
            <summary>
            Minimum percentage (0..1)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.LaserFilamentMonitorConfigured.SampleDistance">
            <summary>
            Sample distance (in mm)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.LaserFilamentMonitor">
            <summary>
            Information about a laser filament monitor
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.LaserFilamentMonitor.#ctor">
            <summary>
            Constructor of this class
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.LaserFilamentMonitor.Calibrated">
            <summary>
            Calibrated properties of this filament monitor
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.LaserFilamentMonitor.Configured">
            <summary>
            Configured properties of this filament monitor
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.LaserFilamentMonitor.FilamentPresent">
            <summary>
            Indicates if a filament is present
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.PulsedFilamentMonitorCalibrated">
            <summary>
            Calibrated properties of a pulsed filament monitor
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.PulsedFilamentMonitorCalibrated.MmPerPulse">
            <summary>
            Extruded distance per pulse (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.PulsedFilamentMonitorCalibrated.PercentMax">
            <summary>
            Maximum percentage (0..1 or greater)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.PulsedFilamentMonitorCalibrated.PercentMin">
            <summary>
            Minimum percentage (0..1)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.PulsedFilamentMonitorCalibrated.TotalDistance">
            <summary>
            Total extruded distance (in mm)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.PulsedFilamentMonitorConfigured">
            <summary>
            Configured properties of a pulsed filament monitor
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.PulsedFilamentMonitorConfigured.MmPerPulse">
            <summary>
            Extruded distance per pulse (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.PulsedFilamentMonitorConfigured.PercentMax">
            <summary>
            Maximum percentage (0..1 or greater)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.PulsedFilamentMonitorConfigured.PercentMin">
            <summary>
            Minimum percentage (0..1)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.PulsedFilamentMonitorConfigured.SampleDistance">
            <summary>
            Sample distance (in mm)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.PulsedFilamentMonitor">
            <summary>
            Information about a pulsed filament monitor
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.PulsedFilamentMonitor.#ctor">
            <summary>
            Constructor of this class
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.PulsedFilamentMonitor.Calibrated">
            <summary>
            Calibrated properties of this filament monitor
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.PulsedFilamentMonitor.Configured">
            <summary>
            Configured properties of this filament monitor
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.RotatingMagnetFilamentMonitorCalibrated">
            <summary>
            Calibrated properties of a rotating magnet filament monitor
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.RotatingMagnetFilamentMonitorCalibrated.MmPerRev">
            <summary>
            Extruded distance per revolution (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.RotatingMagnetFilamentMonitorCalibrated.PercentMax">
            <summary>
            Maximum percentage (0..1 or greater)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.RotatingMagnetFilamentMonitorCalibrated.PercentMin">
            <summary>
            Minimum percentage (0..1)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.RotatingMagnetFilamentMonitorCalibrated.TotalDistance">
            <summary>
            Total extruded distance (in mm)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.RotatingMagnetFilamentMonitorConfigured">
            <summary>
            Configured properties of a rotating magnet filament monitor
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.RotatingMagnetFilamentMonitorConfigured.MmPerRev">
            <summary>
            Extruded distance per revolution (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.RotatingMagnetFilamentMonitorConfigured.PercentMax">
            <summary>
            Maximum percentage (0..1 or greater)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.RotatingMagnetFilamentMonitorConfigured.PercentMin">
            <summary>
            Minimum percentage (0..1)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.RotatingMagnetFilamentMonitorConfigured.SampleDistance">
            <summary>
            Sample distance (in mm)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.RotatingMagnetFilamentMonitor">
            <summary>
            Information about a rotating magnet filament monitor
            </summary>
        </member>
        <member name="M:DuetAPI.Machine.RotatingMagnetFilamentMonitor.#ctor">
            <summary>
            Constructor of this class
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.RotatingMagnetFilamentMonitor.Calibrated">
            <summary>
            Calibrated properties of this filament monitor
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.RotatingMagnetFilamentMonitor.Configured">
            <summary>
            Configured properties of this filament monitor
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.RotatingMagnetFilamentMonitor.FilamentPresent">
            <summary>
            Indicates if a filament is present
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.SimpleFilamentMonitor">
            <summary>
            Representation of a simple filament monitor
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.SimpleFilamentMonitor.FilamentPresent">
            <summary>
            Indicates if a filament is present
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.GpInputPort">
            <summary>
            Details about a general-purpose input port
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.GpInputPort.Value">
            <summary>
            Value of this port (0..1)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Probe">
            <summary>
            Information about a configured probe
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.CalibrationTemperature">
            <summary>
            Calibration temperature (in C)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.DeployedByUser">
            <summary>
            Indicates if the user has deployed the probe
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.DisablesHeaters">
            <summary>
            Whether probing disables the heater(s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.DiveHeight">
            <summary>
            Dive height (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.MaxProbeCount">
            <summary>
            Maximum number of times to probe after a bad reading was determined
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.Offsets">
            <summary>
            X+Y offsets (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.RecoveryTime">
            <summary>
            Recovery time (in s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.Speed">
            <summary>
            Probe speed (in mm/s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.TemperatureCoefficient">
            <summary>
            Temperature coefficient
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.Threshold">
            <summary>
            Configured trigger threshold (0..1023)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.Tolerance">
            <summary>
            Allowed tolerance deviation between two measures (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.TravelSpeed">
            <summary>
            Travel speed when probing multiple points (in mm/s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.TriggerHeight">
            <summary>
            Z height at which the probe is triggered (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Probe.Type">
            <summary>
            Type of the configured probe
            </summary>
            <seealso cref="T:DuetAPI.Machine.ProbeType"/>
        </member>
        <member name="P:DuetAPI.Machine.Probe.Value">
            <summary>
            Current analog values of the probe
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.ProbeType">
            <summary>
            Supported probe types
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ProbeType.None">
            <summary>
            No probe
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ProbeType.Analog">
            <summary>
            A simple unmodulated probe (like dc42's infrared probe)
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ProbeType.DumbModulated">
            <summary>
            A modulated probe (like the original one shipped with the RepRapPro Ormerod)
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ProbeType.AlternateAnalog">
            <summary>
            Alternate analog probe (like the ultrasonic probe)
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ProbeType.EndstopSwitch_Obsolete">
            <summary>
            Endstop switch (obsolete, should not be used any more)
            </summary>
            <seealso cref="F:DuetAPI.Machine.ProbeType.Digital"/>
        </member>
        <member name="F:DuetAPI.Machine.ProbeType.Digital">
            <summary>
            A switch that is triggered when the probe is activated (filtered)
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ProbeType.E1Switch_Obsolete">
            <summary>
            Endstop switch on the E1 endstop pin (obsolete, should not be used any more)
            </summary>
            <seealso cref="F:DuetAPI.Machine.ProbeType.Digital"/>
        </member>
        <member name="F:DuetAPI.Machine.ProbeType.ZSwitch_Obsolete">
            <summary>
            Endstop switch on Z endstop pin (obsolete, should not be used any more)
            </summary>
            <seealso cref="F:DuetAPI.Machine.ProbeType.Digital"/>
        </member>
        <member name="F:DuetAPI.Machine.ProbeType.UnfilteredDigital">
            <summary>
            A switch that is triggered when the probe is activated (unfiltered)
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ProbeType.BLTouch">
            <summary>
            A BLTouch probe
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ProbeType.ZMotorStall">
            <summary>
            Z motor stall detection
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Sensors">
            <summary>
            Information about sensors
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Sensors.Analog">
            <summary>
            List of analog sensors
            </summary>
            <seealso cref="T:DuetAPI.Machine.AnalogSensor"/>
        </member>
        <member name="P:DuetAPI.Machine.Sensors.Endstops">
            <summary>
            List of configured endstops
            </summary>
            <seealso cref="T:DuetAPI.Machine.Endstop"/>
        </member>
        <member name="P:DuetAPI.Machine.Sensors.FilamentMonitors">
            <summary>
            List of configured filament monitors
            </summary>
            <seealso cref="T:DuetAPI.Machine.FilamentMonitor"/>
        </member>
        <member name="P:DuetAPI.Machine.Sensors.GpIn">
            <summary>
            List of general-purpose input ports
            </summary>
            <seealso cref="T:DuetAPI.Machine.GpInputPort"/>
        </member>
        <member name="P:DuetAPI.Machine.Sensors.Probes">
            <summary>
            List of configured probes
            </summary>
            <seealso cref="T:DuetAPI.Machine.Probe"/>
        </member>
        <member name="T:DuetAPI.Machine.Spindle">
            <summary>
            Information about a CNC spindle
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Spindle.Active">
            <summary>
            Active RPM
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Spindle.Current">
            <summary>
            Current RPM, negative if anticlockwise direction
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Spindle.Frequency">
            <summary>
            Frequency (in Hz)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Spindle.Min">
            <summary>
            Minimum RPM when turned on
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Spindle.Max">
            <summary>
            Maximum RPM
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Spindle.Tool">
            <summary>
            Mapped tool number or -1 if not assigned
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.BeepRequest">
            <summary>
            Details about a requested beep
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.BeepRequest.Duration">
            <summary>
            Duration of the requested beep (in ms)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.BeepRequest.Frequency">
            <summary>
            Frequency of the requested beep (in Hz)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.GpOutputPort">
            <summary>
            Details about a general-purpose output port
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.GpOutputPort.Pwm">
            <summary>
            PWM value of this port (0..1)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.MachineMode">
            <summary>
            Possible operation modes of the machine
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineMode.FFF">
            <summary>
            Fused Filament Fabrication (default)
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineMode.CNC">
            <summary>
            Computer Numerical Control
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineMode.Laser">
            <summary>
            Laser operation mode (e.g. laser cutters)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.MachineStatus">
            <summary>
            Possible states of the firmware
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineStatus.Updating">
            <summary>
            The firmware is being updated
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineStatus.Off">
            <summary>
            The machine is turned off (i.e. the input voltage is too low for operation)
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineStatus.Halted">
            <summary>
            The machine has encountered an emergency stop and is ready to reset
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineStatus.Pausing">
            <summary>
            The machine is about to pause a file job
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineStatus.Paused">
            <summary>
            The machine has paused a file job
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineStatus.Resuming">
            <summary>
            The machine is about to resume a paused file job
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineStatus.Processing">
            <summary>
            The machine is processing a file job
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineStatus.Simulating">
            <summary>
            The machine is simulating a file job to determine its processing time
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineStatus.Busy">
            <summary>
            The machine is busy doing something (e.g. moving)
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineStatus.ChangingTool">
            <summary>
            The machine is changing the current tool
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MachineStatus.Idle">
            <summary>
            The machine is on but has nothing to do
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.MessageBox">
            <summary>
            Information about the message box to show
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MessageBox.AxisControls">
            <summary>
            Bitmap of the axis movement controls to show (indices)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MessageBox.Message">
            <summary>
            Content of the message box
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MessageBox.Mode">
            <summary>
            Mode of the message box to display or null if none is shown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MessageBox.Seq">
            <summary>
            Sequence number of the message box
            </summary>
            <remarks>
            This is increased whenever a new message box is supposed to be displayed
            </remarks>
        </member>
        <member name="P:DuetAPI.Machine.MessageBox.Timeout">
            <summary>
            Total timeout for this message box (in ms)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.MessageBox.Title">
            <summary>
            Title of the message box
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.MessageBoxMode">
            <summary>
            Supported modes of displaying a message box
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MessageBoxMode.NoButtons">
            <summary>
            Display a message box without any buttons
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MessageBoxMode.CloseOnly">
            <summary>
            Display a message box with only a Close button
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MessageBoxMode.OkOnly">
            <summary>
            Display a message box with only an Ok button which is supposed to send M292 when pressed
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.MessageBoxMode.OkCancel">
            <summary>
            Display a message box with an Ok button that sends M292 P0 or a cancel button that sends M292 P1 when clicked
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.RestorePoint">
            <summary>
            Class holding information about a restore point
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.RestorePoint.Coords">
            <summary>
            Axis coordinates of the restore point (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.RestorePoint.ExtruderPos">
            <summary>
            The virtual extruder position at the start of this move
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.RestorePoint.FeedRate">
            <summary>
            Requested feedrate (in mm/s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.RestorePoint.IoBits">
            <summary>
            The output port bits setting for this move or null if not applicable
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.RestorePoint.LaserPwm">
            <summary>
            Laser PWM value (0..1) or null if not applicable
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.RestorePoint.SpindleSpeeds">
            <summary>
            The spindle RPMs that were set, negative if anticlockwise direction
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.RestorePoint.ToolNumber">
            <summary>
            The tool number that was active
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.State">
            <summary>
            Information about the machine state
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.State.AtxPower">
            <summary>
            State of the ATX power pin (if controlled)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.State.Beep">
            <summary>
            Information about a requested beep or null if none is requested
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.State.CurrentTool">
            <summary>
            Number of the currently selected tool or -1 if none is selected
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.State.DisplayMessage">
            <summary>
            Persistent message to display (see M117)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.State.DsfVersion">
            <summary>
            Version of the Duet Software Framework package
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.State.GpOut">
            <summary>
            List of general-purpose output ports
            </summary>
            <seealso cref="T:DuetAPI.Machine.GpOutputPort"/>
        </member>
        <member name="P:DuetAPI.Machine.State.LaserPwm">
            <summary>
            Laser PWM of the next commanded move (0..1) or null if not applicable
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.State.LogFile">
            <summary>
            Log file being written to or null if logging is disabled
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.State.MessageBox">
            <summary>
            Details about a requested message box or null if none is requested
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.State.MachineMode">
            <summary>
            Current mode of operation
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.State.NextTool">
            <summary>
            Number of the next tool to be selected
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.State.PowerFailScript">
            <summary>
            Script to execute when the power fails
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.State.PreviousTool">
            <summary>
            Number of the previous tool
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.State.RestorePoints">
            <summary>
            List of restore points
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.State.Status">
            <summary>
            Current state of the machine
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.State.UpTime">
            <summary>
            How long the machine has been running (in s)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Tool">
            <summary>
            Information about a configured tool
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.Active">
            <summary>
            Active temperatures of the associated heaters (in C)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.Axes">
            <summary>
            Associated axes. At present only X and Y can be mapped per tool.
            </summary>
            <remarks>
            The order is the same as the visual axes, so by default the layout is
            [
              [0],        // X
              [1]         // Y
            ]
            Make sure to set each item individually so the change events are called
            </remarks>
        </member>
        <member name="P:DuetAPI.Machine.Tool.Extruders">
            <summary>
            Extruder drives of this tool
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.Fans">
            <summary>
            List of associated fans (indices)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.FilamentExtruder">
            <summary>
            Extruder drive index for resolving the tool filament (index or -1)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.Heaters">
            <summary>
            List of associated heaters (indices)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.Mix">
            <summary>
            Mix ratios of the associated extruder drives
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.Name">
            <summary>
            Name of this tool
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.Number">
            <summary>
            Number of this tool
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.Offsets">
            <summary>
            Axis offsets (in mm)
            This list is in the same order as <see cref="P:DuetAPI.Machine.Move.Axes"/>
            </summary>
            <seealso cref="T:DuetAPI.Machine.Axis"/>
        </member>
        <member name="P:DuetAPI.Machine.Tool.OffsetsProbed">
            <summary>
            Bitmap of the probed axis offsets
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.Retraction">
            <summary>
            Firmware retraction parameters
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.Standby">
            <summary>
            Standby temperatures of the associated heaters (in C)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Tool.State">
            <summary>
            Current state of this tool
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.ToolRetraction">
            <summary>
            Tool retraction parameters
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ToolRetraction.ExtraRestart">
            <summary>
            Amount of additional filament to extrude when undoing a retraction (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ToolRetraction.Length">
            <summary>
            Retraction length (in mm)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ToolRetraction.Speed">
            <summary>
            Retraction speed (in mm/s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ToolRetraction.UnretractSpeed">
            <summary>
            Unretract speed (in mm/s)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.ToolRetraction.ZHop">
            <summary>
            Amount of Z lift after doing a retraction (in mm)
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.ToolState">
            <summary>
            States of a tool
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ToolState.Off">
            <summary>
            Tool is turned off
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ToolState.Active">
            <summary>
            Tool is active
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.ToolState.Standby">
            <summary>
            Tool is in standby
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.AccessLevel">
            <summary>
            Defines what a user is allowed to do
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.AccessLevel.ReadOnly">
            <summary>
            Changes to the system and/or operation are not permitted
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.AccessLevel.ReadWrite">
            <summary>
            Changes to the system and/or operation are permitted
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.SessionType">
            <summary>
            Types of user sessions
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.SessionType.Local">
            <summary>
            Local client
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.SessionType.HTTP">
            <summary>
            Remote client via HTTP
            </summary>
        </member>
        <member name="F:DuetAPI.Machine.SessionType.Telnet">
            <summary>
            Remote client via Telnet
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.UserSession">
            <summary>
            Class representing a user session
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.UserSession.Id">
            <summary>
            Identifier of this session
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.UserSession.AccessLevel">
            <summary>
            Access level of this session
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.UserSession.SessionType">
            <summary>
            Type of this sessionSessionAccessLevel
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.UserSession.Origin">
            <summary>
            Origin of this session. For remote sessions, this equals the remote IP address
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.UserSession.OriginId">
            <summary>
            Corresponding identifier of the origin.
            If it is a remote session, it is the remote port, else it defaults to the PID of the current process
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.UserVariable">
            <summary>
            Class holding information about a user variable
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.UserVariable.Name">
            <summary>
            Name of the user variable
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.UserVariable.Value">
            <summary>
            Value of the user variable
            </summary>
        </member>
        <member name="T:DuetAPI.Machine.Volume">
            <summary>
            Information about a storage device
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Volume.Capacity">
            <summary>
            Total capacity of the storage device (in bytes or null)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Volume.FreeSpace">
            <summary>
            How much space is still available on this device (in bytes or null)
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Volume.Mounted">
            <summary>
            Whether the storage device is mounted
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Volume.Name">
            <summary>
            Name of this volume
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Volume.OpenFiles">
            <summary>
            Number of currently open files or null if unknown
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Volume.Path">
            <summary>
            Logical path of the storage device
            </summary>
        </member>
        <member name="P:DuetAPI.Machine.Volume.Speed">
            <summary>
            Speed of the storage device (in bytes/s or null if unknown)
            </summary>
        </member>
        <member name="T:DuetAPI.Utility.DriverId">
            <summary>
            Class representing a driver identifier
            </summary>
        </member>
        <member name="M:DuetAPI.Utility.DriverId.#ctor">
            <summary>
            Default constructor of this class
            </summary>
        </member>
        <member name="M:DuetAPI.Utility.DriverId.#ctor(System.UInt32)">
            <summary>
            Constructor for creating a new instance from an unsigned integer
            </summary>
            <param name="value">Unsigned integer</param>
        </member>
        <member name="M:DuetAPI.Utility.DriverId.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor for creating a new instance from a board and a port
            </summary>
            <param name="board">Board number</param>
            <param name="port">Port number</param>
        </member>
        <member name="M:DuetAPI.Utility.DriverId.#ctor(System.String)">
            <summary>
            Constructor for creating a new instance from a string
            </summary>
            <param name="value">String value</param>
            <exception cref="T:System.ArgumentException">Driver ID could not be parsed</exception>
        </member>
        <member name="P:DuetAPI.Utility.DriverId.Board">
            <summary>
            Board of this driver identifier
            </summary>
        </member>
        <member name="P:DuetAPI.Utility.DriverId.Port">
            <summary>
            Port of this driver identifier
            </summary>
        </member>
        <member name="M:DuetAPI.Utility.DriverId.op_Implicit(DuetAPI.Utility.DriverId)~System.UInt32">
            <summary>
            Convert an instance to an unsigned integer as expected by RepRapFirmware
            </summary>
            <param name="id">Driver ID to convert</param>
        </member>
        <member name="M:DuetAPI.Utility.DriverId.op_Implicit(DuetAPI.Utility.DriverId)~System.String">
            <summary>
            Convert an instance to a string
            </summary>
            <param name="id">Driver ID to convert</param>
        </member>
        <member name="M:DuetAPI.Utility.DriverId.Equals(System.Object)">
            <summary>
            Checks if two instances are equal
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DuetAPI.Utility.DriverId.GetHashCode">
            <summary>
            Compute a hash code for this instance
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:DuetAPI.Utility.DriverId.ToString">
            <summary>
            Convert this instance to a string
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:DuetAPI.Utility.FileLists">
            <summary>
            Helper class to generate RRF-style file lists
            </summary>
        </member>
        <member name="M:DuetAPI.Utility.FileLists.MakeFileListContainer(System.Collections.IList,System.String,System.Int32,System.Boolean)">
            <summary>
            Make a filelist container for M20
            </summary>
            <param name="items">Items to include</param>
            <param name="directory">RRF directory</param>
            <param name="startAt">First item</param>
            <param name="finished">True if the file list is complete</param>
            <returns>JSON file list object</returns>
        </member>
        <member name="M:DuetAPI.Utility.FileLists.GetFileListSize(System.Collections.IList,System.String,System.Int32)">
            <summary>
            Get an estimate how big the UTF8-encoded file list will be in bytes
            </summary>
            <param name="items">Items to include</param>
            <param name="directory">RRF directory</param>
            <param name="startAt">First item</param>
            <returns>Size of the UTF8-encoded file list in bytes</returns>
        </member>
        <member name="M:DuetAPI.Utility.FileLists.GetFiles(System.String,System.String,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Get a /rr_files or M20 files response
            </summary>
            <param name="directory">RRF path to the directory</param>
            <param name="physicalDirectory">Physical directory</param>
            <param name="startAt">First item to send</param>
            <param name="flagDirs">Prefix directories with an asterisk</param>
            <param name="maxSize">Maximum size of the file list in bytes or -1 if unset</param>
            <returns>JSON file list</returns>
        </member>
        <member name="M:DuetAPI.Utility.FileLists.GetFileList(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Get a /rr_filelist or M20 files response
            </summary>
            <param name="directory">RRF path to the directory</param>
            <param name="physicalDirectory">Physical directory</param>
            <param name="startAt">First file index to return. Set startAt to -1 to omit error handling and the JSON object container</param>
            <param name="maxSize">Maximum size of the file list in bytes or -1 if unset</param>
            <returns>JSON list</returns>
        </member>
        <member name="T:DuetAPI.Utility.Heightmap">
            <summary>
            Class representing a heightmap
            </summary>
        </member>
        <member name="P:DuetAPI.Utility.Heightmap.XMin">
            <summary>
            X start coordinate of the heightmap
            </summary>
        </member>
        <member name="P:DuetAPI.Utility.Heightmap.XMax">
            <summary>
            X end coordinate of the heightmap
            </summary>
        </member>
        <member name="P:DuetAPI.Utility.Heightmap.XSpacing">
            <summary>
            Spacing between the probe points in X direction
            </summary>
        </member>
        <member name="P:DuetAPI.Utility.Heightmap.YMin">
            <summary>
            Y start coordinate of the heightmap
            </summary>
        </member>
        <member name="P:DuetAPI.Utility.Heightmap.YMax">
            <summary>
            Y end coordinate of the heightmap
            </summary>
        </member>
        <member name="P:DuetAPI.Utility.Heightmap.YSpacing">
            <summary>
            Spacing between the probe points in Y direction
            </summary>
        </member>
        <member name="P:DuetAPI.Utility.Heightmap.Radius">
            <summary>
            Probing radius on delta geometries
            </summary>
        </member>
        <member name="P:DuetAPI.Utility.Heightmap.NumX">
            <summary>
            Number of probe points in X direction
            </summary>
        </member>
        <member name="P:DuetAPI.Utility.Heightmap.NumY">
            <summary>
            Number of probe points in Y direction
            </summary>
        </member>
        <member name="P:DuetAPI.Utility.Heightmap.ZCoordinates">
            <summary>
            Z coordinate of each probe point
            </summary>
        </member>
        <member name="M:DuetAPI.Utility.Heightmap.Load(System.String)">
            <summary>
            Load a new heightmap from the given CSV file
            </summary>
            <param name="filename">Path to the file</param>
            <returns>Asynchronous task</returns>
            <exception cref="T:System.IO.IOException">Invalid file</exception>
        </member>
        <member name="M:DuetAPI.Utility.Heightmap.Save(System.String)">
            <summary>
            Save a heightmap to the given CSV file
            </summary>
            <param name="filename">Filename of the heightmap</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetAPI.Utility.JsonCamelCaseStringEnumConverter">
            <summary>
            Class for easier access to JsonStringEnumConverter with camel-case naming
            </summary>
        </member>
        <member name="F:DuetAPI.Utility.JsonCamelCaseStringEnumConverter._converter">
            <summary>
            Converter factory for creating new camel-case converters
            </summary>
        </member>
        <member name="M:DuetAPI.Utility.JsonCamelCaseStringEnumConverter.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:DuetAPI.Utility.JsonCamelCaseStringEnumConverter.CanConvert(System.Type)">
            <summary>
            Checks if the given type can be converted
            </summary>
            <param name="typeToConvert">Type to convert</param>
            <returns>Whether the type can be converted</returns>
        </member>
        <member name="M:DuetAPI.Utility.JsonCamelCaseStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates a new JSON converter
            </summary>
            <param name="typeToConvert">Type to convert</param>
            <param name="options">Conversion options</param>
            <returns>JSON converter</returns>
        </member>
        <member name="T:DuetAPI.Utility.JsonCharEnumConverter">
            <summary>
            Converter factory for converting enum types to char
            </summary>
        </member>
        <member name="M:DuetAPI.Utility.JsonCharEnumConverter.CanConvert(System.Type)">
            <summary>
            Checks if the given type can be converted
            </summary>
            <param name="typeToConvert">Type to convert</param>
            <returns>If the type can be converted</returns>
        </member>
        <member name="M:DuetAPI.Utility.JsonCharEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates a converter for the given type
            </summary>
            <param name="type"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:DuetAPI.Utility.JsonCharEnumConverter.JsonCharEnumConverterInner`1">
            <summary>
            Inner converter for char to enum conversions
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DuetAPI.Utility.JsonCharEnumConverter.JsonCharEnumConverterInner`1.CanConvert(System.Type)">
            <summary>
            Checks if the given type can be converted
            </summary>
            <param name="typeToConvert">Type to convert</param>
            <returns>Whether the type can be converted</returns>
        </member>
        <member name="M:DuetAPI.Utility.JsonCharEnumConverter.JsonCharEnumConverterInner`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read from JSON
            </summary>
            <param name="reader">JSON reader</param>
            <param name="typeToConvert">Type to convert</param>
            <param name="options">Read options</param>
            <returns>Read value</returns>
        </member>
        <member name="M:DuetAPI.Utility.JsonCharEnumConverter.JsonCharEnumConverterInner`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write a CodeParameter to JSON
            </summary>
            <param name="writer">JSON writer</param>
            <param name="value">Value to serialize</param>
            <param name="options">Write options</param>
        </member>
        <member name="T:DuetAPI.Utility.JsonRegexListConverter">
            <summary>
            JSON converter to read and write a list of regular expressions
            </summary>
            <remarks>
            This class may become obsolete in a future .NET Core version.
            For some reason it has no effect to add this converter to the default JSON options.
            </remarks>
        </member>
        <member name="M:DuetAPI.Utility.JsonRegexListConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read a Regex list from JSON
            </summary>
            <param name="reader">JSON reader</param>
            <param name="typeToConvert">Type to convert</param>
            <param name="options">Reader options</param>
            <returns>Read value</returns>
        </member>
        <member name="M:DuetAPI.Utility.JsonRegexListConverter.Write(System.Text.Json.Utf8JsonWriter,System.Collections.Generic.List{System.Text.RegularExpressions.Regex},System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write a Regex list to JSON
            </summary>
            <param name="writer">JSON writer</param>
            <param name="value">Value to serialize</param>
            <param name="options">Write options</param>
        </member>
        <member name="T:DuetAPI.Utility.JsonHelper">
            <summary>
            Helper class for JSON serialization, deserialization, patch creation and patch application
            </summary>
        </member>
        <member name="F:DuetAPI.Utility.JsonHelper.DefaultJsonOptions">
            <summary>
            Default JSON (de-)serialization options
            </summary>
        </member>
        <member name="F:DuetAPI.Utility.JsonHelper.DefaultJsonOptionsNoConverters">
            <summary>
            Default JSON (de-)serialization options without converters
            </summary>
        </member>
        <member name="M:DuetAPI.Utility.JsonHelper.ReceiveUtf8Json(System.Net.Sockets.Socket,System.Threading.CancellationToken)">
            <summary>
            Receive a serialized JSON object from a socket in UTF-8 format
            </summary>
            <param name="socket">Socket to read from</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Plain JSON</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Connection has been closed</exception>
        </member>
        <member name="T:DuetAPI.Utility.JsonLowerCaseStringEnumConverter">
            <summary>
            Class to convert enums to and from lowercase JSON strings
            </summary>
        </member>
        <member name="M:DuetAPI.Utility.JsonLowerCaseStringEnumConverter.CanConvert(System.Type)">
            <summary>
            Checks if the given type can be converted
            </summary>
            <param name="typeToConvert">Type to convert</param>
            <returns>If the type can be converted</returns>
        </member>
        <member name="M:DuetAPI.Utility.JsonLowerCaseStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates a converter for the given type
            </summary>
            <param name="type"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:DuetAPI.Utility.JsonLowerCaseStringEnumConverter.JsonLowerCaseStringEnumConverterInner`1">
            <summary>
            Inner converter for char to enum conversions
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DuetAPI.Utility.JsonLowerCaseStringEnumConverter.JsonLowerCaseStringEnumConverterInner`1.CanConvert(System.Type)">
            <summary>
            Checks if the type can be converted
            </summary>
            <param name="typeToConvert">Type to convert</param>
            <returns>True if the type can be converted</returns>
        </member>
        <member name="M:DuetAPI.Utility.JsonLowerCaseStringEnumConverter.JsonLowerCaseStringEnumConverterInner`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read an enum value from JSON
            </summary>
            <param name="reader">JSON reader</param>
            <param name="typeToConvert">Type to convert</param>
            <param name="options">Read options</param>
            <returns>Deserialized enum value</returns>
        </member>
        <member name="M:DuetAPI.Utility.JsonLowerCaseStringEnumConverter.JsonLowerCaseStringEnumConverterInner`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write an enum value to lowercase JSON
            </summary>
            <param name="writer">JSON writer</param>
            <param name="value">Value to write</param>
            <param name="options">Write options</param>
        </member>
        <member name="T:DuetAPI.Utility.JsonPolymorphicWriteOnlyConverter`1">
            <summary>
            JSON converter for converting inherited class types to JSON
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DuetAPI.Utility.JsonPolymorphicWriteOnlyConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read from JSON
            </summary>
            <param name="reader">JSON reader</param>
            <param name="typeToConvert">Type to convert</param>
            <param name="options">Read options</param>
            <returns>Read value</returns>
        </member>
        <member name="M:DuetAPI.Utility.JsonPolymorphicWriteOnlyConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write a CodeParameter to JSON
            </summary>
            <param name="writer">JSON writer</param>
            <param name="value">Value to serialize</param>
            <param name="options">Write options</param>
        </member>
    </members>
</doc>
