<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DuetWebServer</name>
    </assembly>
    <members>
        <member name="T:DuetWebServer.Controllers.MachineController">
            <summary>
            MVC Controller for /machine requests
            </summary>
        </member>
        <member name="F:DuetWebServer.Controllers.MachineController._configuration">
            <summary>
            App configuration
            </summary>
        </member>
        <member name="F:DuetWebServer.Controllers.MachineController._logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="M:DuetWebServer.Controllers.MachineController.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger{DuetWebServer.Controllers.MachineController})">
            <summary>
            Create a new controller instance
            </summary>
            <param name="configuration">Launch configuration</param>
            <param name="logger">Logger instance</param>
        </member>
        <member name="M:DuetWebServer.Controllers.MachineController.Status">
            <summary>
            GET /machine/status
            Retrieve the full object model as JSON.
            </summary>
            <returns>HTTP status code: (200) Machine object model as application/json (500) Generic error (502) Incompatible DCS version (503) DCS is unavailable</returns>
        </member>
        <member name="M:DuetWebServer.Controllers.MachineController.DoCode">
            <summary>
            POST /machine/code
            Execute plain G/M/T-code(s) from the request body and return the G-code response when done.
            </summary>
            <returns>HTTP status code: (200) G-Code response as text/plain (500) Generic error (502) Incompatible DCS version (503) DCS is unavailable</returns>
        </member>
        <member name="M:DuetWebServer.Controllers.MachineController.DownloadFile(System.String)">
            <summary>
            GET /machine/file/{filename}
            Download the specified file.
            </summary>
            <param name="filename">File to download</param>
            <returns>HTTP status code: (200) File content (404) File not found (500) Generic error (502) Incompatible DCS version (503) DCS is unavailable</returns>
        </member>
        <member name="M:DuetWebServer.Controllers.MachineController.UploadFile(System.String)">
            <summary>
            PUT /machine/file/{filename}
            Upload a file from the HTTP body and create the subdirectories if necessary.
            </summary>
            <param name="filename">Destination of the file to upload</param>
            <returns>HTTP status code: (201) File created (500) Generic error occurred (502) Incompatible DCS version (503) DCS is unavailable</returns>
        </member>
        <member name="M:DuetWebServer.Controllers.MachineController.GetFileInfo(System.String)">
            <summary>
            GET /machine/fileinfo/{filename}
            Parse a given G-code file and return information about this job file as a JSON object.
            </summary>
            <param name="filename">G-code file to analyze</param>
            <returns>HTTP status code: (200) File info as application/json (404) File not found (500) Generic error (502) Incompatible DCS (503) DCS is unavailable</returns>
        </member>
        <member name="M:DuetWebServer.Controllers.MachineController.DeleteFileOrDirectory(System.String)">
            <summary>
            DELETE /machine/file/{filename}
            Delete the given file or directory.
            </summary>
            <param name="filename">File or directory to delete</param>
            <returns>HTTP status code: (204) File or directory deleted (404) File not found (500) Generic error (502) Incompatible DCS version (503) DCS is unavailable</returns>
        </member>
        <member name="M:DuetWebServer.Controllers.MachineController.MoveFileOrDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Move a file or directory from a to b
            </summary>
            <param name="from">Source path</param>
            <param name="to">Destination path</param>
            <param name="force">Delete existing file (optional, default false)</param>
            <returns>HTTP status code: (204) File or directory moved (404) File or directory not found (500) Generic error (502) Incompatible DCS version (503) DCS is unavailable</returns>
        </member>
        <member name="M:DuetWebServer.Controllers.MachineController.GetFileList(System.String)">
            <summary>
            GET /machine/directory/{directory}
            Get a file list of the specified directory
            </summary>
            <param name="directory">Directory to query</param>
            <returns>HTTP status code: (200) File list as application/json (404) Directory not found (500) Generic error (502) Incompatible DCS version (503) DCS is unavailable</returns>
        </member>
        <member name="M:DuetWebServer.Controllers.MachineController.CreateDirectory(System.String)">
            <summary>
            PUT /machine/directory/{directory}
            Create the given directory.
            </summary>
            <param name="directory">Directory to create</param>
            <returns>HTTP status code: (204) Directory created (500) Generic error (502) Incompatible DCS version (503) DCS is unavailable</returns>
        </member>
        <member name="T:DuetWebServer.Controllers.WebSocketController">
            <summary>
            MVC controller for WebSocket requests
            </summary>
        </member>
        <member name="F:DuetWebServer.Controllers.WebSocketController.PONG">
            <summary>
            PONG response when a PING is received
            </summary>
        </member>
        <member name="F:DuetWebServer.Controllers.WebSocketController.UnsupportedCommandResponse">
            <summary>
            Response that is sent when a command is unsupported
            </summary>
        </member>
        <member name="F:DuetWebServer.Controllers.WebSocketController._configuration">
            <summary>
            Configuration of the application
            </summary>
        </member>
        <member name="F:DuetWebServer.Controllers.WebSocketController._logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="M:DuetWebServer.Controllers.WebSocketController.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger{DuetWebServer.Controllers.WebSocketController})">
            <summary>
            Constructor of a new WebSocket controller
            </summary>
            <param name="configuration">Configuration of this application</param>
            <param name="logger">Logger instance</param>
        </member>
        <member name="M:DuetWebServer.Controllers.WebSocketController.Get">
            <summary>
            WS /machine
            Provide WebSocket for continuous model updates. This is primarily used to keep DWC2 up-to-date
            </summary>
            <returns>WebSocket, HTTP status code: (400) Bad request</returns>
        </member>
        <member name="M:DuetWebServer.Controllers.WebSocketController.Process(System.Net.WebSockets.WebSocket)">
            <summary>
            Deal with a newly opened WebSocket.
            A client may receive one of the WS codes: (1001) Endpoint unavailable (1003) Invalid command (1011) Internal error
            </summary>
            <param name="webSocket">WebSocket connection</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetWebServer.Controllers.WebSocketController.ReadFromClient(System.Net.WebSockets.WebSocket,Nito.AsyncEx.AsyncAutoResetEvent,System.Threading.CancellationToken)">
            <summary>
            Keep reading from the client
            </summary>
            <param name="webSocket">WebSocket to read from</param>
            <param name="dataAcknowledged">Event to trigger when the client has acknowledged data</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetWebServer.Controllers.WebSocketController.WriteToClient(System.Net.WebSockets.WebSocket,DuetAPIClient.SubscribeConnection,Nito.AsyncEx.AsyncAutoResetEvent,System.Threading.CancellationToken)">
            <summary>
            Keep writing object model updates to the client
            </summary>
            <param name="webSocket">WebSocket to write to</param>
            <param name="subscribeConnection">IPC connection to supply model updates</param>
            <param name="dataAcknowledged">Event that is triggered when the client has acknowledged data</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetWebServer.Controllers.WebSocketController.CloseConnection(System.Net.WebSockets.WebSocket,System.Net.WebSockets.WebSocketCloseStatus,System.String)">
            <summary>
            Close the WebSocket connection again
            </summary>
            <param name="webSocket">WebSocket to close</param>
            <param name="status">Close status to transmit</param>
            <param name="message">Close message</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetWebServer.FileProviders.DuetFileProvider">
            <summary>
            Static file provider that uses DCS to resolve file paths
            </summary>
        </member>
        <member name="P:DuetWebServer.FileProviders.DuetFileProvider.Instance">
            <summary>
            Singleton to the file provider
            </summary>
        </member>
        <member name="F:DuetWebServer.FileProviders.DuetFileProvider._provider">
            <summary>
            Physical file provider
            </summary>
        </member>
        <member name="M:DuetWebServer.FileProviders.DuetFileProvider.#ctor">
            <summary>
            Creates a new file resolver instance
            </summary>
        </member>
        <member name="M:DuetWebServer.FileProviders.DuetFileProvider.Finalize">
            <summary>
            Finalizer of this instance
            </summary>
        </member>
        <member name="M:DuetWebServer.FileProviders.DuetFileProvider.GetFileInfo(System.String)">
            <summary>
            Gets the file info of the specified path
            </summary>
            <param name="subpath">Target path</param>
            <returns>File info</returns>
        </member>
        <member name="M:DuetWebServer.FileProviders.DuetFileProvider.GetDirectoryContents(System.String)">
            <summary>
            Returns the contents of the given directory
            </summary>
            <param name="subpath">Target path</param>
            <returns>Directory contents</returns>
        </member>
        <member name="M:DuetWebServer.FileProviders.DuetFileProvider.Watch(System.String)">
            <summary>
            Creates a token that watches for changes
            </summary>
            <param name="filter">Watch filter</param>
            <returns>Change token</returns>
        </member>
        <member name="M:DuetWebServer.FileProviders.DuetFileProvider.SetWebDirectory(System.String)">
            <summary>
            Set the directory of the file provider
            </summary>
            <param name="webDirectory">New web directory</param>
        </member>
        <member name="T:DuetWebServer.Middleware.CustomEndpointMiddleware">
            <summary>
            Middleware providing with custom HTTP/WebSocket endpoints
            </summary>
        </member>
        <member name="F:DuetWebServer.Middleware.CustomEndpointMiddleware._next">
            <summary>
            Next request delegate to call
            </summary>
        </member>
        <member name="F:DuetWebServer.Middleware.CustomEndpointMiddleware._configuration">
            <summary>
            Configuration of this application
            </summary>
        </member>
        <member name="F:DuetWebServer.Middleware.CustomEndpointMiddleware._logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="M:DuetWebServer.Middleware.CustomEndpointMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger{DuetWebServer.Middleware.CustomEndpointMiddleware})">
            <summary>
            Constructor of this middleware
            </summary>
            <param name="next">Next request delegate</param>
            <param name="configuration">Application configuration</param>
            <param name="logger">Logger instance</param>
        </member>
        <member name="M:DuetWebServer.Middleware.CustomEndpointMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Called when a new HTTP request is received
            </summary>
            <param name="context">HTTP context</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetWebServer.Middleware.CustomEndpointMiddleware.ReadFromWebSocket(System.Net.WebSockets.WebSocket,DuetWebServer.Middleware.HttpEndpointConnection,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Process incoming data from the WebSocket
            </summary>
            <param name="webSocket">Remote WebSocket</param>
            <param name="endpointConnection">Local UNIX socket connection</param>
            <param name="sessionId">Session ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetWebServer.Middleware.CustomEndpointMiddleware.ReadFromUnixSocket(System.Net.WebSockets.WebSocket,DuetWebServer.Middleware.HttpEndpointConnection,System.Threading.CancellationToken)">
            <summary>
            Process incoming data from the UNIX socket
            </summary>
            <param name="webSocket">Remote WebSocket</param>
            <param name="endpointConnection">Local UNIX socket connection</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetWebServer.Middleware.CustomEndpointMiddleware.CloseConnection(System.Net.WebSockets.WebSocket,System.Net.WebSockets.WebSocketCloseStatus,System.String)">
            <summary>
            Close the WebSocket connection again
            </summary>
            <param name="webSocket">WebSocket to close</param>
            <param name="status">Close status to transmit</param>
            <param name="message">Close message</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetWebServer.Middleware.CustomEndpointMiddleware.ProcessRestRequst(Microsoft.AspNetCore.Http.HttpContext,DuetWebServer.Middleware.HttpEndpointConnection,System.Int32)">
            <summary>
            Process a RESTful HTTP request
            </summary>
            <param name="context">HTTP context</param>
            <param name="endpointConnection">Endpoint connection</param>
            <param name="sessionId">Session ID</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetWebServer.Middleware.FallbackMiddleware">
            <summary>
            Middleware class to redirect GET requests without dot in the path to the main index file
            </summary>
        </member>
        <member name="F:DuetWebServer.Middleware.FallbackMiddleware._next">
            <summary>
            Next request delegate in the pipeline
            </summary>
        </member>
        <member name="F:DuetWebServer.Middleware.FallbackMiddleware._logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="M:DuetWebServer.Middleware.FallbackMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{DuetWebServer.Middleware.FallbackMiddleware})">
            <summary>
            Constructor of this middleware
            </summary>
            <param name="next">Next request delegate</param>
            <param name="logger">Logger instance</param>
        </member>
        <member name="M:DuetWebServer.Middleware.FallbackMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Method that is invoked when a new request is coming in.
            Redirects pages that could not be found to the index page
            </summary>
            <param name="context">HTTP context</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetWebServer.Middleware.HttpEndpointConnection">
            <summary>
            Base class for connections that access the control server via the Duet API using a UNIX socket
            </summary>
        </member>
        <member name="F:DuetWebServer.Middleware.HttpEndpointConnection._unixSocket">
            <summary>
            Socket used for inter-process communication
            </summary>
        </member>
        <member name="M:DuetWebServer.Middleware.HttpEndpointConnection.Connect(System.String)">
            <summary>
            Establishes a connection to the given UNIX socket file
            </summary>
            <param name="socketPath">Path to the UNIX socket file</param>
            <exception cref="T:System.IO.IOException">Connection mode is unavailable</exception>
        </member>
        <member name="F:DuetWebServer.Middleware.HttpEndpointConnection.disposed">
            <summary>
            Indicates if this instance has been disposed
            </summary>
        </member>
        <member name="M:DuetWebServer.Middleware.HttpEndpointConnection.Dispose">
            <summary>
            Cleans up the current connection and all resources associated to it
            </summary>
        </member>
        <member name="P:DuetWebServer.Middleware.HttpEndpointConnection.IsConnected">
            <summary>
            Returns true if the socket is still connected
            </summary>
        </member>
        <member name="M:DuetWebServer.Middleware.HttpEndpointConnection.Close">
            <summary>
            Closes the current connection and disposes it
            </summary>
        </member>
        <member name="M:DuetWebServer.Middleware.HttpEndpointConnection.SendHttpRequest(DuetAPI.Commands.ReceivedHttpRequest,System.Threading.CancellationToken)">
            <summary>
            Send an HTTP request notification to the endpoint provider
            </summary>
            <param name="httpRequest">Received HTTP request</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Asynchronous task</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Connection has been closed</exception>
        </member>
        <member name="M:DuetWebServer.Middleware.HttpEndpointConnection.GetHttpResponse(System.Threading.CancellationToken)">
            <summary>
            Read a response to an HTTP request from the endpoint provider
            </summary>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>HTTP response to send</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Connection has been closed</exception>
        </member>
        <member name="M:DuetWebServer.Middleware.HttpEndpointConnection.Receive``1(System.Threading.CancellationToken)">
            <summary>
            Receive a deserialized object from the server
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <typeparam name="T">Type of the received object</typeparam>
            <returns>Received object</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Connection has been closed</exception>
        </member>
        <member name="M:DuetWebServer.Middleware.HttpEndpointConnection.ReceiveJson(System.Threading.CancellationToken)">
            <summary>
            Receive partially deserialized object from the server
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Partially deserialized data</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Connection has been closed</exception>
        </member>
        <member name="M:DuetWebServer.Middleware.HttpEndpointConnection.Send(System.Object,System.Threading.CancellationToken)">
            <summary>
            Serialize an arbitrary object into JSON and send it to the server plus NL
            </summary>
            <param name="obj">Object to send</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Asynchronous task</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Connection has been closed</exception>
        </member>
        <member name="T:DuetWebServer.Program">
            <summary>
            Main class of the ASP.NET Core endpoint
            </summary>
        </member>
        <member name="F:DuetWebServer.Program.DefaultConfigFile">
            <summary>
            Default path to the configuration file
            </summary>
        </member>
        <member name="M:DuetWebServer.Program.Main(System.String[])">
            <summary>
            Called when the application is launched
            </summary>
            <param name="args">Command-line arguments</param>
        </member>
        <member name="M:DuetWebServer.Program.CreateHostBuilder(System.String[])">
            <summary>
            Creates a new WebHost instance
            </summary>
            <param name="args">Command-line arguments</param>
            <returns>Web host builder</returns>
        </member>
        <member name="T:DuetWebServer.Services.ModelObserver">
            <summary>
            Class used to observe the machine model
            </summary>
        </member>
        <member name="F:DuetWebServer.Services.ModelObserver.Endpoints">
            <summary>
            Dictionary of registered third-party paths vs third-party HTTP endpoints
            </summary>
        </member>
        <member name="F:DuetWebServer.Services.ModelObserver.UserSessions">
            <summary>
            Dictionary holding the current user sessions in the form IP vs Id
            </summary>
        </member>
        <member name="P:DuetWebServer.Services.ModelObserver.WebDirectory">
            <summary>
            Path to the web directory
            </summary>
        </member>
        <member name="T:DuetWebServer.Services.ModelObserver.WebDirectoryChanged">
            <summary>
            Delegate for an event that is triggered when the path of the web directory changes
            </summary>
            <param name="webDirectory">New web directory</param>
        </member>
        <member name="F:DuetWebServer.Services.ModelObserver._commandConnection">
            <summary>
            Conenction to resolve file paths
            </summary>
        </member>
        <member name="E:DuetWebServer.Services.ModelObserver.OnWebDirectoryChanged">
            <summary>
            Event that is triggered whenever the web directory path changes
            </summary>
        </member>
        <member name="F:DuetWebServer.Services.ModelObserver._configuration">
            <summary>
            Configuration of this application
            </summary>
        </member>
        <member name="F:DuetWebServer.Services.ModelObserver._logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="F:DuetWebServer.Services.ModelObserver._task">
            <summary>
            Task representing the lifecycle of this service
            </summary>
        </member>
        <member name="F:DuetWebServer.Services.ModelObserver._stopRequest">
            <summary>
            Cancellation token source that is triggered when the service is supposed to shut down
            </summary>
        </member>
        <member name="M:DuetWebServer.Services.ModelObserver.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger{DuetWebServer.Services.ModelObserver})">
            <summary>
            Constructor of this service class
            </summary>
            <param name="configuration">App configuration</param>
            <param name="logger">Logger instance</param>
        </member>
        <member name="M:DuetWebServer.Services.ModelObserver.Dispose">
            <summary>
            Dispose this instance
            </summary>
        </member>
        <member name="M:DuetWebServer.Services.ModelObserver.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Start this service
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetWebServer.Services.ModelObserver.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stop this service
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetWebServer.Services.ModelObserver.Execute">
            <summary>
            Synchronize all registered endpoints and user sessions
            </summary>
        </member>
        <member name="M:DuetWebServer.Services.ModelObserver.Directories_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handler for property changes of the Directories namespace in the machine model
            </summary>
            <param name="sender">Sender object</param>
            <param name="e">Information about the changed property</param>
        </member>
        <member name="T:DuetWebServer.Startup">
            <summary>
            Class used to start the ASP.NET Core endpoint
            </summary>
        </member>
        <member name="F:DuetWebServer.Startup.CorsPolicy">
            <summary>
            Name of the CORS policy to use
            </summary>
        </member>
        <member name="F:DuetWebServer.Startup._configuration">
            <summary>
            Copy of the app configuration
            </summary>
        </member>
        <member name="M:DuetWebServer.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Create a new Startup instance
            </summary>
            <param name="configuration">Launch configuration (see appsettings.json)</param>
        </member>
        <member name="M:DuetWebServer.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure web services and add service to the container
            </summary>
            <param name="services">Service collection</param>
        </member>
        <member name="M:DuetWebServer.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Configure the HTTP request pipeline
            </summary>
            <param name="app">Application builder</param>
            <param name="env">Hosting environment</param>
        </member>
    </members>
</doc>
