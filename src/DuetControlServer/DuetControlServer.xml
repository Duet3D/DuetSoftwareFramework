<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DuetControlServer</name>
    </assembly>
    <members>
        <member name="T:DuetControlServer.Codes.GCodes">
            <summary>
            Static class that processes G-codes in the control server
            </summary>
        </member>
        <member name="F:DuetControlServer.Codes.GCodes._logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="M:DuetControlServer.Codes.GCodes.Process(DuetControlServer.Commands.Code)">
            <summary>
            Process a G-code that should be interpreted by the control server
            </summary>
            <param name="code">Code to process</param>
            <returns>Result of the code if the code completed, else null</returns>
        </member>
        <member name="M:DuetControlServer.Codes.GCodes.CodeExecuted(DuetAPI.Commands.Code)">
            <summary>
            React to an executed G-code before its result is returend
            </summary>
            <param name="code">Code processed by RepRapFirmware</param>
            <returns>Result to output</returns>
            <remarks>This method shall be used only to update values that are time-critical. Others are supposed to be updated via the object model</remarks>
        </member>
        <member name="T:DuetControlServer.Codes.MCodes">
            <summary>
            Static class that processes M-codes in the control server
            </summary>
        </member>
        <member name="F:DuetControlServer.Codes.MCodes._logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="M:DuetControlServer.Codes.MCodes.Process(DuetControlServer.Commands.Code)">
            <summary>
            Process an M-code that should be interpreted by the control server
            </summary>
            <param name="code">Code to process</param>
            <returns>Result of the code if the code completed, else null</returns>
        </member>
        <member name="M:DuetControlServer.Codes.MCodes.CodeExecuted(DuetAPI.Commands.Code)">
            <summary>
            React to an executed M-code before its result is returend
            </summary>
            <param name="code">Code processed by RepRapFirmware</param>
            <returns>Result to output</returns>
            <remarks>This method shall be used only to update values that are time-critical. Others are supposed to be updated via the object model</remarks>
        </member>
        <member name="M:DuetControlServer.Codes.MCodes.Diagnostics(DuetAPI.Commands.CodeResult)">
            <summary>
            Print the diagnostics
            </summary>
            <param name="result">Target to write to</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetControlServer.Codes.TCodes">
            <summary>
            Static class that processes T-codes in the control server
            </summary>
        </member>
        <member name="M:DuetControlServer.Codes.TCodes.Process(DuetAPI.Commands.Code)">
            <summary>
            Process a T-code that should be interpreted by the control server
            </summary>
            <param name="code">Code to process</param>
            <returns>Result of the code if the code completed, else null</returns>
        </member>
        <member name="M:DuetControlServer.Codes.TCodes.CodeExecuted(DuetAPI.Commands.Code)">
            <summary>
            React to an executed T-code before its result is returend
            </summary>
            <param name="code">Code processed by RepRapFirmware</param>
            <returns>Result to output</returns>
        </member>
        <member name="T:DuetControlServer.Commands.AddHttpEndpoint">
            <summary>
            Implementation of the <see cref="T:DuetAPI.Commands.AddHttpEndpoint"/> command
            </summary>
        </member>
        <member name="F:DuetControlServer.Commands.AddHttpEndpoint._logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.AddHttpEndpoint.Execute">
            <summary>
            Add a new HTTP endpoint
            </summary>
            <returns>Reserved file path to a UNIX socket</returns>
        </member>
        <member name="M:DuetControlServer.Commands.AddHttpEndpoint.IsUnixSocketAlive(System.String)">
            <summary>
            Check if the given UNIX socket file is accepting connections
            </summary>
            <param name="filename">Path to the UNIX socket file</param>
            <returns>True if the socket is still active</returns>
        </member>
        <member name="T:DuetControlServer.Commands.AddUserSession">
            <summary>
            Implementation of the <see cref="T:DuetAPI.Commands.AddUserSession"/> command
            </summary>
        </member>
        <member name="F:DuetControlServer.Commands.AddUserSession._idCounter">
            <summary>
            Counter for new user sessions
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.AddUserSession.Execute">
            <summary>
            Add a new user session
            </summary>
            <returns>Session ID</returns>
        </member>
        <member name="T:DuetControlServer.Commands.Code">
            <summary>
            Implementation of the <see cref="T:DuetAPI.Commands.Code"/> command
            </summary>
        </member>
        <member name="F:DuetControlServer.Commands.Code._logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="F:DuetControlServer.Commands.Code._codeStartLocks">
            <summary>
            Array of AsyncLocks to guarantee the ordered start of incoming G/M/T-codes
            </summary>
            <remarks>
            AsyncLock implements an internal waiter queue, so it is safe to rely on it for
            maintaining the right order of codes being executed per code channel
            </remarks>
        </member>
        <member name="F:DuetControlServer.Commands.Code._codeFinishLocks">
            <summary>
            Array of AsyncLocks to guarantee the ordered finishing of G/M/T-codes
            </summary>
        </member>
        <member name="F:DuetControlServer.Commands.Code._cancellationTokenSources">
            <summary>
            List of cancellation tokens to cancel pending codes while they are waiting for their execution
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.Code.Init">
            <summary>
            Initialize the code scheduler
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.Code.CancelPending(DuetAPI.CodeChannel)">
            <summary>
            Cancel pending codes of the given channel
            </summary>
            <param name="channel">Channel to cancel codes from</param>
        </member>
        <member name="T:DuetControlServer.Commands.Code.InternalCodeType">
            <summary>
            Internal type of a code. This reflects the priority as well
            </summary>
        </member>
        <member name="F:DuetControlServer.Commands.Code.InternalCodeType.Regular">
            <summary>
            Regular G/M/T-code
            </summary>
        </member>
        <member name="F:DuetControlServer.Commands.Code.InternalCodeType.Inserted">
            <summary>
            Inserted code from an intercepting connection
            </summary>
        </member>
        <member name="F:DuetControlServer.Commands.Code.InternalCodeType.Macro">
            <summary>
            Code from a macro file
            </summary>
        </member>
        <member name="F:DuetControlServer.Commands.Code.InternalCodeType.InsertedFromMacro">
            <summary>
            Inserted macro code from an intercepting connection
            </summary>
        </member>
        <member name="F:DuetControlServer.Commands.Code.InternalCodeType.Prioritized">
            <summary>
            Code with <see cref="F:DuetAPI.Commands.CodeFlags.IsPrioritized"/> set
            </summary>
        </member>
        <member name="F:DuetControlServer.Commands.Code._codeType">
            <summary>
            Internal type assigned by the code scheduler
            </summary>
        </member>
        <member name="P:DuetControlServer.Commands.Code.IsInsertedFromMacro">
            <summary>
            Indicates if this code originates from an interceptor while in a macro file
            </summary>
        </member>
        <member name="F:DuetControlServer.Commands.Code._codeStartLock">
            <summary>
            Lock that is maintained as long as this code blocks the execution of the next code
            </summary>
        </member>
        <member name="P:DuetControlServer.Commands.Code.CancellationToken">
            <summary>
            Cancellation token that may be used to cancel this code
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.Code.WaitForExecution">
            <summary>
            Create a task that waits until this code can be executed.
            It may be cancelled if this code is supposed to be cancelled before it is started
            </summary>
            <returns>Lock to maintain while the code is being executed internally</returns>
            <exception cref="T:System.OperationCanceledException">Code has been cancelled</exception>
        </member>
        <member name="M:DuetControlServer.Commands.Code.StartNextCode">
            <summary>
            Start the next available G/M/T-code unless this code has already started one
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.Code.WaitForFinish">
            <summary>
            Start the next available G/M/T-code and wait until this code may finish
            </summary>
            <returns></returns>
        </member>
        <member name="M:DuetControlServer.Commands.Code.WaitForInsertedCodes">
            <summary>
            Wait for inserted codes to be internally processed
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="F:DuetControlServer.Commands.Code.WaitingForFlush">
            <summary>
            Indicates if this code is waiting for a flush request
            </summary>
        </member>
        <member name="F:DuetControlServer.Commands.Code.FileLocks">
            <summary>
            Lock around the files being written
            </summary>
        </member>
        <member name="F:DuetControlServer.Commands.Code.FilesBeingWritten">
            <summary>
            Current stream writer of the files being written to (M28/M29)
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.Code.#ctor">
            <summary>
            Constructor of a new code
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.Code.#ctor(System.String)">
            <summary>
            Constructor of a new code which also parses the given text-based G/M/T-code
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.Code.EmulatingMarlin">
            <summary>
            Check if Marlin is being emulated
            </summary>
            <returns>True if Marlin is being emulated</returns>
        </member>
        <member name="P:DuetControlServer.Commands.Code.CancellingPrint">
            <summary>
            This indicates if this code is cancelling a print.
            FIXME Remove this again when the SBC interface has got its own task in RRF
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.Code.Execute">
            <summary>
            Run an arbitrary G/M/T-code and wait for it to finish
            </summary>
            <returns>Result of the code</returns>
            <exception cref="T:System.OperationCanceledException">Code has been cancelled</exception>
        </member>
        <member name="F:DuetControlServer.Commands.Code.InternallyProcessed">
            <summary>
            Indicates whether the code has been internally processed
            </summary>
        </member>
        <member name="F:DuetControlServer.Commands.Code.ResolvedByInterceptor">
            <summary>
            Indicates if this code has been resolved by an interceptor
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.Code.ExecuteInternally">
            <summary>
            Execute the given code internally
            </summary>
            <returns>Result of the code</returns>
        </member>
        <member name="M:DuetControlServer.Commands.Code.Process">
            <summary>
            Process the code
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.Commands.Code.ProcessInternally">
            <summary>
            Attempt to process this code internally
            </summary>
            <returns>Whether the code could be processed internally</returns>
        </member>
        <member name="M:DuetControlServer.Commands.Code.CodeExecuted">
            <summary>
            Executed when the code has finished
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetControlServer.Commands.Flush">
            <summary>
            Implementation of the <see cref="T:DuetAPI.Commands.Flush"/> command
            </summary>
        </member>
        <member name="P:DuetControlServer.Commands.Flush.SourceConnection">
            <summary>
            Source connection of this command
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.Flush.Execute">
            <summary>
            Wait for all pending codes of the given channel to finish
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetControlServer.Commands.GetFileInfo">
            <summary>
            Implementation of the <see cref="T:DuetAPI.Commands.GetFileInfo"/> command
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.GetFileInfo.Execute">
            <summary>
            Retrieves file information from the given filename
            </summary>
            <returns>File info</returns>
        </member>
        <member name="T:DuetControlServer.Commands.GetMachineModel">
            <summary>
            Implementation of the <see cref="T:DuetAPI.Commands.Command"/> command
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.GetMachineModel.Execute">
            <summary>
            Retrieve a copy of the current machine model
            </summary>
            <returns>Clone of the current machine model</returns>
        </member>
        <member name="T:DuetControlServer.Commands.LockMachineModel">
            <summary>
            Implementation of the <see cref="T:DuetAPI.Commands.LockMachineModel"/> command
            </summary>
        </member>
        <member name="P:DuetControlServer.Commands.LockMachineModel.SourceConnection">
            <summary>
            Source connection of this command. Needed to register the owner of the lock
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.LockMachineModel.Execute">
            <summary>
            Lock the machine model for write access
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetControlServer.Commands.RemoveHttpEndpoint">
            <summary>
            Implementation of the <see cref="T:DuetAPI.Commands.RemoveHttpEndpoint"/> command
            </summary>
        </member>
        <member name="F:DuetControlServer.Commands.RemoveHttpEndpoint._logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.RemoveHttpEndpoint.Execute">
            <summary>
            Remove a third-party HTTP endpoint
            </summary>
            <returns>True if the endpint could be removed</returns>
        </member>
        <member name="T:DuetControlServer.Commands.RemoveUserSession">
            <summary>
            Implementation of the <see cref="T:DuetAPI.Commands.RemoveUserSession"/> command
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.RemoveUserSession.Execute">
            <summary>
            Remove an existing user session
            </summary>
            <returns>True if the user session could be removed</returns>
        </member>
        <member name="T:DuetControlServer.Commands.ResolvePath">
            <summary>
            Implementation of the <see cref="T:DuetAPI.Commands.ResolvePath"/> command
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.ResolvePath.Execute">
            <summary>
            Resolve the given RepRapFirmware-style filename to an absolute path
            </summary>
            <returns>Absolute file path</returns>
        </member>
        <member name="T:DuetControlServer.Commands.SetMachineModel">
            <summary>
            Implementation of the <see cref="T:DuetAPI.Commands.SetMachineModel"/> command
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.SetMachineModel.Execute">
            <summary>
            Set an atomic property in the object model
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetControlServer.Commands.SimpleCode">
            <summary>
            Implementation of the <see cref="T:DuetAPI.Commands.SimpleCode"/> command
            </summary>
        </member>
        <member name="F:DuetControlServer.Commands.SimpleCode._channelLocks">
            <summary>
            Locks to avoid race conditions when executing multiple text-based codes via the same channel
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.SimpleCode.Init">
            <summary>
            Initialize this class
            </summary>
        </member>
        <member name="P:DuetControlServer.Commands.SimpleCode.SourceConnection">
            <summary>
            Source connection of this command
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.SimpleCode.Parse">
            <summary>
            Parse codes from the given input string
            </summary>
            <returns>Parsed G/M/T-codes</returns>
        </member>
        <member name="M:DuetControlServer.Commands.SimpleCode.Execute">
            <summary>
            Converts simple G/M/T-codes to a regular Code instances, executes them and returns the result as text
            </summary>
            <returns>Code result as text</returns>
            <exception cref="T:System.OperationCanceledException">Code has been cancelled</exception>
        </member>
        <member name="T:DuetControlServer.Commands.SyncMachineModel">
            <summary>
            Implementation of the <see cref="T:DuetAPI.Commands.SyncMachineModel"/> command
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.SyncMachineModel.Execute">
            <summary>
            Waits for the machine model to be fully updated from RepRapFirmware
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetControlServer.Commands.UnlockMachineModel">
            <summary>
            Implementation of the <see cref="T:DuetAPI.Commands.UnlockMachineModel"/> command
            </summary>
        </member>
        <member name="P:DuetControlServer.Commands.UnlockMachineModel.SourceConnection">
            <summary>
            Source connection of this command. Needed to register the owner of the lock
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.UnlockMachineModel.Execute">
            <summary>
            Unlock the machine model again
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetControlServer.Commands.WriteMessage">
            <summary>
            Implementation of the <see cref="T:DuetAPI.Commands.WriteMessage"/> command
            </summary>
        </member>
        <member name="F:DuetControlServer.Commands.WriteMessage._logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.WriteMessage.Execute">
            <summary>
            Write an arbitrary message
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetControlServer.FileExecution.BaseFile">
            <summary>
            Base class for files that read G-codes line by line
            </summary>
        </member>
        <member name="F:DuetControlServer.FileExecution.BaseFile._fileStream">
            <summary>
            File being read from
            </summary>
        </member>
        <member name="F:DuetControlServer.FileExecution.BaseFile._reader">
            <summary>
            Reader for the file stream
            </summary>
        </member>
        <member name="P:DuetControlServer.FileExecution.BaseFile.FileName">
            <summary>
            File path to the file being executed
            </summary>
        </member>
        <member name="P:DuetControlServer.FileExecution.BaseFile.Channel">
            <summary>
            Channel to send the codes to
            </summary>
        </member>
        <member name="P:DuetControlServer.FileExecution.BaseFile.Position">
            <summary>
            Gets or sets the current file position in bytes
            </summary>
        </member>
        <member name="P:DuetControlServer.FileExecution.BaseFile.LineNumber">
            <summary>
            Number of the current line
            </summary>
        </member>
        <member name="P:DuetControlServer.FileExecution.BaseFile.Length">
            <summary>
            Returns the length of the file in bytes
            </summary>
        </member>
        <member name="P:DuetControlServer.FileExecution.BaseFile.IsAborted">
            <summary>
            Indicates if this file is supposed to be aborted
            </summary>
        </member>
        <member name="P:DuetControlServer.FileExecution.BaseFile.IsFinished">
            <summary>
            Indicates if the file has been finished
            </summary>
        </member>
        <member name="M:DuetControlServer.FileExecution.BaseFile.Abort">
            <summary>
            Request cancellation of this file
            </summary>
        </member>
        <member name="M:DuetControlServer.FileExecution.BaseFile.#ctor(System.String,DuetAPI.CodeChannel)">
            <summary>
            Constructor of the base class for reading from a G-code file
            </summary>
            <param name="fileName">Name of the file to process or null if it is optional</param>
            <param name="channel">Channel to send the codes to</param>
        </member>
        <member name="M:DuetControlServer.FileExecution.BaseFile.Finalize">
            <summary>
            Finalizer of a base file
            </summary>
        </member>
        <member name="M:DuetControlServer.FileExecution.BaseFile.Dispose">
            <summary>
            Dispose this instance
            </summary>
        </member>
        <member name="F:DuetControlServer.FileExecution.BaseFile.disposed">
            <summary>
            Indicates if this instance has been disposed
            </summary>
        </member>
        <member name="M:DuetControlServer.FileExecution.BaseFile.Dispose(System.Boolean)">
            <summary>
            Dispose this instance internally
            </summary>
            <param name="disposing">True if this instance is being disposed</param>
        </member>
        <member name="M:DuetControlServer.FileExecution.BaseFile.ReadCode">
            <summary>
            Read the next available code
            </summary>
            <returns>Read code or null if none found</returns>
        </member>
        <member name="T:DuetControlServer.FileExecution.MacroFile">
            <summary>
            Implementation of a macro file
            </summary>
        </member>
        <member name="P:DuetControlServer.FileExecution.MacroFile.RunningConfig">
            <summary>
            Indicates if config.g is being processed
            </summary>
        </member>
        <member name="F:DuetControlServer.FileExecution.MacroFile._logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="P:DuetControlServer.FileExecution.MacroFile.IsConfig">
            <summary>
            Whether this file is config.g or config.g.bak
            </summary>
        </member>
        <member name="P:DuetControlServer.FileExecution.MacroFile.IsConfigOverride">
            <summary>
            Whether this file is config-override.g
            </summary>
        </member>
        <member name="P:DuetControlServer.FileExecution.MacroFile.StartCode">
            <summary>
            The queued code which originally started this macro file or null
            </summary>
        </member>
        <member name="P:DuetControlServer.FileExecution.MacroFile.PendingCodes">
            <summary>
            Pending codes being started by a nested macro (and multiple codes may be started by an interceptor).
            This is required because it may take a moment until they are internally processed
            </summary>
        </member>
        <member name="P:DuetControlServer.FileExecution.MacroFile.PendingFlushRequests">
            <summary>
            Queue of pending flush requests
            </summary>
        </member>
        <member name="M:DuetControlServer.FileExecution.MacroFile.#ctor(System.String,DuetAPI.CodeChannel,DuetControlServer.SPI.QueuedCode)">
            <summary>
            Create a new macro instance
            </summary>
            <param name="fileName">Filename of the macro</param>
            <param name="channel">Channel to send the codes to</param>
            <param name="startCode">Which code is starting this macro file</param>
        </member>
        <member name="M:DuetControlServer.FileExecution.MacroFile.Dispose(System.Boolean)">
            <summary>
            Called when this instance is being disposed
            </summary>
            <param name="disposing">True if managed resources are being disposed</param>
        </member>
        <member name="M:DuetControlServer.FileExecution.MacroFile.Abort">
            <summary>
            Abort the execution of this file
            </summary>
        </member>
        <member name="T:DuetControlServer.FileExecution.MacroFile.ConfigExtraSteps">
            <summary>
            Extra steps to perform before config.g is processed
            </summary>
        </member>
        <member name="F:DuetControlServer.FileExecution.MacroFile._extraStep">
            <summary>
            Current extra step being performed (provided config.g is being executed)
            </summary>
        </member>
        <member name="M:DuetControlServer.FileExecution.MacroFile.ReadCode">
            <summary>
            Read another code from the file being executed asynchronously
            </summary>
            <returns>Next available code or null if the file has ended</returns>
        </member>
        <member name="T:DuetControlServer.FileExecution.Print">
            <summary>
            Main class dealing with file prints.
            Lock this class whenver it is accessed (except for Diagnostics)
            </summary>
        </member>
        <member name="F:DuetControlServer.FileExecution.Print._logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="F:DuetControlServer.FileExecution.Print._lock">
            <summary>
            Lock around the print class
            </summary>
        </member>
        <member name="M:DuetControlServer.FileExecution.Print.LockAsync">
            <summary>
            Lock this class asynchronously
            </summary>
            <returns>Disposable lock</returns>
        </member>
        <member name="F:DuetControlServer.FileExecution.Print._resume">
            <summary>
            Condition to trigger when the print is supposed to resume
            </summary>
        </member>
        <member name="F:DuetControlServer.FileExecution.Print._finished">
            <summary>
            Condition to trigger when the print has finished
            </summary>
        </member>
        <member name="F:DuetControlServer.FileExecution.Print._file">
            <summary>
            Job file being read from
            </summary>
        </member>
        <member name="P:DuetControlServer.FileExecution.Print.IsFileSelected">
            <summary>
            Indicates if a file has been selected for printing
            </summary>
        </member>
        <member name="P:DuetControlServer.FileExecution.Print.IsPrinting">
            <summary>
            Indicates if a print is live
            </summary>
        </member>
        <member name="P:DuetControlServer.FileExecution.Print.IsSimulating">
            <summary>
            Indicates if a file is being simulated
            </summary>
        </member>
        <member name="P:DuetControlServer.FileExecution.Print.IsPaused">
            <summary>
            Indicates if the file print has been paused
            </summary>
        </member>
        <member name="P:DuetControlServer.FileExecution.Print.IsAborted">
            <summary>
            Indicates if the file print has been aborted
            </summary>
        </member>
        <member name="F:DuetControlServer.FileExecution.Print._pausePosition">
            <summary>
            Defines if the file position is supposed to be set by the Print task
            </summary>
        </member>
        <member name="F:DuetControlServer.FileExecution.Print._pauseReason">
            <summary>
            Reason why the print has been paused
            </summary>
        </member>
        <member name="P:DuetControlServer.FileExecution.Print.FilePosition">
            <summary>
            Reports the current file position
            </summary>
        </member>
        <member name="P:DuetControlServer.FileExecution.Print.FileLength">
            <summary>
            Returns the length of the file being printed in bytes
            </summary>
        </member>
        <member name="M:DuetControlServer.FileExecution.Print.SelectFile(System.String,System.Boolean)">
            <summary>
            Start a new file print
            </summary>
            <param name="fileName">File to print</param>
            <param name="simulating">Whether the file is being simulated</param>
            <returns>Asynchronous task</returns>
            <remarks>
            This class has to be locked when this method is called
            </remarks>
        </member>
        <member name="M:DuetControlServer.FileExecution.Print.Run">
            <summary>
            Perform actual print jobs
            </summary>
        </member>
        <member name="M:DuetControlServer.FileExecution.Print.Pause(System.Nullable{System.Int64},DuetControlServer.SPI.Communication.PrintPausedReason)">
            <summary>
            Called when the print is being paused
            </summary>
            <param name="filePosition">File position where the print was paused</param>
            <param name="pauseReason">Reason why the print has been paused</param>
        </member>
        <member name="M:DuetControlServer.FileExecution.Print.Resume">
            <summary>
            Resume a file print
            </summary>
        </member>
        <member name="M:DuetControlServer.FileExecution.Print.Cancel">
            <summary>
            Cancel the current print (e.g. when M0 is called)
            </summary>
        </member>
        <member name="M:DuetControlServer.FileExecution.Print.Abort">
            <summary>
            Abort the current print. This is called when the print could not complete as expected
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.FileExecution.Print.Diagnostics(System.Text.StringBuilder)">
            <summary>
            Print diagnostics of this class
            </summary>
            <param name="builder">String builder</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetControlServer.IPC.Connection">
            <summary>
            Wrapper around UNIX socket connections
            </summary>
        </member>
        <member name="F:DuetControlServer.IPC.Connection._idCounter">
            <summary>
            Counter for new connections
            </summary>
        </member>
        <member name="F:DuetControlServer.IPC.Connection.Logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="P:DuetControlServer.IPC.Connection.Id">
            <summary>
            Identifier of this connection
            </summary>
        </member>
        <member name="F:DuetControlServer.IPC.Connection._unixSocket">
            <summary>
            Socket holding the connection of the UNIX socket
            </summary>
        </member>
        <member name="M:DuetControlServer.IPC.Connection.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Constructor for new connections
            </summary>
            <param name="socket">New UNIX socket</param>
        </member>
        <member name="F:DuetControlServer.IPC.Connection.disposed">
            <summary>
            Indicates if the connection has been disposed
            </summary>
        </member>
        <member name="M:DuetControlServer.IPC.Connection.Dispose">
            <summary>
            Dispose this connection
            </summary>
        </member>
        <member name="P:DuetControlServer.IPC.Connection.IsConnected">
            <summary>
            Indicates if the connection is still available
            </summary>
        </member>
        <member name="M:DuetControlServer.IPC.Connection.ReceiveJson">
            <summary>
            Read a generic JSON object from the socket
            </summary>
            <returns>JsonDocument for deserialization</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Connection has been closed</exception>
        </member>
        <member name="M:DuetControlServer.IPC.Connection.ReceivePlainJson">
            <summary>
            Read a plain JSON object as a string from the socket
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>JsonDocument for deserialization</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Connection has been closed</exception>
        </member>
        <member name="M:DuetControlServer.IPC.Connection.ReceiveCommand">
            <summary>
            Receive a fully-populated instance of a BaseCommand from the client
            </summary>
            <returns>Received command or null if nothing could be read</returns>
            <exception cref="T:System.ArgumentException">Received bad command</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Connection has been closed</exception>
        </member>
        <member name="M:DuetControlServer.IPC.Connection.GetCommandType(System.String)">
            <summary>
            Retrieve the type of a supported command
            </summary>
            <param name="name">Name of the command</param>
            <returns>Type of the command or null if none found</returns>
        </member>
        <member name="M:DuetControlServer.IPC.Connection.SetSourceConnection(DuetAPI.Commands.BaseCommand)">
            <summary>
            Assign the source connection to a command
            </summary>
            <param name="command">Deserialized command</param>
        </member>
        <member name="M:DuetControlServer.IPC.Connection.SendResponse(System.Object)">
            <summary>
            Send a response to the client. The given object is send either in an empty, error, or standard response body
            </summary>
            <param name="obj">Object to send</param>
            <returns>Asynchronous task</returns>
            <exception cref="T:System.Net.Sockets.SocketException">Message could not be sent</exception>
        </member>
        <member name="M:DuetControlServer.IPC.Connection.Send(System.Object)">
            <summary>
            Send a JSON object to the client
            </summary>
            <param name="obj">Object to send</param>
            <returns>Asynchronous task</returns>
            <exception cref="T:System.Net.Sockets.SocketException">Message could not be sent</exception>
        </member>
        <member name="M:DuetControlServer.IPC.Connection.Poll">
            <summary>
            Check if the connection is still alive
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">Connection is no longer available</exception>
        </member>
        <member name="T:DuetControlServer.IPC.LockManager">
            <summary>
            Static class to manage read/write locks of third-party plugins
            </summary>
        </member>
        <member name="F:DuetControlServer.IPC.LockManager._lockConnection">
            <summary>
            Source connection that acquired the current lock
            </summary>
        </member>
        <member name="P:DuetControlServer.IPC.LockManager.IsLocked">
            <summary>
            Indicates if a third-party application has locked the object model for writing
            </summary>
        </member>
        <member name="F:DuetControlServer.IPC.LockManager._lock">
            <summary>
            Read/write lock held by a third-party plugins
            </summary>
        </member>
        <member name="M:DuetControlServer.IPC.LockManager.LockMachineModel(System.Int32)">
            <summary>
            Function to create a read/write lock to the object model
            </summary>
            <param name="sourceConnection">Source connection acquiring the lock</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.IPC.LockManager.UnlockMachineModel(System.Int32)">
            <summary>
            Unlock the machine model again
            </summary>
            <param name="sourceConnection">Source connection</param>
        </member>
        <member name="T:DuetControlServer.IPC.Processors.Base">
            <summary>
            Base class for connection interpreters
            </summary>
            <seealso cref="T:DuetAPI.Connection.ConnectionMode"/>
        </member>
        <member name="P:DuetControlServer.IPC.Processors.Base.Connection">
            <summary>
            Connection to the IPC client served by this processor
            </summary>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Base.#ctor(DuetControlServer.IPC.Connection)">
            <summary>
            Base constructor for connection interpreters. Invoke this from any derived class
            </summary>
            <param name="conn">Connection instance</param>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Base.Process">
            <summary>
            Worker method for a given connection.
            No <see cref="T:System.Threading.CancellationToken"/> is passed here, use <see cref="F:DuetControlServer.Program.CancellationToken"/> instead.
            Once this task exits the connection is terminated.
            </summary>
            <returns>Task that represents the worker lifecycle</returns>
            <exception cref="T:System.NotImplementedException">Thrown if this method is not overridden</exception>
        </member>
        <member name="T:DuetControlServer.IPC.Processors.Command">
            <summary>
            Command interpreter for client requests
            </summary>
        </member>
        <member name="F:DuetControlServer.IPC.Processors.Command.SupportedCommands">
            <summary>
            List of supported commands in this mode
            </summary>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Command.#ctor(DuetControlServer.IPC.Connection)">
            <summary>
            Constructor of the command interpreter
            </summary>
            <param name="conn">Connection instance</param>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Command.Process">
            <summary>
            Reads incoming command requests and processes them. See <see cref="N:DuetAPI.Commands"/> namespace for a list
            of supported commands. The actual implementations can be found in <see cref="N:DuetControlServer.Commands"/>.
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetControlServer.IPC.Processors.Interception">
            <summary>
            Interception processor that notifies clients about G/M/T-codes being processed
            </summary>
        </member>
        <member name="F:DuetControlServer.IPC.Processors.Interception.SupportedCommands">
            <summary>
            List of supported commands in this mode
            </summary>
            <remarks>
            In addition to these commands, commands of the <see cref="T:DuetControlServer.IPC.Processors.Command"/> interpreter are supported while a code is being intercepted
            </remarks>
        </member>
        <member name="T:DuetControlServer.IPC.Processors.Interception.ConnectionContainer">
            <summary>
            Class to hold intercepting connections and a corresponding lock
            </summary>
        </member>
        <member name="F:DuetControlServer.IPC.Processors.Interception.ConnectionContainer.InterceptingConnection">
            <summary>
            Connection intercepting a running code
            </summary>
        </member>
        <member name="F:DuetControlServer.IPC.Processors.Interception.ConnectionContainer._lock">
            <summary>
            Asynchronous lock for this interception type
            </summary>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Interception.ConnectionContainer.LockAsync">
            <summary>
            Lock this connection container
            </summary>
            <returns>Disposable lock</returns>
        </member>
        <member name="F:DuetControlServer.IPC.Processors.Interception.ConnectionContainer.Items">
            <summary>
            List of intercepting connections
            </summary>
        </member>
        <member name="F:DuetControlServer.IPC.Processors.Interception.ConnectionContainer.CodeBeingIntercepted">
            <summary>
            Current code being intercepted
            </summary>
        </member>
        <member name="F:DuetControlServer.IPC.Processors.Interception._connections">
            <summary>
            Dictionary of interception mode vs item containers
            </summary>
        </member>
        <member name="F:DuetControlServer.IPC.Processors.Interception._mode">
            <summary>
            Mode of this interceptor
            </summary>
        </member>
        <member name="F:DuetControlServer.IPC.Processors.Interception._codeQueue">
            <summary>
            Codes that have been queued for this interceptor
            </summary>
        </member>
        <member name="F:DuetControlServer.IPC.Processors.Interception._commandQueue">
            <summary>
            Commands that have been queued by the processor for the codes being intercepted
            </summary>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Interception.#ctor(DuetControlServer.IPC.Connection,DuetAPI.Connection.InitMessages.ClientInitMessage)">
            <summary>
            Constructor of the interception processor
            </summary>
            <param name="conn">Connection instance</param>
            <param name="initMessage">Initialization message</param>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Interception.Process">
            <summary>
            Waits for commands to be received and enqueues them in a concurrent queue so that a <see cref="T:DuetAPI.Commands.Code"/>
            can decide when to cancel/resume/resolve the execution.
            </summary>
            <returns>Task that represents the lifecycle of the connection</returns>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Interception.Intercept(DuetAPI.Commands.Code)">
            <summary>
            Called by the <see cref="T:DuetAPI.Commands.Code"/> implementation to check if the client wants to intercept a G/M/T-code
            </summary>
            <param name="code">Code to intercept</param>
            <returns>True if the code has been resolved</returns>
            <exception cref="T:System.OperationCanceledException">Code has been cancelled</exception>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Interception.Intercept(DuetControlServer.Commands.Code,DuetAPI.Connection.InterceptionMode)">
            <summary>
            Called by the <see cref="T:DuetAPI.Commands.Code"/> class to intercept a code.
            This method goes through each connected interception channel and notifies the clients.
            </summary>
            <param name="code">Code to intercept</param>
            <param name="type">Type of the interception</param>
            <returns>True if the code has been resolved</returns>
            <exception cref="T:System.OperationCanceledException">Code has been cancelled</exception>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Interception.IsInterceptingConnection(System.Int32)">
            <summary>
            Checks if the given connection is currently intercepting a code
            </summary>
            <param name="connection">Connection ID to check</param>
            <returns>True if the connection is intercepting a code</returns>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Interception.GetInterceptingCode(System.Int32)">
            <summary>
            Checks if the given connection is currently intercepting a code and returns the code being intercepted
            </summary>
            <param name="sourceConnection">Connection to check</param>
            <returns>Code being intercepted</returns>
        </member>
        <member name="T:DuetControlServer.IPC.Processors.Subscription">
            <summary>
            Subscription processor that notifies clients about object model changes.
            There is no point in deserializing the object model here so only the JSON representation is kept here.
            </summary>
        </member>
        <member name="F:DuetControlServer.IPC.Processors.Subscription.SupportedCommands">
            <summary>
            List of supported commands in this mode
            </summary>
        </member>
        <member name="F:DuetControlServer.IPC.Processors.Subscription._subscriptions">
            <summary>
            List of active subscribers
            </summary>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Subscription.AreClientsConnected">
            <summary>
            Checks if any subscribers are connected
            </summary>
            <returns>True if subscribers are connected</returns>
        </member>
        <member name="F:DuetControlServer.IPC.Processors.Subscription._mode">
            <summary>
            Mode of this subscriber
            </summary>
        </member>
        <member name="F:DuetControlServer.IPC.Processors.Subscription._filters">
            <summary>
            List of filters (in Patch mode)
            </summary>
        </member>
        <member name="F:DuetControlServer.IPC.Processors.Subscription._patch">
            <summary>
            Dictionary of updated fields (in Patch mode)
            </summary>
        </member>
        <member name="F:DuetControlServer.IPC.Processors.Subscription._updateAvailableEvent">
            <summary>
            Event that is triggered when the object model has been updated
            </summary>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Subscription.#ctor(DuetControlServer.IPC.Connection,DuetAPI.Connection.InitMessages.ClientInitMessage)">
            <summary>
            Constructor of the subscription processor
            </summary>
            <param name="conn">Connection instance</param>
            <param name="initMessage">Initialization message</param>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Subscription.Process">
            <summary>
            Task that keeps pushing model updates to the client
            </summary>
            <returns>Task that represents the lifecycle of a connection</returns>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Subscription.CheckFilter(System.Object[],System.String[])">
            <summary>
            Checks if one of the given filters applies to the path
            </summary>
            <param name="path">Patch path</param>
            <param name="filters">Subscription filters</param>
            <returns>True if a filter applies</returns>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Subscription.CheckFilter(System.Object[])">
            <summary>
            Check if the change of the given path has to be recorded
            </summary>
            <param name="path">Change path</param>
            <returns>True if a filter applies</returns>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Subscription.GetPathNode(System.Object[])">
            <summary>
            Get the object from a path node
            </summary>
            <param name="path">Path node</param>
            <returns>Dictionary or list</returns>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Subscription.MachineModelPropertyChanged(System.Object[],DuetControlServer.Model.PropertyPathChangeType,System.Object)">
            <summary>
            Method that is called when a property of the machine model has changed
            </summary>
            <param name="path">Path to the property</param>
            <param name="pathType">Type of the path</param>
            <param name="value">New value</param>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Subscription.ModelUpdated">
            <summary>
            Called to notify the subscribers about a model update
            </summary>
        </member>
        <member name="T:DuetControlServer.IPC.Server">
            <summary>
            Static class that holds main functionality for inter-process communication
            </summary>
        </member>
        <member name="F:DuetControlServer.IPC.Server._unixSocket">
            <summary>
            UNIX socket for inter-process communication
            </summary>
        </member>
        <member name="M:DuetControlServer.IPC.Server.Init">
            <summary>
            Initialize the IPC subsystem and start listening for connections
            </summary>
        </member>
        <member name="M:DuetControlServer.IPC.Server.Run">
            <summary>
            Process incoming connections
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.IPC.Server.ProcessConnection(System.Net.Sockets.Socket)">
            <summary>
            Function that is called when a new connection has been established
            </summary>
            <param name="socket">Socket of the new connection</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.IPC.Server.GetConnectionProcessor(DuetControlServer.IPC.Connection)">
            <summary>
            Attempt to retrieve a processor for the given connection
            </summary>
            <param name="conn">Connection to get a processor for</param>
            <returns>Instance of a base processor</returns>
        </member>
        <member name="T:DuetControlServer.Model.ItemPathNode">
            <summary>
            Node of an object model path pointing to a list item
            </summary>
        </member>
        <member name="F:DuetControlServer.Model.ItemPathNode.Name">
            <summary>
            Name of the list
            </summary>
        </member>
        <member name="F:DuetControlServer.Model.ItemPathNode.Index">
            <summary>
            Index of the item
            </summary>
        </member>
        <member name="F:DuetControlServer.Model.ItemPathNode.Count">
            <summary>
            Count of the list owning this item
            </summary>
        </member>
        <member name="M:DuetControlServer.Model.ItemPathNode.ToString">
            <summary>
            Convert an item node to a string (for debugging)
            </summary>
            <returns>String representation of this node</returns>
        </member>
        <member name="T:DuetControlServer.Model.PropertyPathChangeType">
            <summary>
            Type of path modification
            </summary>
        </member>
        <member name="F:DuetControlServer.Model.PropertyPathChangeType.Property">
            <summary>
            Property has changed
            </summary>
            <remarks>Value is the property value</remarks>
        </member>
        <member name="F:DuetControlServer.Model.PropertyPathChangeType.ObjectCollection">
            <summary>
            Object collection has changed (e.g. tools)
            </summary>
            <remarks>Value is the number of new items</remarks>
        </member>
        <member name="F:DuetControlServer.Model.PropertyPathChangeType.ValueCollection">
            <summary>
            Value collection has changed (e.g. heater temperatures)
            </summary>
            <remarks>Value is the collection itself</remarks>
        </member>
        <member name="F:DuetControlServer.Model.PropertyPathChangeType.GrowingCollection">
            <summary>
            Growing collection has changed (messages or job layers)
            </summary>
            <remarks>If value is null, the list has been cleared, else only the added items are passed</remarks>
        </member>
        <member name="T:DuetControlServer.Model.Observer">
            <summary>
            Static class that observes the main machine model and calls an event whenever a deep value has changed
            </summary>
        </member>
        <member name="T:DuetControlServer.Model.Observer.PropertyPathChanged">
            <summary>
            Delegate to call when a property is being changed
            </summary>
            <param name="path">Path to the value that changed</param>
            <param name="changeType">Type of the modification</param>
            <param name="value">New value</param>
        </member>
        <member name="E:DuetControlServer.Model.Observer.OnPropertyPathChanged">
            <summary>
            Event to call when a deep value has changed
            </summary>
        </member>
        <member name="M:DuetControlServer.Model.Observer.Init">
            <summary>
            Initializes the observer to keep track of deep changes in the object model
            </summary>
        </member>
        <member name="T:DuetControlServer.Model.PeriodicUpdater">
            <summary>
            Static class that updates the machine model in certain intervals
            </summary>
        </member>
        <member name="F:DuetControlServer.Model.PeriodicUpdater._logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="M:DuetControlServer.Model.PeriodicUpdater.Run">
            <summary>
            Run model updates in a certain interval.
            This function updates host properties like network interfaces and storage devices
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.Model.PeriodicUpdater.UpdateNetwork">
            <summary>
            Update network interfaces
            </summary>
        </member>
        <member name="M:DuetControlServer.Model.PeriodicUpdater.UpdateStorages">
            <summary>
            Update storage devices
            </summary>
            <remarks>
            Storage 0 always represents the root (/) on Linux. The following code achieves this but it
            might need further adjustments to ensure this on every Linux distribution
            </remarks>
        </member>
        <member name="M:DuetControlServer.Model.PeriodicUpdater.CleanMessages">
            <summary>
            Clean expired messages
            </summary>
        </member>
        <member name="T:DuetControlServer.Model.Provider">
            <summary>
            Provider for the machine's object model to provides thread-safe read/write access.
            Make sure to access the machine model only when atomic operations are performed
            so that pending updates can be performed as quickly as possible.
            </summary>
        </member>
        <member name="F:DuetControlServer.Model.Provider._logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="T:DuetControlServer.Model.Provider.LockWrapper">
            <summary>
            Wrapper around the lock which notifies subscribers whenever an update has been processed.
            It is also able to detect the origin of model-related deadlocks
            </summary>
        </member>
        <member name="F:DuetControlServer.Model.Provider.LockWrapper._lock">
            <summary>
            Internal lock
            </summary>
        </member>
        <member name="F:DuetControlServer.Model.Provider.LockWrapper._releaseCts">
            <summary>
            CTS to trigger when the lock is being released
            </summary>
        </member>
        <member name="F:DuetControlServer.Model.Provider.LockWrapper._combinedCts">
            <summary>
            CTS to trigger when the lock is released or the program is being terminated
            </summary>
        </member>
        <member name="M:DuetControlServer.Model.Provider.LockWrapper.#ctor(System.IDisposable,System.Boolean)">
            <summary>
            Constructor of the lock wrapper
            </summary>
            <param name="lockItem">Actual lock</param>
            <param name="isWriteLock">Whether the lock is a read/write lock</param>
        </member>
        <member name="M:DuetControlServer.Model.Provider.LockWrapper.Dispose">
            <summary>
            Dipose method that is called when the lock is released
            </summary>
        </member>
        <member name="F:DuetControlServer.Model.Provider._lock">
            <summary>
            Lock for read/write access
            </summary>
        </member>
        <member name="M:DuetControlServer.Model.Provider.Init">
            <summary>
            Initialize the object model provider with values that are not expected to change
            </summary>
        </member>
        <member name="M:DuetControlServer.Model.Provider.AccessReadOnlyAsync">
            <summary>
            Access the machine model asynchronously for read operations only
            </summary>
            <returns>Disposable lock object to be used with a using directive</returns>
        </member>
        <member name="M:DuetControlServer.Model.Provider.AccessReadWriteAsync">
            <summary>
            Access the machine model asynchronously for read/write operations
            </summary>
            <returns>Disposable lock object to be used with a using directive</returns>
        </member>
        <member name="P:DuetControlServer.Model.Provider.Get">
            <summary>
            Get the machine model. Make sure to call the acquire the corresponding lock first!
            </summary>
            <returns>Current Duet machine object model</returns>
            <seealso cref="M:DuetControlServer.Model.Provider.AccessReadOnlyAsync"/>
            <seealso cref="M:DuetControlServer.Model.Provider.AccessReadWriteAsync"/>
        </member>
        <member name="M:DuetControlServer.Model.Provider.Output(DuetAPI.Message)">
            <summary>
            Output a generic message
            </summary>
            <param name="message">Message to output</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.Model.Provider.Output(DuetAPI.MessageType,System.String)">
            <summary>
            Output a generic message
            </summary>
            <param name="type">Type of the message</param>
            <param name="content">Content of the message</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.Model.Provider.Output(DuetAPI.Commands.CodeResult)">
            <summary>
            Output the result of a G/M/T-code
            </summary>
            <param name="codeResult">Messages to output</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetControlServer.Model.Updater">
            <summary>
            Static helper class to merge the RepRapFirmware object model with ours
            </summary>
        </member>
        <member name="F:DuetControlServer.Model.Updater._logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="F:DuetControlServer.Model.Updater._monitor">
            <summary>
            Monitor around the status response
            </summary>
        </member>
        <member name="F:DuetControlServer.Model.Updater._module">
            <summary>
            Type of the received status response
            </summary>
        </member>
        <member name="F:DuetControlServer.Model.Updater._json">
            <summary>
            UTF-8 representation of the received status response
            </summary>
        </member>
        <member name="F:DuetControlServer.Model.Updater._jsonLength">
            <summary>
            Length of the received status response
            </summary>
        </member>
        <member name="F:DuetControlServer.Model.Updater._updateEvent">
            <summary>
            Monitor that is notified when the full object model has been updated
            </summary>
        </member>
        <member name="F:DuetControlServer.Model.Updater._currentHeight">
            <summary>
            Last-known Z height
            </summary>
        </member>
        <member name="F:DuetControlServer.Model.Updater._updatingFirmware">
            <summary>
            Indicates if the firmware is being updated
            </summary>
        </member>
        <member name="M:DuetControlServer.Model.Updater.WaitForFullUpdate">
            <summary>
            Wait for the model to be fully updated from RepRapFirmware
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.Model.Updater.ProcessResponse(System.Byte,System.Memory{System.Byte})">
            <summary>
            Merge a received status response into the object model
            </summary>
            <param name="module">Module that is supposed to be merged</param>
            <param name="json">JSON data</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.Model.Updater.Run">
            <summary>
            Process status updates in the background
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.Model.Updater.ProcessAdvancedResponse(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Process an advanced status reponse (type 2)
            </summary>
            <param name="json">JSON response in UTF-8 format</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.Model.Updater.ProcessPrintResponse(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Process a print status response (type 3)
            </summary>
            <param name="json">JSON response in UTF-8 format</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.Model.Updater.ProcessConfigResponse(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Process a config response
            </summary>
            <param name="json">JSON response in UTF-8 format</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.Model.Updater.GetStatus(System.Char)">
            <summary>
            Translate a status character to a MachineStatus enum value
            </summary>
            <param name="letter">Status character</param>
            <returns>Machine status</returns>
        </member>
        <member name="T:DuetControlServer.Program">
            <summary>
            Main program class
            </summary>
        </member>
        <member name="F:DuetControlServer.Program._logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="F:DuetControlServer.Program.CancelSource">
            <summary>
            Global cancellation source that is triggered when the program is supposed to terminate
            </summary>
        </member>
        <member name="F:DuetControlServer.Program.CancellationToken">
            <summary>
            Global cancellation token that is triggered when the program is supposed to terminate
            </summary>
        </member>
        <member name="M:DuetControlServer.Program.Main(System.String[])">
            <summary>
            Entry point of the program
            </summary>
            <param name="args">Command-line arguments</param>
        </member>
        <member name="M:DuetControlServer.Program.CheckForAnotherInstance">
            <summary>
            Check if another instance is already running
            </summary>
            <returns>True if another instance is running</returns>
        </member>
        <member name="T:DuetControlServer.Settings">
            <summary>
            Settings provider
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.UpdateOnly">
            <summary>
            Indicates if this program is only launched to update the Duet 3 firmware
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.NoSpiTask">
            <summary>
            Do NOT start the SPI task. This is meant entirely for development purposes and should not be used!
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.ConfigFilename">
            <summary>
            Path to the configuration file
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.LogLevel">
            <summary>
            Minimum log level for console output
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.SocketDirectory">
            <summary>
            Directory in which DSF-related UNIX sockets reside
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.SocketFile">
            <summary>
            UNIX socket file for DuetControlServer
            </summary>
            <seealso cref="N:DuetAPI"/>
        </member>
        <member name="P:DuetControlServer.Settings.FullSocketPath">
            <summary>
            Fully-qualified path to the main IPC UNIX socket (evaluated during runtime)
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.Backlog">
            <summary>
            Maximum number of simultaneously pending IPC connections
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.SocketPollInterval">
            <summary>
            Poll interval for connected IPC clients
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.BaseDirectory">
            <summary>
            Virtual SD card directory.
            Paths starting with 0:/ are mapped to this directory
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.HostUpdateInterval">
            <summary>
            Internal model update interval after which properties of the machine model from
            the host controller (e.g. network information and mass storages) are updated (in ms)
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.ConfigUpdateInterval">
            <summary>
            How frequently the config response is polled (in ms; temporary; will be removed once the new object model has been finished)
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.MaxMessageAge">
            <summary>
            Maximum time to keep messages in the object model unless client(s) pick them up (in s).
            Note that messages are only cleared when the host update task runs.
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.SpiDevice">
            <summary>
            SPI device that is connected to RepRapFirmware
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.SpiFrequency">
            <summary>
            Frequency to use for SPI transfers
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.SpiTransferTimeout">
            <summary>
            Maximum allowed delay between data exchanges during a full transfer (in ms)
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.MaxSpiRetries">
            <summary>
            Maximum number of sequential transfer retries
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.SpiPollDelay">
            <summary>
            Time to wait after every full transfer (in ms)
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.GpioChipDevice">
            <summary>
            Path to the GPIO chip device node
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.TransferReadyPin">
            <summary>
            Number of the GPIO pin that is used by RepRapFirmware to flag its ready state
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.BufferedPrintCodes">
            <summary>
            Number of codes to buffer in the internal print subsystem
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.BufferedMacroCodes">
            <summary>
            Number of codes to buffer per macro
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.MaxBufferSpacePerChannel">
            <summary>
            Maximum space of buffered codes per channel (in bytes). Must be greater than <see cref="F:DuetControlServer.SPI.Communication.Consts.MaxCodeBufferSize"/>
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.ModelUpdateInterval">
            <summary>
            Interval of regular status updates (in ms)
            </summary>
            <remarks>This is preliminary and will be removed from future versions</remarks>
        </member>
        <member name="P:DuetControlServer.Settings.MaxMachineModelLockTime">
            <summary>
            Maximum lock time of the object model. If this time is exceeded, a deadlock is reported and the application is terminated.
            Set this to -1 to disable the automatic deadlock detection
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.FileInfoReadBufferSize">
            <summary>
            Size of the read buffer used for file parsing in bytes
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.FileInfoReadLimitHeader">
            <summary>
            How many bytes to parse max at the beginning of a file to retrieve G-code file information (12KiB)
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.FileInfoReadLimitFooter">
            <summary>
            How many bytes to parse max at the end of a file to retrieve G-code file information (256KiB)
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.MaxLayerHeight">
            <summary>
            Maximum allowed layer height. Used by the file info parser
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.LayerHeightFilters">
            <summary>
            Regular expressions for finding the layer height (case insensitive)
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.FilamentFilters">
            <summary>
            Regular expressions for finding the filament consumption (case insensitive, single line)
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.GeneratedByFilters">
            <summary>
            Regular expressions for finding the slicer (case insensitive)
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.PrintTimeFilters">
            <summary>
            Regular expressions for finding the print time
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.SimulatedTimeFilters">
            <summary>
            Regular expressions for finding the simulated time
            </summary>
        </member>
        <member name="M:DuetControlServer.Settings.Init(System.String[])">
            <summary>
            Initialize settings and load them from the config file or create it if it does not exist
            </summary>
            <returns>False if the application is supposed to terminate</returns>
        </member>
        <member name="M:DuetControlServer.Settings.ParseParameters(System.String[])">
            <summary>
            Parse the command line parameters
            </summary>
            <param name="args">Command-line arguments</param>
        </member>
        <member name="M:DuetControlServer.Settings.LoadFromFile(System.String)">
            <summary>
            Load the settings from a given file
            </summary>
            <param name="fileName">File to load the settings from</param>
        </member>
        <member name="M:DuetControlServer.Settings.SaveToFile(System.String)">
            <summary>
            Save the settings to a given file
            </summary>
            <param name="fileName">File to save the settings to</param>
        </member>
        <member name="T:DuetControlServer.SPI.ChannelInformation">
            <summary>
            Class used to hold internal information about a single code channel
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.ChannelInformation._logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.ChannelInformation.Channel">
            <summary>
            What code channel this class is about
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.ChannelInformation.#ctor(DuetAPI.CodeChannel)">
            <summary>
            Constructor of a code channel descriptor
            </summary>
            <param name="channel">Code channel of this instance</param>
        </member>
        <member name="P:DuetControlServer.SPI.ChannelInformation.IsBlocked">
            <summary>
            Indicates if this channel is blocked until the next full transfer
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.ChannelInformation.PriorityCodes">
            <summary>
            Prioritised codes that override every other code
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.ChannelInformation.PendingCodes">
            <summary>
            Queue of pending G/M/T-codes that have not been buffered yet
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.ChannelInformation.PendingFlushRequests">
            <summary>
            Queue of pending flush requests
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.ChannelInformation.BytesBuffered">
            <summary>
            Occupied space for buffered codes in bytes
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.ChannelInformation.BufferedCodes">
            <summary>
            List of buffered G/M/T-codes that are being processed by the firmware
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.ChannelInformation.SuspendedCodes">
            <summary>
            Stack of suspended G/M/T-codes to resend when the current macro file finishes
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.ChannelInformation.SystemMacroHasFinished">
            <summary>
            Indicates whether the requested system macro file has finished
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.ChannelInformation.SystemMacroHadError">
            <summary>
            Indicates if the last requested sytem macro file could not be opened
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.ChannelInformation.NestedMacros">
            <summary>
            Stack of nested macro files being executed
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.ChannelInformation.PendingLockRequests">
            <summary>
            Queue of pending lock/unlock requests
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.ChannelInformation._lock">
            <summary>
            Lock used when accessing this instance
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.ChannelInformation.Lock">
            <summary>
            Lock access to this code channel
            </summary>
            <returns>Disposable lock</returns>
        </member>
        <member name="M:DuetControlServer.SPI.ChannelInformation.LockAsync">
            <summary>
            Lock access to this code channel asynchronously
            </summary>
            <returns>Disposable lock</returns>
        </member>
        <member name="M:DuetControlServer.SPI.ChannelInformation.Diagnostics(System.Text.StringBuilder)">
            <summary>
            Write channel diagnostics to the given string builder
            </summary>
            <param name="builder">Target to write to</param>
        </member>
        <member name="M:DuetControlServer.SPI.ChannelInformation.ProcessRequests">
            <summary>
            Process pending requests on this channel
            </summary>
            <returns>If anything more can be done on this channel</returns>
        </member>
        <member name="M:DuetControlServer.SPI.ChannelInformation.BufferCode(DuetControlServer.SPI.QueuedCode)">
            <summary>
            Store an enqueued code for transmission to RepRapFirmware
            </summary>
            <param name="queuedCode">Code to transfer</param>
            <returns>True if the code could be buffered</returns>
        </member>
        <member name="F:DuetControlServer.SPI.ChannelInformation._partialLogMessage">
            <summary>
            Partial log message that has not been printed yet
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.ChannelInformation.HandleReply(DuetControlServer.SPI.Communication.MessageTypeFlags,System.String)">
            <summary>
            Handle a G-code reply
            </summary>
            <param name="flags">Message flags</param>
            <param name="reply">Code reply</param>
            <returns>Whether the reply could be processed</returns>
        </member>
        <member name="M:DuetControlServer.SPI.ChannelInformation.HandleMacroRequest(System.String,System.Boolean,System.Boolean)">
            <summary>
            Attempt to start a file macro
            </summary>
            <param name="filename">Name of the macro file</param>
            <param name="reportMissing">Report an error if the file could not be found</param>
            <param name="fromCode">Request comes from a real G/M/T-code</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.ChannelInformation.InsertMacroCode(DuetControlServer.SPI.QueuedCode)">
            <summary>
            Insert a new code for execution before pending macro codes
            </summary>
            <param name="code">Queued code to insert</param>
            <exception cref="T:System.ArgumentException">No macro file is being executed</exception>
        </member>
        <member name="F:DuetControlServer.SPI.ChannelInformation._resumingBuffer">
            <summary>
            Indicates if the suspended codes are being resumed
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.ChannelInformation.MacroCompleted(DuetControlServer.SPI.QueuedCode,System.Boolean)">
            <summary>
            Notify RepRapFirmware about a completed macro file
            </summary>
            <param name="startingCode">Code starting the macro</param>
            <param name="error">True if there was any error processing the file</param>
            <returns>Whether the notification could be sent</returns>
        </member>
        <member name="M:DuetControlServer.SPI.ChannelInformation.InvalidateBuffer(System.Boolean)">
            <summary>
            Invalidate all the buffered G/M/T-codes
            </summary>
            <param name="invalidateLastFileCodes))">Invalidate only codes of the last stack level</param>
        </member>
        <member name="M:DuetControlServer.SPI.ChannelInformation.SuspendBuffer(DuetControlServer.SPI.QueuedCode)">
            <summary>
            Suspend all the buffered G/M/T-codes for future execution
            </summary>
            <param name="codeBeingExecuted">Current code being executed to leave in the buffer</param>
        </member>
        <member name="M:DuetControlServer.SPI.ChannelInformation.ResumeBuffer">
            <summary>
            Resume suspended codes when a nested macro file has finished
            </summary>
            <returns>True when finished</returns>
        </member>
        <member name="M:DuetControlServer.SPI.ChannelInformation.Invalidate">
            <summary>
            Invalidate every request and buffered code on this channel
            </summary>
            <returns>If any resource has been invalidated</returns>
        </member>
        <member name="T:DuetControlServer.SPI.ChannelStore">
            <summary>
            Class used to hold internal information about all the code channels
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.ChannelStore._channels">
            <summary>
            List of different channels
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.ChannelStore.#ctor">
            <summary>
            Constructor of the channel store
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.ChannelStore.Item(DuetAPI.CodeChannel)">
            <summary>
            Index operator for easy access via a CodeChannel value
            </summary>
            <param name="channel">Channel to retrieve information about</param>
            <returns>Information about the code channel</returns>
        </member>
        <member name="M:DuetControlServer.SPI.ChannelStore.ResetBlockedChannels">
            <summary>
            Reset busy channels
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.ChannelStore.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implementation of the GetEnumerator method
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:DuetControlServer.SPI.ChannelStore.System#Collections#Generic#IEnumerable{DuetControlServer#SPI#ChannelInformation}#GetEnumerator">
            <summary>
            Implementation of the GetEnumerator method
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.Consts">
            <summary>
            Static class holding SPI transfer constants
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.Consts.FormatCode">
            <summary>
            Unique format code for binary SPI transfers
            </summary>
            <remarks>Must be different from any other used format code (0x3E = DuetWiFiServer)</remarks>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.Consts.InvalidFormatCode">
            <summary>
            Unique format code that is not used anywhere else
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.Consts.ProtocolVersion">
            <summary>
            Used protocol version. This is incremented whenever the protocol details change
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.Consts.BufferSize">
            <summary>
            Size of a packet transfer buffer
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.Consts.MaxCodeBufferSize">
            <summary>
            Maximum size of a binary encoded G/M/T-code. This is limited by RepRapFirmware (see code queue)
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.Consts.BufferedCodeHeaderSize">
            <summary>
            Size of the header prefixing a buffered code
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.Consts.NoFilePosition">
            <summary>
            Value used by RepRapFirmware to represent an invalid file position
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.Consts.IapSegmentSize">
            <summary>
            Size of each transmitted IAP binary segment (must be a multiple of IFLASH_PAGE_SIZE)
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.Consts.IapBootDelay">
            <summary>
            Time to wait when the IAP reboots to the main firmware
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.Consts.FirmwareSegmentSize">
            <summary>
            Size of each transmitted firmware binary segment (must be equal to blockReadSize in the IAP project)
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.Consts.FirmwareFinishedDelay">
            <summary>
            Delay to await after the last firmware segment has been written (in ms)
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.Consts.IapRebootDelay">
            <summary>
            Time to wait when the IAP reboots to the main firmware
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.FirmwareRequests.AbortFileRequest">
            <summary>
            Request abort of the currently executing files
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.AbortFileRequest.Channel">
            <summary>
            Code channel running the file(s)
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.AbortFileRequest.AbortAll">
            <summary>
            Indicates if all pending files are supposed to be aborted
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.FirmwareRequests.CodeBufferUpdate">
            <summary>
            Request abort of the currently executing files
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.CodeBufferUpdate.BufferSpace">
            <summary>
            Bytes available for storing buffered codes
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.FirmwareRequests.CodeReply">
            <summary>
            Response to a <see cref="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.Code"/> request
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.CodeReply.MessageType">
            <summary>
            Message type describing the message
            </summary>
            <seealso cref="F:DuetControlServer.SPI.Communication.FirmwareRequests.CodeReply.MessageType"/>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.CodeReply.Length">
            <summary>
            Length of the reply in bytes
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.FirmwareRequests.CodeReplyFlags">
            <summary>
            Flags describing the message
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.CodeReplyFlags.Warning">
            <summary>
            This is a warning message
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.CodeReplyFlags.Error">
            <summary>
            This is an error message
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.CodeReplyFlags.Push">
            <summary>
            There is more to come in the next transmission
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.CodeReplyFlags.CodeComplete">
            <summary>
            This is a final code response
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.FirmwareRequests.FileChunkRequest">
            <summary>
            Request abort of the currently executing files
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.FileChunkRequest.Offset">
            <summary>
            Offset in the file
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.FileChunkRequest.MaxLength">
            <summary>
            Maximum length of the file chunk to return
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.FileChunkRequest.FilenameLength">
            <summary>
            Length of the filename
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.FirmwareRequests.MacroRequest">
            <summary>
            Request execution of a macro file
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.MacroRequest.Channel">
            <summary>
            Channel to pipe the macro content into
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.MacroRequest.ReportMissing">
            <summary>
            Output a warning message if the file could not be found
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.MacroRequest.FromCode">
            <summary>
            Whether the code was requested from a G/M/T-code
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.MacroRequest.Length">
            <summary>
            Length of the filename
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.FirmwareRequests.PrintPaused">
            <summary>
            Header of print pause events
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.PrintPaused.FilePosition">
            <summary>
            Position at which the file has been paused
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.PrintPaused.PauseReason">
            <summary>
            Reason why the print has been paused
            </summary>
            <seealso cref="T:DuetControlServer.SPI.Communication.PrintPausedReason"/>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.FirmwareRequests.Request">
            <summary>
            Request indices for SPI transfers from the RepRapFirmware controller to the Linux board
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.ResendPacket">
            <summary>
            Request retransmission of the given packet.
            This is always guaranteed to work in case RRF does not have not enough resources are available to process the packet
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.ObjectModel">
            <summary>
            Response to an object model request
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.CodeBufferUpdate">
            <summary>
            Update about the available code buffer size
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.CodeReply">
            <summary>
            Response to a G/M/T-code
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.ExecuteMacro">
            <summary>
            Request execution of a macro file
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.AbortFile">
            <summary>
            Request all files of the code channel to be closed
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.StackEvent">
            <summary>
            Stack has been changed
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.PrintPaused">
            <summary>
            Print has been paused
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.HeightMap">
            <summary>
            Response to a heightmap request
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.Locked">
            <summary>
            Ressource locked
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.RequestFileChunk">
            <summary>
            Request another chunk of a file
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.FirmwareRequests.StackFlags">
            <summary>
            Flags of the stack
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.StackFlags.DrivesRelative">
            <summary>
            Whether the extruder drives are driven in relative mode
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.StackFlags.VolumetricExtrusion">
            <summary>
            Whether volumetric extrusion is being used
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.StackFlags.AxesRelative">
            <summary>
            Whether the axes are driven in relative mode
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.StackFlags.UsingInches">
            <summary>
            Whether the configured unit is set to inches
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.FirmwareRequests.StackEvent">
            <summary>
            Header for stack events
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.StackEvent.Channel">
            <summary>
            Code channel where the event occurred
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.StackEvent.StackDepth">
            <summary>
            New depth of the stack
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.StackEvent.Flags">
            <summary>
            Stack flags
            </summary>
            <seealso cref="T:DuetControlServer.SPI.Communication.FirmwareRequests.StackFlags"/>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.StackEvent.Feedrate">
            <summary>
            Feedrate in mm/s
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.LinuxRequests.AssignFilamentHeader">
            <summary>
            Header of a filament assignment. This is followed by the actual filament name
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.AssignFilamentHeader.Extruder">
            <summary>
            Extruder drive number
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.AssignFilamentHeader.FilamentLength">
            <summary>
            Length of the filament name
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.LinuxRequests.SpiCodeFlags">
            <summary>
            Flags of a G/M/T-code
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.SpiCodeFlags.HasMajorCommandNumber">
            <summary>
            This code has a valid major code
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.SpiCodeFlags.HasMinorCommandNumber">
            <summary>
            This code has a valid minor code
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.SpiCodeFlags.HasFilePosition">
            <summary>
            This code has a valid file position (for pausing)
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.SpiCodeFlags.EnforceAbsolutePosition">
            <summary>
            Indicates that G53 was used with this code (absolute positioning)
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.LinuxRequests.CodeHeader">
            <summary>
            Header of G/M/T-codes. This is followed by NumParameters <see cref="T:DuetControlServer.SPI.Communication.LinuxRequests.CodeParameter"/> instances,
            which is then followed by concatenated zero-terminated UTF8-strings for each parameter where applicable.
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeHeader.Channel">
            <summary>
            Target of the code
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeHeader.Flags">
            <summary>
            Flags of this code
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeHeader.NumParameters">
            <summary>
            Number of parameters following the 
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeHeader.Letter">
            <summary>
            Letter of this code (G/M/T)
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeHeader.MajorCode">
            <summary>
            Major code number (e.g. 1 in G1)
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeHeader.MinorCode">
            <summary>
            Minor code number (e.g. 4 in G53.4)
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeHeader.FilePosition">
            <summary>
            File position after the read code. This is used for pausing and resuming
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.LinuxRequests.CodeParameter">
            <summary>
            Binary representation of a code parameter
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeParameter.Letter">
            <summary>
            Letter prefix of this parameter
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeParameter.Type">
            <summary>
            Type of the parameter
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeParameter.IntValue">
            <summary>
            Value as integer
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeParameter.UIntValue">
            <summary>
            Value as unsigned integer
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeParameter.FloatValue">
            <summary>
            Value as float
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.LinuxRequests.DataType">
            <summary>
            Enum representing the allowed binary data types of parameters
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.DataType.Int">
            <summary>
            Parameter is a signed integer
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.DataType.UInt">
            <summary>
            Parameter is an unsigned integer
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.DataType.Float">
            <summary>
            Parameter is a float
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.DataType.IntArray">
            <summary>
            Parameter is a signed integer array
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.DataType.UIntArray">
            <summary>
            Parameter is an unsigned integer array
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.DataType.FloatArray">
            <summary>
            Parameter is a float array
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.DataType.String">
            <summary>
            Parameter is a UTF-8 string
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.DataType.Expression">
            <summary>
            Parameter is an expression
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.DataType.DriverId">
            <summary>
            Parameter is a driver identifier (format: [board.]driver)
            </summary>
            <remarks>The top 16 bits contain the board ID and the bottom 16 bits contain the driver number</remarks>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.DataType.DriverIdArray">
            <summary>
            Parameter is a driver identifier array (format: [board1.]driver1:[board2.]driver2)
            </summary>
            <remarks>The top 16 bits contain the board ID and the bottom 16 bits contain the driver number</remarks>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.LinuxRequests.FileChunk">
            <summary>
            Response to a <see cref="T:DuetControlServer.SPI.Communication.FirmwareRequests.FileChunkRequest"/>.
            This is followed by the payload if Length is greater than 0
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.FileChunk.DataLength">
            <summary>
            Length of the file chunk or -1 if an error occurred
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.FileChunk.FileLength">
            <summary>
            Total length of the file
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.LinuxRequests.FlashVerifyRequest">
            <summary>
            Used as the last message to check if the firmware has been flashed successfully
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.FlashVerifyRequest.firmwareLength">
            <summary>
            Length of the flashed firmware
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.FlashVerifyRequest.crc16">
            <summary>
            CRC16 checksum of the firmware binary
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.LinuxRequests.MacroCompleted">
            <summary>
            Indicate that a macro has finished its execution
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.MacroCompleted.Channel">
            <summary>
            Channel on which the execution was done
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.MacroCompleted.Error">
            <summary>
            Error flag. This is true if the file could not be found or opened
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted">
            <summary>
            Set file print info. This is followed by NumFilament floats representing
            the filament consumption and the actual name of the file being printed.
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted.FilenameLength">
            <summary>
            Length of the filename
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted.GeneratedByLength">
            <summary>
            Length of the slicer
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted.NumFilaments">
            <summary>
            Number of filaments used
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted.LastModifiedTime">
            <summary>
            Time the file was last modified (as time_t / 64-bit unsigned int).
            This is represented as the seconds elapsed since Jan 1 1970
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted.FileSize">
            <summary>
            Size of the file in bytes
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted.FirstLayerHeight">
            <summary>
            Height of the first layer in mm
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted.LayerHeight">
            <summary>
            Height of the layers in mm
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted.ObjectHeight">
            <summary>
            Total object height in mm
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted.PrintTime">
            <summary>
            Total print time in seconds
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted.SimulatedTime">
            <summary>
            Simulated print time in seconds
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.LinuxRequests.PrintStopped">
            <summary>
            Header of print stop notifications
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.PrintStopped.Reason">
            <summary>
            Reason why the print has been stopped
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.LinuxRequests.Request">
            <summary>
            Request indices for SPI transfers from the Linux board to the RepRapFirmware controller
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.EmergencyStop">
            <summary>
            Perform an immediate emergency stop
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.Reset">
            <summary>
            Reset the controller
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.Code">
            <summary>
            Request the execution of a G/M/T-code
            </summary>
            <seealso cref="T:DuetControlServer.SPI.Communication.LinuxRequests.CodeHeader"/>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.GetObjectModel">
            <summary>
            Request a part of the machine's object model
            </summary>
            <seealso cref="T:DuetControlServer.SPI.Communication.SharedRequests.ObjectModel"/>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.SetObjectModel">
            <summary>
            Set a value in the machine's object model (reserved)
            </summary>
            <seealso cref="T:DuetControlServer.SPI.Communication.LinuxRequests.SetObjectModel"/>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.PrintStarted">
            <summary>
            Tell the firmware a print has started and set information about the file being processed
            </summary>
            <seealso cref="T:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted"/>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.PrintStopped">
            <summary>
            Tell the firmware a print has been stopped and reset information about the file being processed
            </summary>
            <seealso cref="T:DuetControlServer.SPI.Communication.LinuxRequests.PrintStopped"/>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.MacroCompleted">
            <summary>
            Notify the firmware about the completion of a macro file
            </summary>
            <seealso cref="T:DuetControlServer.SPI.Communication.LinuxRequests.MacroCompleted"/>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.GetHeightMap">
            <summary>
            Request the heightmap coordinates as generated by G29 S0
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.SetHeightMap">
            <summary>
            Set the heightmap coordinates via G29 S1
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.LockMovementAndWaitForStandstill">
            <summary>
            Lock movement and wait for standstill
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.Unlock">
            <summary>
            Unlock everything again
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.WriteIap">
            <summary>
            Write another chunk of the IAP binary to the designated Flash area
            </summary>
            <remarks>There is no discrete header for this request but be aware that only multiples of IFLASH_PAGE_SIZE must be transmitted (except for the last sector)</remarks>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.StartIap">
            <summary>
            Launch the IAP binary
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.AssignFilament">
            <summary>
            Assign filament to a given extruder drive
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.FileChunk">
            <summary>
            Response to a <see cref="T:DuetControlServer.SPI.Communication.FirmwareRequests.FileChunkRequest"/>
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.LinuxRequests.SetObjectModel">
            <summary>
            Set an arbitrary object model value that is accessible via a field path.
            This struct is followed by the UTF-8 path to the object model value
            and optionally the value as string / expression.
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.SetObjectModel.Type">
            <summary>
            Type of the value
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.SetObjectModel.FieldLength">
            <summary>
            Length of the field
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.SetObjectModel.IntValue">
            <summary>
            Value as integer
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.SetObjectModel.UIntValue">
            <summary>
            Value as unsigned integer
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.SetObjectModel.FloatValue">
            <summary>
            Value as float
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.MessageTypeFlags">
            <summary>
            Message type flags describing a code reply. This is equal to MessageType in RepRapFirmware.
            Make sure to keep the destinations in sync with the <see cref="T:DuetAPI.CodeChannel"/> entries
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.HttpMessage">
            <summary>
            A message that is to be sent to the web (HTTP)
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.TelnetMessage">
            <summary>
            A message that is to be sent to a Telnet client
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.FileMessage">
            <summary>
            A message that is to be sent to a file processor
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.UsbMessage">
            <summary>
            A message that is to be sent in non-blocking mode to the host via USB
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.AuxMessage">
            <summary>
            A message that is to be sent to the panel
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.DaemonMessage">
            <summary>
            A message that is to be sent to a daemon processor
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.CodeQueueMessage">
            <summary>
            A message that is to be sent to the code queue channel
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.LcdMessage">
            <summary>
            A message that is to be sent to the panel
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.SpiMessage">
            <summary>
            A message that is to be sent to the SPI master
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.AutoPauseMessage">
            <summary>
            A message that is to be sent to an auto-pause processor
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.BlockingUsbMessage">
            <summary>
            A message that is to be sent to USB in blocking mode
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.ImmediateLcdMessage">
            <summary>
            A message that is to be sent to LCD in immediate mode
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.ErrorMessageFlag">
            <summary>
            This is an error message
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.WarningMessageFlag">
            <summary>
            This is a warning message
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.LogMessage">
            <summary>
            A message to be written to the log file
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.RawMessageFlag">
            <summary>
            Do not encapsulate this message
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.BinaryCodeReplyFlag">
            <summary>
            This message comes from a binary G-Code buffer
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.PushFlag">
            <summary>
            There is more to come; the message has been truncated
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.GenericMessage">
            <summary>
            A message that is to be sent to the web, Telnet, USB and panel
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.LoggedGenericMessage">
            <summary>
            A GenericMessage that is also logged
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.PacketHeader">
            <summary>
            Header used for single packets from and to the RepRapFirmware board
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PacketHeader.Request">
            <summary>
            Identifier of this request
            </summary>
            <seealso cref="T:DuetControlServer.SPI.Communication.FirmwareRequests.Request"/>
            <seealso cref="T:DuetControlServer.SPI.Communication.LinuxRequests.Request"/>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PacketHeader.Id">
            <summary>
            Identifier of the packet
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PacketHeader.Length">
            <summary>
            Length of the packet in bytes
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PacketHeader.ResendPacketId">
            <summary>
            Identifier of the packet that is supposed to be resend (defaults to 0)
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.PrintPausedReason">
            <summary>
            Reasons why a print has been paused
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PrintPausedReason.User">
            <summary>
            User-initiated pause (M26)
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PrintPausedReason.GCode">
            <summary>
            G-Code initiated pause (M226)
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PrintPausedReason.FilamentChange">
            <summary>
            Filament change required (M600)
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PrintPausedReason.Trigger">
            <summary>
            Paused by trigger
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PrintPausedReason.HeaterFault">
            <summary>
            Paused due to heater fault
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PrintPausedReason.Filament">
            <summary>
            Paused because of a filament sensor
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PrintPausedReason.Stall">
            <summary>
            Paused due to a motor stall
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PrintPausedReason.LowVoltage">
            <summary>
            Paused due to a voltage drop
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.PrintStoppedReason">
            <summary>
            Reason why the print has been stopped
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PrintStoppedReason.NormalCompletion">
            <summary>
            Print has finished successfully
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PrintStoppedReason.UserCancelled">
            <summary>
            User has cancelled the print
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PrintStoppedReason.Abort">
            <summary>
            Print has been aborted
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.SharedRequests.HeightMap">
            <summary>
            Header of G29 heightmaps
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.SharedRequests.HeightMap.XMin">
            <summary>
            X start coordinate of the heightmap
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.SharedRequests.HeightMap.XMax">
            <summary>
            X end coordinate of the heightmap
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.SharedRequests.HeightMap.XSpacing">
            <summary>
            Spacing between the probe points in X direction
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.SharedRequests.HeightMap.YMin">
            <summary>
            Y start coordinate of the heightmap
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.SharedRequests.HeightMap.YMax">
            <summary>
            Y end coordinate of the heightmap
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.SharedRequests.HeightMap.YSpacing">
            <summary>
            Spacing between the probe points in Y direction
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.SharedRequests.HeightMap.Radius">
            <summary>
            Probing radius on delta geometries
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.SharedRequests.HeightMap.NumX">
            <summary>
            Number of probe points in X direction
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.SharedRequests.HeightMap.NumY">
            <summary>
            Number of probe points in Y direction
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.SharedRequests.LockUnlock">
            <summary>
            Header describing a response to a lock resource request
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.SharedRequests.LockUnlock.Channel">
            <summary>
            Channel which has locked or unlocked the resource
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.SharedRequests.ObjectModel">
            <summary>
            Shared header for the <see cref="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.GetObjectModel"/> and <see cref="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.ObjectModel"/> requests
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.SharedRequests.ObjectModel.Length">
            <summary>
            Length of the data in bytes
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.SharedRequests.ObjectModel.Module">
            <summary>
            Number of the module that this response provides data for
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.TransferHeader">
            <summary>
            Header describing the content of a full SPI transfer
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferHeader.FormatCode">
            <summary>
            Unique number representing the format used for this type of data transfer
            </summary>
            <seealso cref="F:DuetControlServer.SPI.Communication.Consts.FormatCode"/>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferHeader.NumPackets">
            <summary>
            Number of packets in the data transfer
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferHeader.ProtocolVersion">
            <summary>
            Version of the protocol. This is incremented whenever the protocol details change
            </summary>
            <seealso cref="F:DuetControlServer.SPI.Communication.Consts.ProtocolVersion"/>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferHeader.SequenceNumber">
            <summary>
            Sequence number (auto-incremented), used to detect resets on either side
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferHeader.DataLength">
            <summary>
            Total length of the data transfer in bytes
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferHeader.ChecksumData">
            <summary>
            CRC16 checksum of the transfer data (reserved)
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferHeader.ChecksumHeader">
            <summary>
            CRC16 checksum of the transfer header (reserved)
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.TransferResponse">
            <summary>
            Result code of header and data transfers
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferResponse.Success">
            <summary>
            Transfer is OK
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferResponse.BadFormat">
            <summary>
            Bad transfer format
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferResponse.BadProtocolVersion">
            <summary>
            Bad protocol version
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferResponse.BadDataLength">
            <summary>
            Bad data length
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferResponse.BadHeaderChecksum">
            <summary>
            Bad header checksum
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferResponse.BadDataChecksum">
            <summary>
            Bad header checksum
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferResponse.BadResponse">
            <summary>
            Bad response. This one is special because it can follow a response exchange
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.DataTransfer">
            <summary>
            Helper class for SPI data transfers
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.DataTransfer._logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.DataTransfer.ProtocolVersion">
            <summary>
            Currently-used protocol version
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.Init">
            <summary>
            Set up the SPI device and the controller for the transfer ready pin
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.GetFullTransfersPerSecond">
            <summary>
            Get the nubmer of full transfers per second
            </summary>
            <returns>Full transfers per second</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.Diagnostics(System.Text.StringBuilder)">
            <summary>
            Print diagnostics to the given string builder
            </summary>
            <param name="builder">Target to write to</param>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.PerformFullTransfer(System.Boolean)">
            <summary>
            Perform a full data transfer synchronously
            </summary>
            <param name="mustSucceed">Keep retrying until the transfer succeeds</param>
            <returns>Whether new data could be transferred</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.HadReset">
            <summary>
            Check if the controller has been reset
            </summary>
            <returns>Whether the controller has been reset</returns>
        </member>
        <member name="P:DuetControlServer.SPI.DataTransfer.Updating">
            <summary>
            Indicates if an update is in progress
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.DataTransfer.PacketsToRead">
            <summary>
            Returns the number of packets to read
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ReadPacket">
            <summary>
            Read the next packet
            </summary>
            <returns>The next packet or null if none is available</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ReadObjectModel(System.Byte@,System.Byte[]@)">
            <summary>
            Read the result of a <see cref="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.GetObjectModel"/> request
            </summary>
            <param name="module">Module described by the returned JSON data</param>
            <param name="json">JSON data</param>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ReadCodeBufferUpdate(System.UInt16@)">
            <summary>
            Read a code buffer update
            </summary>
            <param name="bufferSpace">Buffer space</param>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ReadCodeReply(DuetControlServer.SPI.Communication.MessageTypeFlags@,System.String@)">
            <summary>
            Read the result of a <see cref="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.Code"/> request
            </summary>
            <param name="messageType">Message type flags of the reply</param>
            <param name="reply">Code reply</param>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ReadMacroRequest(DuetAPI.CodeChannel@,System.Boolean@,System.Boolean@,System.String@)">
            <summary>
            Read the content of a <see cref="T:DuetControlServer.SPI.Communication.FirmwareRequests.MacroRequest"/> packet
            </summary>
            <param name="channel">Channel requesting a macro file</param>
            <param name="reportMissing">Write an error message if the macro is not found</param>
            <param name="isSystemMacro">Indicates if this code is not bound to a code being executed (e.g. when a trigger macro is requested)</param>
            <param name="filename">Filename of the requested macro</param>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ReadAbortFile(DuetAPI.CodeChannel@,System.Boolean@)">
            <summary>
            Read the content of an <see cref="T:DuetControlServer.SPI.Communication.FirmwareRequests.AbortFileRequest"/> packet
            </summary>
            <param name="channel">Code channel where all files are supposed to be aborted</param>
            <param name="abortAll">Whether all files are supposed to be aborted</param>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ReadStackEvent(DuetAPI.CodeChannel@,System.Byte@,DuetControlServer.SPI.Communication.FirmwareRequests.StackFlags@,System.Single@)">
            <summary>
            Read the content of a <see cref="T:DuetControlServer.SPI.Communication.FirmwareRequests.StackEvent"/> packet
            </summary>
            <param name="channel">Code channel where the event occurred</param>
            <param name="stackDepth">New stack depth</param>
            <param name="flags">Bitmap holding info about the stack</param>
            <param name="feedrate">Sticky feedrate on this channel</param>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ReadPrintPaused(System.UInt32@,DuetControlServer.SPI.Communication.PrintPausedReason@)">
            <summary>
            Read the content of a <see cref="T:DuetControlServer.SPI.Communication.FirmwareRequests.PrintPaused"/> packet
            </summary>
            <param name="filePosition">Position where the print has been paused</param>
            <param name="reason">Reason why the print has been paused</param>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ReadHeightMap(DuetAPI.Utility.Heightmap@)">
            <summary>
            Read the result of a <see cref="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.GetHeightMap"/> request
            </summary>
            <param name="map">Received heightmap</param>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ReadResourceLocked(DuetAPI.CodeChannel@)">
            <summary>
            Read the content of a <see cref="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.Locked"/> packet
            </summary>
            <param name="channel">Code channel that has acquired the lock</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ReadFileChunkRequest(System.String@,System.UInt32@,System.UInt32@)">
            <summary>
            Read a chunk of a <see cref="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.RequestFileChunk"/> packet
            </summary>
            <param name="filename">Filename</param>
            <param name="offset">File offset</param>
            <param name="maxLength">Maximum chunk size</param>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.DumpMalformedPacket">
            <summary>
            Write the last packet + content for diagnostic purposes
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ResendPacket(DuetControlServer.SPI.Communication.PacketHeader)">
            <summary>
            Resend a packet back to the firmware
            </summary>
            <param name="packet">Packet holding the resend request</param>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WriteEmergencyStop">
            <summary>
            Request an emergency stop
            </summary>
            <returns>True if the packet could be written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WriteReset">
            <summary>
            Request a firmware reset
            </summary>
            <returns>True if the packet could be written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.GetCodeSize(DuetControlServer.Commands.Code)">
            <summary>
            Figure out the size of a binary G/M/T-code
            </summary>
            <param name="code">Code to write</param>
            <returns>Code size in bytes</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WriteCode(DuetControlServer.Commands.Code)">
            <summary>
            Request a code to be executed
            </summary>
            <param name="code">Code to send</param>
            <returns>True if the packet could be written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WriteGetObjectModel(System.Byte)">
            <summary>
            Request the object module of a specific module
            </summary>
            <param name="module">Module index to query</param>
            <returns>True if the packet could be written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WriteSetObjectModel(System.String,System.Object)">
            <summary>
            Set a specific value in the object model of RepRapFirmware
            </summary>
            <param name="field">Path to the field</param>
            <param name="value">New value</param>
            <returns>True if the packet could be written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WritePrintStarted(DuetAPI.ParsedFileInfo)">
            <summary>
            Notify the firmware that a file print has started
            </summary>
            <param name="info">Information about the file being printed</param>
            <returns>True if the packet could be written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WritePrintStopped(DuetControlServer.SPI.Communication.PrintStoppedReason)">
            <summary>
            Notify that a file print has been stopped
            </summary>
            <param name="reason">Reason why the print has been stopped</param>
            <returns>True if the packet could be written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WriteMacroCompleted(DuetAPI.CodeChannel,System.Boolean)">
            <summary>
            Notify the firmware about a completed macro file.
            This function is only used for macro files that the firmware requested
            </summary>
            <param name="channel">Code channel of the finished macro</param>
            <param name="error">Whether an error occurred</param>
            <returns>True if the packet could be written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WriteGetHeightMap">
            <summary>
            Request the heightmap from the firmware
            </summary>
            <returns>True if the packet could be written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WriteHeightMap(DuetAPI.Utility.Heightmap)">
            <summary>
            Write a heightmap to the firmware
            </summary>
            <param name="map">Heightmap to send</param>
            <returns>True if the packet could be written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WriteLockMovementAndWaitForStandstill(DuetAPI.CodeChannel)">
            <summary>
            Request the movement to be locked and wait for standstill
            </summary>
            <param name="channel">Code channel that requires the lock</param>
            <returns>True if the packet could be written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WriteUnlock(DuetAPI.CodeChannel)">
            <summary>
            Release all acquired locks again
            </summary>
            <param name="channel">Code channel that releases the locks</param>
            <returns>True if the packet could be written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WriteIapSegment(System.IO.Stream)">
            <summary>
            Write another segment of the IAP binary
            </summary>
            <param name="stream">IAP binary</param>
            <returns>Whether another segment could be written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.StartIap">
            <summary>
            Instruct the firmware to start the IAP binary
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.FlashFirmwareSegment(System.IO.Stream)">
            <summary>
            Flash another segment of the firmware via the IAP binary
            </summary>
            <param name="stream">Stream of the firmware binary</param>
            <returns>Whether another segment could be sent</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.VerifyFirmwareChecksum(System.Int64,System.UInt16)">
            <summary>
            Send the CRC16 checksum of the firmware binary to the IAP program and verify the written data
            </summary>
            <param name="firmwareLength">Length of the written firmware in bytes</param>
            <param name="crc16">CRC16 checksum of the firmware</param>
            <returns>Whether the firmware has been written successfully</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WaitForIapReset">
            <summary>
            Wait for the IAP program to reset the controller
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WriteAssignFilament(System.Int32,System.String)">
            <summary>
            Assign a filament name to the given extruder drive
            </summary>
            <param name="extruder">Extruder index</param>
            <param name="filamentName">Filament name</param>
            <returns>Whether the firmware has been written successfully</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WriteFileChunk(System.Span{System.Byte},System.Int64)">
            <summary>
            Write another chunk of the file being requested
            </summary>
            <param name="data">File chunk data</param>
            <param name="fileLength">Total length of the file in bytes</param>
            <returns>Whether the firmware has been written successfully</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.CanWritePacket(System.Int32)">
            <summary>
            Checks if there is enough remaining space to accomodate a packet header plus payload data
            </summary>
            <param name="dataLength">Payload data length</param>
            <returns>True if there is enough space</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WritePacket(DuetControlServer.SPI.Communication.LinuxRequests.Request,System.Int32)">
            <summary>
            Write a packet
            </summary>
            <param name="request">Linux request to send</param>
            <param name="dataLength">Length of the extra payload</param>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.GetWriteBuffer(System.Int32)">
            <summary>
            Get a span on a 4-byte bounary for writing packet data
            </summary>
            <param name="dataLength">Required data length</param>
            <returns>Data span</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WaitForTransfer">
            <summary>
            Wait for the Duet to flag when it is ready to transfer data
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ExchangeHeader">
            <summary>
            Exchange the transfer header
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ExchangeResponse(System.UInt32)">
            <summary>
            Exchange a response code
            </summary>
            <param name="response">Response to send</param>
            <returns>Received response</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ExchangeData">
            <summary>
            Exchange the transfer body
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="T:DuetControlServer.SPI.Interface">
            <summary>
            This class accesses RepRapFirmware via SPI and deals with general communication
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Interface._logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.Init">
            <summary>
            Initialize the SPI interface but do not connect yet
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.Diagnostics(System.Text.StringBuilder)">
            <summary>
            Print diagnostics of this class
            </summary>
            <param name="builder">String builder</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.GetHeightmap">
            <summary>
            Retrieve the current heightmap from the firmware
            </summary>
            <returns>Heightmap in use</returns>
            <exception cref="T:System.OperationCanceledException">Operation could not finish</exception>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.SetHeightmap(DuetAPI.Utility.Heightmap)">
            <summary>
            Set the current heightmap to use
            </summary>
            <param name="map">Heightmap to set</param>
            <returns>Asynchronous task</returns>
            <exception cref="T:System.OperationCanceledException">Operation could not finish</exception>
            <exception cref="T:System.InvalidOperationException">Heightmap is already being set</exception>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.GetIdleChannel">
            <summary>
            Get a channel that is currently idle in order to process a priority code
            </summary>
            <returns></returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.ProcessCode(DuetControlServer.Commands.Code)">
            <summary>
            Enqueue a G/M/T-code synchronously and obtain a task that completes when the code has finished
            </summary>
            <param name="code">Code to execute</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.Flush(DuetAPI.CodeChannel)">
            <summary>
            Wait for all pending codes to finish
            </summary>
            <param name="channel">Code channel to wait for</param>
            <returns>Whether the codes have been flushed successfully</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.Flush(DuetControlServer.Commands.Code)">
            <summary>
            Wait for all pending (macro) codes to finish
            </summary>
            <param name="code">Code requesting the flush request</param>
            <returns>Whether the codes have been flushed successfully</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.RequestEmergencyStop">
            <summary>
            Request an immediate emergency stop
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.RequestReset">
            <summary>
            Request a firmware reset
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.SetPrintStarted">
            <summary>
            Notify the firmware that a file print has started
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.SetPrintStopped(DuetControlServer.SPI.Communication.PrintStoppedReason)">
            <summary>
            Notify the firmware that the file print has been stopped
            </summary>
            <param name="stopReason">Reason why the print has stopped</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.LockMovementAndWaitForStandstill(DuetAPI.CodeChannel)">
            <summary>
            Lock the move module and wait for standstill
            </summary>
            <param name="channel">Code channel acquiring the lock</param>
            <returns>Whether the resource could be locked</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.UnlockAll(DuetAPI.CodeChannel)">
            <summary>
            Unlock all resources occupied by the given channel
            </summary>
            <param name="channel">Channel holding the resources</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.UpdateFirmware(System.IO.Stream,System.IO.Stream)">
            <summary>
            Perform an update of the main firmware via IAP
            </summary>
            <param name="iapStream">IAP binary</param>
            <param name="firmwareStream">Firmware binary</param>
            <exception cref="T:System.InvalidOperationException">Firmware is already being updated</exception>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.AssignFilament(System.Int32,System.String)">
            <summary>
            Assign the filament to an extruder drive
            </summary>
            <param name="extruder">Extruder drive</param>
            <param name="filament">Loaded filament</param>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.Connect">
            <summary>
            Initialize physical transfer and perform initial data transfer.
            This is only called once on initialization
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.Run">
            <summary>
            Perform communication with the RepRapFirmware controller
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.BufferCode(DuetControlServer.SPI.QueuedCode,System.Int32@)">
            <summary>
            Send a queued code to the firmware
            </summary>
            <param name="queuedCode">Code to send</param>
            <param name="codeLength">Length of the binary code in bytes</param>
            <returns>Whether the code could be processed</returns>
            <remarks>The corresponding Channel is locked when this is called</remarks>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.ProcessPacket(DuetControlServer.SPI.Communication.PacketHeader)">
            <summary>
            Process a packet from RepRapFirmware
            </summary>
            <param name="packet">Received packet</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.HandleObjectModel">
            <summary>
            Process an object model response
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.HandleCodeBufferUpdate">
            <summary>
            Update the amount of buffer space
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.HandleCodeReply">
            <summary>
            Process a code reply
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.OutputGenericMessage(DuetControlServer.SPI.Communication.MessageTypeFlags,System.String)">
            <summary>
            Output a generic message
            </summary>
            <param name="flags">Message flags</param>
            <param name="reply">Message content</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.HandleMacroRequest">
            <summary>
            Handle a macro request
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.HandleAbortFileRequest">
            <summary>
            Handle a file abort request
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.HandleStackEvent">
            <summary>
            Handle a stack event (may be dropped in the future)
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.HandlePrintPaused">
            <summary>
            Deal with paused print events
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.HandleHeightMap">
            <summary>
            Process a received height map
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.HandleResourceLocked">
            <summary>
            Deal with the confirmation that a resource has been locked
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.HandleFileChunkRequest">
            <summary>
            Process a request for a chunk of a given file
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.Invalidate(System.String)">
            <summary>
            Invalidate every resource due to a critical event
            </summary>
            <param name="message">Reason why everything is being invalidated</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetControlServer.SPI.QueuedCode">
            <summary>
            Class that represents a queued code item.
            There is no need to serialize/deserialize data, so no properties in here 
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.QueuedCode.#ctor(DuetControlServer.Commands.Code)">
            <summary>
            Constructor for a queued code
            </summary>
            <param name="code">Code to execute</param>
        </member>
        <member name="P:DuetControlServer.SPI.QueuedCode.Code">
            <summary>
            Code item to execute
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.QueuedCode.IsReadyToSend">
            <summary>
            Indicates if the code is ready to be sent to the firmware
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.QueuedCode.IsSuspended">
            <summary>
            Indicates if this code is currently suspended
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.QueuedCode.IsFinished">
            <summary>
            Indicates if the code has been finished because of a G-code reply
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.QueuedCode.BinarySize">
            <summary>
            Size of this code in binary representation
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.QueuedCode.DoingNestedMacro">
            <summary>
            Indicates if RepRapFirmware requested a macro file for execution as part of this code
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.QueuedCode.Task">
            <summary>
            Task that is resolved when the code has finished
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.QueuedCode.HandleReply(DuetControlServer.SPI.Communication.MessageTypeFlags,System.String)">
            <summary>
            Process a code reply from the firmware
            </summary>
            <param name="messageType">Message type flags</param>
            <param name="reply">Raw code reply</param>
        </member>
        <member name="M:DuetControlServer.SPI.QueuedCode.HandleReply(DuetAPI.Commands.CodeResult)">
            <summary>
            Process a code reply
            </summary>
            <param name="result">Code reply</param>
        </member>
        <member name="M:DuetControlServer.SPI.QueuedCode.SetCancelled">
            <summary>
            Report that this code has been cancelled
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.QueuedCode.SetException(System.Exception)">
            <summary>
            Report that something went wrong while executing this code
            </summary>
            <param name="e">Exception to return</param>
        </member>
        <member name="M:DuetControlServer.SPI.QueuedCode.SetFinished">
            <summary>
            Called to resolve the task because it has finished
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.QueuedCode.ToString">
            <summary>
            Convert this instance to a string
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:DuetControlServer.SPI.QueuedLockRequest">
            <summary>
            Queued lock/unlock request
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.QueuedLockRequest._tcs">
            <summary>
            Task completion source that completes when the lock request has been resolved
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.QueuedLockRequest.IsLockRequest">
            <summary>
            Indicates if this is a lock or unlock request
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.QueuedLockRequest.IsLockRequested">
            <summary>
            Indicates if the lock request has been sent to the firmware
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.QueuedLockRequest.Task">
            <summary>
            Awaitable task returning true if the lock could be acquired.
            It returns false if the controller is reset or an emergency stop occurs
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.QueuedLockRequest.#ctor(System.Boolean)">
            <summary>
            Creates a new queued lock/unlock request instance
            </summary>
            <param name="isLockRequest">Whether the resource shall be locked</param>
        </member>
        <member name="M:DuetControlServer.SPI.QueuedLockRequest.Resolve(System.Boolean)">
            <summary>
            Resolve the pending task with the given result
            </summary>
            <param name="lockAcquired">Whether the lock could be acquired</param>
        </member>
        <member name="T:DuetControlServer.SPI.Serialization.Reader">
            <summary>
            Static class for reading data from SPI transmissions.
            It is expected that each data block occupies entire 4-byte blocks.
            Make sure to keep the data returned by these functions only as long as the underlying buffer is actually valid!
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Reader.ReadPacketHeader(System.ReadOnlySpan{System.Byte})">
            <summary>
            Read a packet header from a memory span
            </summary>
            <param name="from">Origin</param>
            <returns>Header describing a packet</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Reader.ReadObjectModel(System.ReadOnlySpan{System.Byte},System.Byte@,System.Byte[]@)">
            <summary>
            Read an object model header plus JSON text from a memory span
            </summary>
            <param name="from">Origin</param>
            <param name="module">Number of the module from which the JSON data originates</param>
            <param name="json">Object model data as JSON or null if none available</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Reader.ReadCodeBufferUpdate(System.ReadOnlySpan{System.Byte},System.UInt16@)">
            <summary>
            Read a code buffer update from a memory span
            </summary>
            <param name="from">Origin</param>
            <param name="bufferSpace">Buffer space</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Reader.ReadCodeReply(System.ReadOnlySpan{System.Byte},DuetControlServer.SPI.Communication.MessageTypeFlags@,System.String@)">
            <summary>
            Read a code reply from a memory span
            </summary>
            <param name="from">Origin</param>
            <param name="messageType">Message flags</param>
            <param name="reply">Raw code reply</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Reader.ReadMacroRequest(System.ReadOnlySpan{System.Byte},DuetAPI.CodeChannel@,System.Boolean@,System.Boolean@,System.String@)">
            <summary>
            Read a macro file request from a memory span
            </summary>
            <param name="from">Origin</param>
            <param name="channel">Code channel that requested the execution</param>
            <param name="reportMissing">Output a message if the macro cannot be found</param>
            <param name="fromCode">Whether the macro request came from the G/M/T-code being executed</param>
            <param name="filename">Filename of the macro to execute</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Reader.ReadAbortFile(System.ReadOnlySpan{System.Byte},DuetAPI.CodeChannel@,System.Boolean@)">
            <summary>
            Read information about an abort file request 
            </summary>
            <param name="from">Origin</param>
            <param name="channel">Code channel running the file</param>
            <param name="abortAll">Whether all files are supposed to be aborted</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Reader.ReadStackEvent(System.ReadOnlySpan{System.Byte},DuetAPI.CodeChannel@,System.Byte@,DuetControlServer.SPI.Communication.FirmwareRequests.StackFlags@,System.Single@)">
            <summary>
            Read a stack event
            </summary>
            <param name="from">Origin</param>
            <param name="channel">Code channel where the stack event occurred</param>
            <param name="stackDepth">New stack depth</param>
            <param name="flags">Flags of the stack</param>
            <param name="feedrate">Feedrate in mm/s</param>
            <returns>Number of bytes read</returns>
            <seealso cref="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.StackEvent"/>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Reader.ReadPrintPaused(System.ReadOnlySpan{System.Byte},System.UInt32@,DuetControlServer.SPI.Communication.PrintPausedReason@)">
            <summary>
            Read a print pause event
            </summary>
            <param name="from">Origin</param>
            <param name="filePosition">Position at which the print has been paused</param>
            <param name="reason">Reason why the print has been paused</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Reader.ReadHeightMap(System.ReadOnlySpan{System.Byte},DuetAPI.Utility.Heightmap@)">
            <summary>
            Read a heightmap report
            </summary>
            <param name="from">Origin</param>
            <param name="map">Deserialized heightmap</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Reader.ReadResourceLocked(System.ReadOnlySpan{System.Byte},DuetAPI.CodeChannel@)">
            <summary>
            Read a lock confirmation
            </summary>
            <param name="from">Origin</param>
            <param name="channel">Channel that has acquired the lock</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Reader.ReadFileChunkRequest(System.ReadOnlySpan{System.Byte},System.String@,System.UInt32@,System.UInt32@)">
            <summary>
            Read a file chunk request`
            </summary>
            <param name="from">Origin</param>
            <param name="filename">Filename to read from</param>
            <param name="offset">Offset in the file</param>
            <param name="maxLength">Maximum chunk length</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="T:DuetControlServer.SPI.Serialization.Writer">
            <summary>
            Static class for writing data for SPI transmissions.
            This class makes sure each data block is on a 4-byte boundary to guarantee efficient DMA transfers on the remote side.
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Serialization.Writer.TransmissionHeaderSize">
            <summary>
            Size of a transmission header
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Writer.InitTransferHeader(DuetControlServer.SPI.Communication.TransferHeader@)">
            <summary>
            Initialize a transfer header
            </summary>
            <param name="header">Header reference to initialize</param>
        </member>
        <member name="F:DuetControlServer.SPI.Serialization.Writer.PacketHeaderSize">
            <summary>
            Size of a packet header
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Writer.WritePacketHeader(System.Span{System.Byte},DuetControlServer.SPI.Communication.LinuxRequests.Request,System.UInt16,System.Int32)">
            <summary>
            Write an arbitrary packet header to a memory span
            </summary>
            <param name="to">Destination</param>
            <param name="request">Packet type</param>
            <param name="id">Packet ID</param>
            <param name="length">Length of the packet</param>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Writer.WriteCode(System.Span{System.Byte},DuetControlServer.Commands.Code)">
            <summary>
            Write a parsed G/M/T code in binary format to a memory span
            </summary>
            <param name="to">Destination</param>
            <param name="code">Code to write</param>
            <returns>Number of bytes written</returns>
            <exception cref="T:System.ArgumentException">Unsupported data type</exception>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Writer.WriteObjectModelRequest(System.Span{System.Byte},System.Byte)">
            <summary>
            Write a <see cref="T:DuetControlServer.SPI.Communication.SharedRequests.ObjectModel"/> request to a memory span
            </summary>
            <param name="to">Destination</param>
            <param name="module">Module to query the object model from</param>
            <returns>Number of bytes written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Writer.WriteObjectModel(System.Span{System.Byte},System.String,System.Object)">
            <summary>
            Request the update of an object model field to an arbitrary value via a <see cref="T:DuetControlServer.SPI.Communication.LinuxRequests.SetObjectModel"/> request
            </summary>
            <param name="to">Destination</param>
            <param name="field">Path to the object model field</param>
            <param name="value">New value</param>
            <returns>Number of bytes written</returns>
            <exception cref="T:System.ArgumentException">Unsupported data type</exception>
            <remarks>value must be of type <see cref="T:DuetControlServer.SPI.Communication.LinuxRequests.DataType"/></remarks>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Writer.WritePrintStarted(System.Span{System.Byte},DuetAPI.ParsedFileInfo)">
            <summary>
            Notify the firmware that a print has started
            </summary>
            <param name="to">Destination</param>
            <param name="info">Information about the file being printed</param>
            <returns>Number of bytes written</returns>
            <exception cref="T:System.ArgumentException">One of the supplied values is too big</exception>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Writer.WritePrintStopped(System.Span{System.Byte},DuetControlServer.SPI.Communication.PrintStoppedReason)">
            <summary>
            Notify the firmware that a print has been stopped
            </summary>
            <param name="to">Destination</param>
            <param name="reason">Reason why the print has been stopped</param>
            <returns>Number of bytes written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Writer.WriteMacroCompleted(System.Span{System.Byte},DuetAPI.CodeChannel,System.Boolean)">
            <summary>
            Write notification about a completed macro file
            </summary>
            <param name="to">Destination</param>
            <param name="channel">Channel where the macro file has finished</param>
            <param name="error">Whether an error occurred when trying to open/process the macro file</param>
            <returns>Number of bytes written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Writer.WriteHeightMap(System.Span{System.Byte},DuetAPI.Utility.Heightmap)">
            <summary>
            Write a heightmap as read by G29 S1
            </summary>
            <param name="to">Destination</param>
            <param name="map">Heightmap to write</param>
            <returns>Number of bytes written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Writer.WriteLockUnlock(System.Span{System.Byte},DuetAPI.CodeChannel)">
            <summary>
            Request a resource to be locked or unlocked
            </summary>
            <param name="to">Destination</param>
            <param name="channel">Channel for the lock request</param>
            <returns>Number of bytes written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Writer.WriteAssignFilament(System.Span{System.Byte},System.Int32,System.String)">
            <summary>
            Assign a filament name to the given extruder drive
            </summary>
            <param name="to">Destination</param>
            <param name="extruder">Extruder drive</param>
            <param name="filamentName">Filament name</param>
            <returns>Number of bytes written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Writer.WriteFileChunk(System.Span{System.Byte},System.Span{System.Byte},System.Int64)">
            <summary>
            Write a file chunk
            </summary>
            <param name="to">Destination</param>
            <param name="data">File chunk data</param>
            <param name="fileLength">Total length of the file in bytes</param>
            <returns>Number of bytes written</returns>
        </member>
        <member name="T:DuetControlServer.Utility.ConfigOverride">
            <summary>
            Static class holding values for config-override.g
            </summary>
        </member>
        <member name="M:DuetControlServer.Utility.ConfigOverride.Save(DuetControlServer.Commands.Code)">
            <summary>
            Save the current non-volatile parameters to config-override.g
            </summary>
            <param name="code">Code that invoked this method</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetControlServer.Utility.CRC16">
            <summary>
            Functions for CRC16 calculation
            </summary>
        </member>
        <member name="M:DuetControlServer.Utility.CRC16.Calculate(System.ReadOnlySpan{System.Byte})">
            <summary>
            Efficient CRC16 calculation based on the CRC16-IBM algorithm
            </summary>
            <param name="buffer">Buffer to calculate the checksum for</param>
            <returns>CRC16 Checksum</returns>
            <remarks>
            Original found on https://stackoverflow.com/questions/18594963/crc16-iso-13239-implementation
            </remarks>
        </member>
        <member name="T:DuetControlServer.Utility.FilamentManager">
            <summary>
            Provides functions for filament management
            </summary>
        </member>
        <member name="F:DuetControlServer.Utility.FilamentManager.FilamentsCsvFile">
            <summary>
            Name of the filament storage file
            </summary>
        </member>
        <member name="F:DuetControlServer.Utility.FilamentManager.FilamentsCsvHeader">
            <summary>
            First line identifying the filament file
            </summary>
        </member>
        <member name="F:DuetControlServer.Utility.FilamentManager._lock">
            <summary>
            Lock for this class
            </summary>
        </member>
        <member name="F:DuetControlServer.Utility.FilamentManager._filamentMapping">
            <summary>
            Mapping of extruder vs filament
            </summary>
        </member>
        <member name="M:DuetControlServer.Utility.FilamentManager.Init">
            <summary>
            Initialize this class
            </summary>
        </member>
        <member name="M:DuetControlServer.Utility.FilamentManager.ToolAdded(DuetAPI.Machine.Tool)">
            <summary>
            Called when a new tool is being added to the object model
            </summary>
            <param name="tool">New tool</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.Utility.FilamentManager.ToolRemoved(DuetAPI.Machine.Tool)">
            <summary>
            Called when a tool is being removed from the object model
            </summary>
            <param name="tool">Tool being removed</param>
        </member>
        <member name="M:DuetControlServer.Utility.FilamentManager.ToolPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a tool property has changed
            </summary>
            <param name="sender">Changed tool</param>
            <param name="e">Information about the changed property</param>
        </member>
        <member name="M:DuetControlServer.Utility.FilamentManager.SaveMapping">
            <summary>
            Save the filament mapping to a file
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetControlServer.Utility.Logger">
            <summary>
            Class for message logging
            </summary>
        </member>
        <member name="F:DuetControlServer.Utility.Logger.DefaultLogFile">
            <summary>
            Default log file for M929 in case no P parameter is specified
            </summary>
        </member>
        <member name="F:DuetControlServer.Utility.Logger._logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="F:DuetControlServer.Utility.Logger._lock">
            <summary>
            Lock for the file
            </summary>
        </member>
        <member name="F:DuetControlServer.Utility.Logger._fileStream">
            <summary>
            Filestream of the log file
            </summary>
        </member>
        <member name="F:DuetControlServer.Utility.Logger._writer">
            <summary>
            Writer for logging data
            </summary>
        </member>
        <member name="F:DuetControlServer.Utility.Logger._logCloseEvent">
            <summary>
            Registration that is triggered when the log is supposed to be closed
            </summary>
        </member>
        <member name="M:DuetControlServer.Utility.Logger.Start(System.String)">
            <summary>
            Start logging to a file
            </summary>
            <param name="filename">Filename to write to</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.Utility.Logger.Stop">
            <summary>
            Stop logging
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.Utility.Logger.StopInternal">
            <summary>
            Stop logging internally
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.Utility.Logger.Log(DuetAPI.Message)">
            <summary>
            Write a message including timestamp to the log file
            </summary>
            <param name="msg">Message to log</param>
        </member>
        <member name="M:DuetControlServer.Utility.Logger.Log(DuetAPI.MessageType,System.String)">
            <summary>
            Write a message including timestamp to the log file
            </summary>
            <param name="type">Message type</param>
            <param name="content">Message content</param>
        </member>
        <member name="M:DuetControlServer.Utility.Logger.Log(DuetAPI.Commands.CodeResult)">
            <summary>
            Write messages including timestamp to the log file
            </summary>
            <param name="result">Message list</param>
        </member>
        <member name="M:DuetControlServer.Utility.Logger.LogOutput(DuetAPI.Message)">
            <summary>
            Log and output a message
            </summary>
            <param name="msg">Message</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.Utility.Logger.LogOutput(DuetAPI.Commands.CodeResult)">
            <summary>
            Log and output a code result
            </summary>
            <param name="result">Code result</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.Utility.Logger.LogOutput(DuetAPI.MessageType,System.String)">
            <summary>
            Log and output a message
            </summary>
            <param name="type">Message type</param>
            <param name="content">Message content</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetControlServer.FileInfoParser">
            <summary>
            Static class used to retrieve information from G-code jobs
            </summary>
        </member>
        <member name="M:DuetControlServer.FileInfoParser.Parse(System.String)">
            <summary>
            Parse a G-code file
            </summary>
            <param name="fileName">File to analyze</param>
            <returns>Information about the file</returns>
        </member>
        <member name="M:DuetControlServer.FileInfoParser.ParseHeader(System.IO.StreamReader,DuetAPI.ParsedFileInfo)">
            <summary>
            Parse the header of a G-code file
            </summary>
            <param name="reader">Stream reader</param>
            <param name="partialFileInfo">G-code file information</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.FileInfoParser.ParseFooter(System.IO.StreamReader,DuetAPI.ParsedFileInfo)">
            <summary>
            Parse the footer of a G-code file
            </summary>
            <param name="reader">Stream reader</param>
            <param name="partialFileInfo">G-code file information</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetControlServer.FileInfoParser.ReadLineFromEndResult">
            <summary>
            Result for wrapping the buffer pointer because ref parameters are not supported for async functions
            </summary>
        </member>
        <member name="F:DuetControlServer.FileInfoParser.ReadLineFromEndResult.Line">
            <summary>
            Read line
            </summary>
        </member>
        <member name="F:DuetControlServer.FileInfoParser.ReadLineFromEndResult.BufferPointer">
            <summary>
            New pointer in the buffer
            </summary>
        </member>
        <member name="M:DuetControlServer.FileInfoParser.ReadLineFromEndAsync(System.IO.StreamReader,System.Char[],System.Int32)">
            <summary>
            Read another line from the end of a file
            </summary>
            <param name="reader">Stream reader</param>
            <param name="buffer">Internal buffer</param>
            <param name="bufferPointer">Pointer to the next byte in the buffer</param>
            <returns>Read result</returns>
        </member>
        <member name="M:DuetControlServer.FileInfoParser.IsFileInfoComplete(DuetAPI.ParsedFileInfo)">
            <summary>
            Checks if the given file info is complete
            </summary>
            <param name="result">File information</param>
            <returns>Whether the file info is complete</returns>
        </member>
        <member name="M:DuetControlServer.FileInfoParser.FindLayerHeight(System.String,DuetAPI.ParsedFileInfo@)">
            <summary>
            Try to find the layer height
            </summary>
            <param name="line">Line</param>
            <param name="fileInfo">File information</param>
            <returns>Whether layer height could be found</returns>
        </member>
        <member name="M:DuetControlServer.FileInfoParser.FindFilamentUsed(System.String,DuetAPI.ParsedFileInfo@)">
            <summary>
            Try to find the filament usage
            </summary>
            <param name="line">Line</param>
            <param name="fileInfo">File information</param>
            <returns>Whether filament consumption could be found</returns>
        </member>
        <member name="M:DuetControlServer.FileInfoParser.FindGeneratedBy(System.String,DuetAPI.ParsedFileInfo@)">
            <summary>
            Find the toolchain that generated the file
            </summary>
            <param name="line">Line</param>
            <param name="fileInfo">File information</param>
            <returns>Whether the slicer could be found</returns>
        </member>
        <member name="M:DuetControlServer.FileInfoParser.FindPrintTime(System.String,DuetAPI.ParsedFileInfo@)">
            <summary>
            Find the total print time
            </summary>
            <param name="line">Line</param>
            <param name="fileInfo">File information</param>
            <returns>Whether the print time could be found</returns>
        </member>
        <member name="M:DuetControlServer.FileInfoParser.FindSimulatedTime(System.String,DuetAPI.ParsedFileInfo@)">
            <summary>
            Find the simulated time
            </summary>
            <param name="line">Line</param>
            <param name="fileInfo">File information</param>
            <returns>Whether the simulated time could be found</returns>
        </member>
        <member name="T:DuetControlServer.FileDirectory">
            <summary>
            Shortcut for ToPhysicalAsync() to avoid multiple nested locks
            </summary>
        </member>
        <member name="F:DuetControlServer.FileDirectory.Filaments">
            <summary>
            Filaments directory
            </summary>
        </member>
        <member name="F:DuetControlServer.FileDirectory.GCodes">
            <summary>
            GCodes directory
            </summary>
        </member>
        <member name="F:DuetControlServer.FileDirectory.Macros">
            <summary>
            Macros directory
            </summary>
        </member>
        <member name="F:DuetControlServer.FileDirectory.Menu">
            <summary>
            Menu directory
            </summary>
        </member>
        <member name="F:DuetControlServer.FileDirectory.System">
            <summary>
            System directory
            </summary>
        </member>
        <member name="F:DuetControlServer.FileDirectory.WWW">
            <summary>
            WWW directory
            </summary>
        </member>
        <member name="T:DuetControlServer.FilePath">
            <summary>
            Static class used to provide functions for file path resolution
            </summary>
        </member>
        <member name="F:DuetControlServer.FilePath.ConfigFile">
            <summary>
            Default name of the config file
            </summary>
        </member>
        <member name="F:DuetControlServer.FilePath.ConfigFileFallback">
            <summary>
            Fallback file if the config file could not be found
            </summary>
        </member>
        <member name="F:DuetControlServer.FilePath.ConfigOverrideFile">
            <summary>
            Config override as generated by M500
            </summary>
        </member>
        <member name="F:DuetControlServer.FilePath.DaemonFile">
            <summary>
            Daemon file used to perform periodic tasks
            </summary>
        </member>
        <member name="F:DuetControlServer.FilePath.DefaultHeightmapFile">
            <summary>
            Default heightmap file
            </summary>
        </member>
        <member name="F:DuetControlServer.FilePath.DeployProbeFallbackFile">
            <summary>
            Fallback file if the probe-specific deploy probe file could not be found
            </summary>
        </member>
        <member name="F:DuetControlServer.FilePath.RetractProbeFallbackFile">
            <summary>
            Fallback file if the probe-specific retract probe file could not be found
            </summary>
        </member>
        <member name="F:DuetControlServer.FilePath.DeployProbePattern">
            <summary>
            Probe-specific deploy file name pattern
            </summary>
        </member>
        <member name="F:DuetControlServer.FilePath.RetractProbePattern">
            <summary>
            Probe-specific retract file name pattern
            </summary>
        </member>
        <member name="F:DuetControlServer.FilePath.FilamentsFile">
            <summary>
            File holding the filaments mapping
            </summary>
        </member>
        <member name="M:DuetControlServer.FilePath.ToPhysicalAsync(System.String,DuetControlServer.FileDirectory)">
            <summary>
            Resolve a RepRapFirmware/FatFs-style file path to a physical file path asynchronously.
            The first drive (0:/) is reserved for usage with the base directory as specified in the settings
            </summary>
            <param name="filePath">File path to resolve</param>
            <param name="directory">Directory containing filePath if it is not absolute is specified</param>
            <returns>Resolved file path</returns>
        </member>
        <member name="M:DuetControlServer.FilePath.ToPhysicalAsync(System.String,System.String)">
            <summary>
            Resolve a RepRapFirmware/FatFs-style file path to a physical file path asynchronously.
            The first drive (0:/) is reserved for usage with the base directory as specified in the settings.
            </summary>
            <param name="filePath">File path to resolve</param>
            <param name="directory">Directory containing filePath if it is not absolute is specified</param>
            <returns>Resolved file path</returns>
        </member>
        <member name="M:DuetControlServer.FilePath.ToVirtualAsync(System.String)">
            <summary>
            Convert a physical ile path to a RRF-style file path asynchronously.
            The first drive (0:/) is reserved for usage with the base directory as specified in the settings.
            </summary>
            <param name="filePath">File path to convert</param>
            <returns>Resolved file path</returns>
        </member>
    </members>
</doc>
