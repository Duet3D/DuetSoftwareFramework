<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DuetAPIClient</name>
    </assembly>
    <members>
        <member name="T:DuetAPIClient.BaseCommandConnection">
            <summary>
            Base connection class for sending commands to the control server
            </summary>
            <seealso cref="F:DuetAPI.Connection.ConnectionMode.Command"/>
        </member>
        <member name="M:DuetAPIClient.BaseCommandConnection.#ctor(DuetAPI.Connection.ConnectionMode)">
            <summary>
            Protected constructor for derived modes that can issue regular commands
            </summary>
            <param name="mode">Connection type</param>
        </member>
        <member name="M:DuetAPIClient.BaseCommandConnection.AddHttpEndpoint(DuetAPI.Machine.HttpEndpointType,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Add a new third-party HTTP endpoint in the format /machine/{ns}/{path}
            </summary>
            <param name="endpointType">HTTP request type</param>
            <param name="ns">Namespace of the plugin</param>
            <param name="path">Endpoint path</param>
            <param name="backlog">Number of simultaneously pending connections</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Wrapper around the UNIX socket for accepting HTTP endpoint requests</returns>
            <exception cref="T:System.ArgumentException">Endpoint namespace is reserved</exception>
            <exception cref="T:System.InvalidOperationException">Endpoint is already in use</exception>
            <exception cref="T:System.IO.IOException">UNIX socket could not be opened</exception>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Command could not be processed</exception>
        </member>
        <member name="M:DuetAPIClient.BaseCommandConnection.AddUserSession(DuetAPI.Machine.AccessLevel,DuetAPI.Machine.SessionType,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Add a new user session
            </summary>
            <param name="access">Access level of this session</param>
            <param name="type">Type of this session</param>
            <param name="origin">Origin of the user session (e.g. IP address)</param>
            <param name="originPort">Origin of the user session (e.g. WebSocket port). Defaults to the current PID</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>New session ID</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Command could not be processed</exception>
        </member>
        <member name="M:DuetAPIClient.BaseCommandConnection.Flush(DuetAPI.CodeChannel,System.Threading.CancellationToken)">
            <summary>
            Wait for all pending codes of the given channel to finish
            </summary>
            <param name="channel">Code channel to wait for</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>True if all pending codes could be flushed</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Command could not be processed</exception>
        </member>
        <member name="M:DuetAPIClient.BaseCommandConnection.GetFileInfo(System.String,System.Threading.CancellationToken)">
            <summary>
            Parse a G-code file and returns file information about it
            </summary>
            <param name="fileName">The file to parse</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Information about the parsed file</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Command could not be processed</exception>
            <seealso cref="M:DuetAPIClient.BaseCommandConnection.GetFileInfo(System.String,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:DuetAPIClient.BaseCommandConnection.GetMachineModel(System.Threading.CancellationToken)">
            <summary>
            Retrieve the full object model of the machine.
            In subscription mode this is the first command that has to be called once a connection has been established
            </summary>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>The current machine model</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Command could not be processed</exception>
        </member>
        <member name="M:DuetAPIClient.BaseCommandConnection.GetSerializedMachineModel(System.Threading.CancellationToken)">
            <summary>
            Optimized method to directly query the machine model UTF-8 JSON
            </summary>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Machine model JSON</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Command could not be processed</exception>
        </member>
        <member name="M:DuetAPIClient.BaseCommandConnection.LockMachineModel(System.Threading.CancellationToken)">
            <summary>
            Lock the machine model for read/write access.
            It is MANDATORY to call <see cref="M:DuetAPIClient.BaseCommandConnection.UnlockMachineModel(System.Threading.CancellationToken)"/> when write access has finished
            </summary>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Asynchronous task</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Command could not be processed</exception>
        </member>
        <member name="M:DuetAPIClient.BaseCommandConnection.PerformCode(DuetAPI.Commands.Code,System.Threading.CancellationToken)">
            <summary>
            Execute an arbitrary pre-parsed code
            </summary>
            <param name="code">The code to execute</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Result of the given code</returns>
            <exception cref="T:System.OperationCanceledException">Code or operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Command could not be processed</exception>
            <remarks>Cancelling the read operation does not cancel the code execution</remarks>
            <seealso cref="T:DuetAPI.Commands.Code"/>
        </member>
        <member name="M:DuetAPIClient.BaseCommandConnection.PerformSimpleCode(System.String,DuetAPI.CodeChannel,System.Threading.CancellationToken)">
            <summary>
            Execute an arbitrary G/M/T-code in text form and return the result as a string
            </summary>
            <param name="code">The code to execute</param>
            <param name="channel">Optional destination channel of this code</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Result of the given code converted to a string</returns>
            <exception cref="T:System.OperationCanceledException">Code or operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Command could not be processed</exception>
            <remarks>Cancelling the read operation does not cancel the code execution</remarks>
            <seealso cref="T:DuetAPI.Commands.SimpleCode"/>
        </member>
        <member name="M:DuetAPIClient.BaseCommandConnection.RemoveHttpEndpoint(DuetAPI.Machine.HttpEndpointType,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Remove an existing HTTP endpoint
            </summary>
            <param name="endpointType">Type of the endpoint to remove</param>
            <param name="ns">Namespace of the endpoint to remove</param>
            <param name="path">Endpoint to remove</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>True if the endpoint could be removed</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Command could not be processed</exception>
        </member>
        <member name="M:DuetAPIClient.BaseCommandConnection.RemoveUserSession(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Remove an existing user session
            </summary>
            <param name="id">Identifier of the session</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>True if the session could be removed</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Command could not be processed</exception>
        </member>
        <member name="M:DuetAPIClient.BaseCommandConnection.ResolvePath(System.String,System.Threading.CancellationToken)">
            <summary>
            Resolve a RepRapFirmware-style file path to a real file path
            </summary>
            <param name="path">File path to resolve</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Resolved file path</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Command could not be processed</exception>
        </member>
        <member name="M:DuetAPIClient.BaseCommandConnection.SetMachineModel(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Set a given property to a certain value. Make sure to lock the object model before calling this
            </summary>
            <param name="path">Path to the property</param>
            <param name="value">New value as string</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>True if the property could be updated</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Command could not be processed</exception>
        </member>
        <member name="M:DuetAPIClient.BaseCommandConnection.SyncMachineModel(System.Threading.CancellationToken)">
            <summary>
            Wait for the full machine model to be updated from RepRapFirmware
            </summary>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Asynchronous task</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Command could not be processed</exception>
        </member>
        <member name="M:DuetAPIClient.BaseCommandConnection.UnlockMachineModel(System.Threading.CancellationToken)">
            <summary>
            Unlock the machine model again
            </summary>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Asynchronous task</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Command could not be processed</exception>
        </member>
        <member name="T:DuetAPIClient.BaseConnection">
            <summary>
            Base class for connections that access the control server via the Duet API using a UNIX socket
            </summary>
        </member>
        <member name="F:DuetAPIClient.BaseConnection._connectionMode">
            <summary>
            Mode of this connection
            </summary>
        </member>
        <member name="F:DuetAPIClient.BaseConnection._unixSocket">
            <summary>
            Socket used for inter-process communication
            </summary>
        </member>
        <member name="M:DuetAPIClient.BaseConnection.#ctor(DuetAPI.Connection.ConnectionMode)">
            <summary>
            Create a new connection instance
            </summary>
            <param name="mode">Mode of the new connection</param>
        </member>
        <member name="M:DuetAPIClient.BaseConnection.Finalize">
            <summary>
            Finalizer of this class
            </summary>
        </member>
        <member name="F:DuetAPIClient.BaseConnection.disposed">
            <summary>
            Indicates if this instance has been disposed
            </summary>
        </member>
        <member name="M:DuetAPIClient.BaseConnection.Dispose">
            <summary>
            Cleans up the current connection and all resources associated to it
            </summary>
        </member>
        <member name="M:DuetAPIClient.BaseConnection.Dispose(System.Boolean)">
            <summary>
            Protected dipose implementation
            </summary>
            <param name="disposing">True if this instance is being disposed</param>
        </member>
        <member name="P:DuetAPIClient.BaseConnection.Id">
            <summary>
            Identifier of this connection
            </summary>
            <seealso cref="P:DuetAPI.Commands.Code.SourceConnection"/>
        </member>
        <member name="M:DuetAPIClient.BaseConnection.Connect(DuetAPI.Connection.InitMessages.ClientInitMessage,System.String,System.Threading.CancellationToken)">
            <summary>
            Establishes a connection to the given UNIX socket file
            </summary>
            <param name="initMessage">Init message to send to the server</param>
            <param name="socketPath">Path to the UNIX socket file</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Asynchronous task</returns>
            <exception cref="T:DuetAPIClient.Exceptions.IncompatibleVersionException">API level is incompatible</exception>
            <exception cref="T:System.IO.IOException">Connection mode is unavailable</exception>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Connection has been closed</exception>
        </member>
        <member name="P:DuetAPIClient.BaseConnection.IsConnected">
            <summary>
            Returns true if the socket is still connected
            </summary>
        </member>
        <member name="M:DuetAPIClient.BaseConnection.Close">
            <summary>
            Closes the current connection and disposes it
            </summary>
        </member>
        <member name="M:DuetAPIClient.BaseConnection.Poll">
            <summary>
            Check if the connection is still alive
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">Connection is no longer available</exception>
        </member>
        <member name="M:DuetAPIClient.BaseConnection.PerformCommand(DuetAPI.Commands.BaseCommand,System.Threading.CancellationToken)">
            <summary>
            Perform an arbitrary command
            </summary>
            <param name="command">Command to run</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Command result</returns>
            <exception cref="T:DuetAPIClient.Exceptions.InternalServerException">Deserialized internal error from DCS</exception>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Connection has been closed</exception>
        </member>
        <member name="M:DuetAPIClient.BaseConnection.PerformCommand``1(DuetAPI.Commands.BaseCommand,System.Threading.CancellationToken)">
            <summary>
            Perform an arbitrary command
            </summary>
            <param name="command">Command to run</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Command result</returns>
            <typeparam name="T">Type of the command result</typeparam>
            <exception cref="T:DuetAPIClient.Exceptions.InternalServerException">Deserialized internal error from DCS</exception>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Connection has been closed</exception>
        </member>
        <member name="M:DuetAPIClient.BaseConnection.Receive``1(System.Threading.CancellationToken)">
            <summary>
            Receive a deserialized object from the server
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <typeparam name="T">Type of the received object</typeparam>
            <returns>Received object</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Connection has been closed</exception>
        </member>
        <member name="M:DuetAPIClient.BaseConnection.ReceiveResponse(System.Threading.CancellationToken)">
            <summary>
            Receive a base response from the server
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Deserialized base response</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Connection has been closed</exception>
        </member>
        <member name="M:DuetAPIClient.BaseConnection.ReceiveResponse``1(System.Threading.CancellationToken)">
            <summary>
            Receive a response from the server
            </summary>
            <typeparam name="T">Response type</typeparam>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Deserialized response</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Connection has been closed</exception>
        </member>
        <member name="M:DuetAPIClient.BaseConnection.ReceiveJson(System.Threading.CancellationToken)">
            <summary>
            Receive partially deserialized object from the server
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Partially deserialized data</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Connection has been closed</exception>
        </member>
        <member name="M:DuetAPIClient.BaseConnection.Send(System.Object,System.Threading.CancellationToken)">
            <summary>
            Serialize an arbitrary object into JSON and send it to the server plus NL
            </summary>
            <param name="obj">Object to send</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Asynchronous task</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Message could not be processed</exception>
        </member>
        <member name="T:DuetAPIClient.CommandConnection">
            <summary>
            Connection class for sending commands to the control server
            </summary>
            <seealso cref="F:DuetAPI.Connection.ConnectionMode.Command"/>
        </member>
        <member name="M:DuetAPIClient.CommandConnection.#ctor">
            <summary>
            Create a new connection in command mode
            </summary>
        </member>
        <member name="M:DuetAPIClient.CommandConnection.Connect(System.String,System.Threading.CancellationToken)">
            <summary>
            Establish a connection to the given UNIX socket file
            </summary>
            <param name="socketPath">Path to the UNIX socket file</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Asynchronous task</returns>
            <exception cref="T:DuetAPIClient.Exceptions.IncompatibleVersionException">API level is incompatible</exception>
            <exception cref="T:System.IO.IOException">Connection mode is unavailable</exception>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Init message could not be processed</exception>
        </member>
        <member name="T:DuetAPIClient.Exceptions.IncompatibleVersionException">
            <summary>
            Exception class that is thrown if the API version of the client is incompatible to the server
            </summary>
        </member>
        <member name="M:DuetAPIClient.Exceptions.IncompatibleVersionException.#ctor">
            <summary>
            Creates a new exception instance
            </summary>
        </member>
        <member name="M:DuetAPIClient.Exceptions.IncompatibleVersionException.#ctor(System.String)">
            <summary>
            Creates a new exception instance
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:DuetAPIClient.Exceptions.IncompatibleVersionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new exception instance
            </summary>
            <param name="message">Error message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:DuetAPIClient.Exceptions.InternalServerException">
            <summary>
            Wrapper around internal server-side exceptions that are reported as part of command responses
            </summary>
            <seealso cref="T:DuetAPI.Commands.ErrorResponse"/>
        </member>
        <member name="M:DuetAPIClient.Exceptions.InternalServerException.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new CommandException instance
            </summary>
            <param name="command">Name of the command that failed</param>
            <param name="type">Type of the thrown .NET error</param>
            <param name="message">Message of the thrown .NET error</param>
        </member>
        <member name="T:DuetAPIClient.HttpEndpointConnection">
            <summary>
            Connection class for dealing with requests received from a custom HTTP endpoint
            </summary>
        </member>
        <member name="F:DuetAPIClient.HttpEndpointConnection._socket">
            <summary>
            Socket representing the current HTTP connection
            </summary>
        </member>
        <member name="F:DuetAPIClient.HttpEndpointConnection._isWebSocket">
            <summary>
            Indicates if the connection is a WebSocket
            </summary>
        </member>
        <member name="M:DuetAPIClient.HttpEndpointConnection.#ctor(System.Net.Sockets.Socket,System.Boolean)">
            <summary>
            Constructor for a new connection dealing with a single HTTP endpoint request
            </summary>
            <param name="socket">Connection socket</param>
            <param name="isWebSocket">Indicates if the HTTP endpoint is a WebSocket</param>
            <remarks>DCS may create new connections and close them immediately again to check if the UNIX socket is still active</remarks>
        </member>
        <member name="F:DuetAPIClient.HttpEndpointConnection.disposed">
            <summary>
            Indicates if this instance has been disposed
            </summary>
        </member>
        <member name="M:DuetAPIClient.HttpEndpointConnection.Dispose">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="P:DuetAPIClient.HttpEndpointConnection.IsConnected">
            <summary>
            Indicates if the socket is still connected
            </summary>
        </member>
        <member name="M:DuetAPIClient.HttpEndpointConnection.Close">
            <summary>
            Close this connection
            </summary>
        </member>
        <member name="M:DuetAPIClient.HttpEndpointConnection.ReadRequest(System.Threading.CancellationToken)">
            <summary>
            Read information about the last HTTP request. Note that a call to this method may fail!
            </summary>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Received HTTP request data</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Connection has been closed</exception>
        </member>
        <member name="M:DuetAPIClient.HttpEndpointConnection.SendResponse(System.Int32,System.String,DuetAPI.Commands.HttpResponseType,System.Threading.CancellationToken)">
            <summary>
            Send a simple HTTP response to the client and dispose this connection unless it is a WebSocket
            </summary>
            <param name="statusCode">HTTP code to return</param>
            <param name="response">Response data to return</param>
            <param name="responseType">Type of data to return</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Asynchronous task</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Connection has been closed</exception>
            <remarks>If the underlying connection is a WebSocket, the user must close this connection manually</remarks>
        </member>
        <member name="M:DuetAPIClient.HttpEndpointConnection.Receive``1(System.Threading.CancellationToken)">
            <summary>
            Receive a deserialized object
            </summary>
            <typeparam name="T">OBject type</typeparam>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Deserialized object</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Connection has been closed</exception>
        </member>
        <member name="M:DuetAPIClient.HttpEndpointConnection.ReceiveJson(System.Threading.CancellationToken)">
            <summary>
            Receive a JSON object
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Deserialized JSON object</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Connection has been closed</exception>
        </member>
        <member name="M:DuetAPIClient.HttpEndpointConnection.Send(System.Object,System.Threading.CancellationToken)">
            <summary>
            Send an arbitrary object
            </summary>
            <param name="obj">Object to send as JSON</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Asynchronous task</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Connection has been closed</exception>
        </member>
        <member name="T:DuetAPIClient.HttpEndpointUnixSocket">
            <summary>
            Class for dealing with custom HTTP endpoints
            </summary>
        </member>
        <member name="F:DuetAPIClient.HttpEndpointUnixSocket.DefaultBacklog">
            <summary>
            Default number of pending connections
            </summary>
        </member>
        <member name="P:DuetAPIClient.HttpEndpointUnixSocket.EndpointType">
            <summary>
            Type of this HTTP endpoint
            </summary>
        </member>
        <member name="P:DuetAPIClient.HttpEndpointUnixSocket.Namespace">
            <summary>
            Namespace of this HTTP endpoint
            </summary>
        </member>
        <member name="P:DuetAPIClient.HttpEndpointUnixSocket.EndpointPath">
            <summary>
            Path of this HTTP endpoint
            </summary>
        </member>
        <member name="P:DuetAPIClient.HttpEndpointUnixSocket.SocketPath">
            <summary>
            Path to the UNIX socket file
            </summary>
        </member>
        <member name="F:DuetAPIClient.HttpEndpointUnixSocket._unixSocket">
            <summary>
            Actual UNIX socket instance
            </summary>
        </member>
        <member name="M:DuetAPIClient.HttpEndpointUnixSocket.#ctor(DuetAPI.Machine.HttpEndpointType,System.String,System.String,System.String,System.Int32)">
            <summary>
            Open a new UNIX socket on the given file path
            </summary>
            <param name="endpointType">Type of this HTTP endpoint</param>
            <param name="ns">Namespace of this HTTP endpoint</param>
            <param name="endpointPath">Path of this HTTP endpoint</param>
            <param name="socketPath">Path to the UNIX socket file</param>
            <param name="backlog">Number of simultaneously pending connections</param>
            <exception cref="T:System.IO.IOException">Socket could not be opened</exception>
        </member>
        <member name="F:DuetAPIClient.HttpEndpointUnixSocket.disposed">
            <summary>
            Indicates if this instance has been disposed
            </summary>
        </member>
        <member name="M:DuetAPIClient.HttpEndpointUnixSocket.Dispose">
            <summary>
            Disposes all used resources
            </summary>
        </member>
        <member name="T:DuetAPIClient.HttpEndpointUnixSocket.EndpointRequestReceived">
            <summary>
            Delegate of the event that is called when a new request is being received
            </summary>
            <param name="unixSocket">UNIX socket in charge of the endpoint</param>
            <param name="requestConnection">Connection representing a request from a client</param>
        </member>
        <member name="E:DuetAPIClient.HttpEndpointUnixSocket.OnEndpointRequestReceived">
            <summary>
            Event that is triggered whenever a new HTTP request is received
            </summary>
        </member>
        <member name="M:DuetAPIClient.HttpEndpointUnixSocket.AcceptConnections">
            <summary>
            Accept incoming UNIX socket connections (HTTP/WebSocket requests)
            </summary>
        </member>
        <member name="T:DuetAPIClient.InterceptConnection">
            <summary>
            Connection class for intercepting G/M/T-codes from the control server
            </summary>
            <seealso cref="F:DuetAPI.Connection.ConnectionMode.Intercept"/>
        </member>
        <member name="M:DuetAPIClient.InterceptConnection.#ctor">
            <summary>
            Creates a new connection in intercepting mode
            </summary>
        </member>
        <member name="P:DuetAPIClient.InterceptConnection.Mode">
            <summary>
            Mode of the interceptor
            </summary>
        </member>
        <member name="M:DuetAPIClient.InterceptConnection.Connect(DuetAPI.Connection.InterceptionMode,System.String,System.Threading.CancellationToken)">
            <summary>
            Establishes a connection to the given UNIX socket file
            </summary>
            <param name="mode">Interception mode</param>
            <param name="socketPath">Path to the UNIX socket file</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Asynchronous task</returns>
            <exception cref="T:DuetAPIClient.Exceptions.IncompatibleVersionException">API level is incompatible</exception>
            <exception cref="T:System.IO.IOException">Connection mode is unavailable</exception>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Init message could not be processed</exception>
        </member>
        <member name="M:DuetAPIClient.InterceptConnection.ReceiveCode(System.Threading.CancellationToken)">
            <summary>
            Wait for a code to be intercepted and read it
            </summary>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Code being intercepted or null if the connection has been closed</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Command could not be processed</exception>
        </member>
        <member name="M:DuetAPIClient.InterceptConnection.CancelCode(System.Threading.CancellationToken)">
            <summary>
            Instruct the control server to cancel the last received code (in intercepting mode)
            </summary>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Asynchronous task</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Command could not be processed</exception>
            <seealso cref="T:DuetAPI.Commands.Cancel"/>
        </member>
        <member name="M:DuetAPIClient.InterceptConnection.IgnoreCode(System.Threading.CancellationToken)">
            <summary>
            Instruct the control server to ignore the last received code (in intercepting mode)
            </summary>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Asynchronous task</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Command could not be processed</exception>
            <seealso cref="T:DuetAPI.Commands.Ignore"/>
        </member>
        <member name="M:DuetAPIClient.InterceptConnection.ResolveCode(DuetAPI.Machine.MessageType,System.String,System.Threading.CancellationToken)">
            <summary>
            Instruct the control server to resolve the last received code with the given message details (in intercepting mode)
            </summary>
            <param name="type">Type of the resolving message</param>
            <param name="content">Content of the resolving message</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Asynchronous task</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Command could not be processed</exception>
            <seealso cref="T:DuetAPI.Machine.Message"/>
            <seealso cref="T:DuetAPI.Commands.Resolve"/>
        </member>
        <member name="T:DuetAPIClient.SubscribeConnection">
            <summary>
            Connection class for subscribing to model updates
            </summary>
            <seealso cref="F:DuetAPI.Connection.ConnectionMode.Subscribe"/>
        </member>
        <member name="M:DuetAPIClient.SubscribeConnection.#ctor">
            <summary>
            Creates a new connection in subscriber mode
            </summary>
        </member>
        <member name="P:DuetAPIClient.SubscribeConnection.Mode">
            <summary>
            Mode of the subscription
            </summary>
        </member>
        <member name="P:DuetAPIClient.SubscribeConnection.Filter">
            <summary>
            Filter expression
            </summary>
            <seealso cref="P:DuetAPI.Connection.InitMessages.SubscribeInitMessage.Filter"/>
        </member>
        <member name="M:DuetAPIClient.SubscribeConnection.Connect(DuetAPI.Connection.SubscriptionMode,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Establishes a connection to the given UNIX socket file
            </summary>
            <param name="mode">Subscription mode</param>
            <param name="filter">Optional filter string</param>
            <param name="socketPath">Path to the UNIX socket file</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Asynchronous task</returns>
            <exception cref="T:DuetAPIClient.Exceptions.IncompatibleVersionException">API level is incompatible</exception>
            <exception cref="T:System.IO.IOException">Connection mode is unavailable</exception>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Init message could not be processed</exception>
        </member>
        <member name="M:DuetAPIClient.SubscribeConnection.GetMachineModel(System.Threading.CancellationToken)">
            <summary>
            Retrieves the full object model of the machine
            In subscription mode this is the first command that has to be called once a connection has been established.
            </summary>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>The current machine model</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Receipt could not be acknowledged</exception>
        </member>
        <member name="M:DuetAPIClient.SubscribeConnection.GetSerializedMachineModel(System.Threading.CancellationToken)">
            <summary>
            Optimized method to query the machine model UTF-8 JSON in any mode.
            May be used to get machine model patches as well.
            </summary>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Machine model JSON</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Receipt could not be acknowledged</exception>
        </member>
        <member name="M:DuetAPIClient.SubscribeConnection.GetMachineModelPatch(System.Threading.CancellationToken)">
            <summary>
            Receive a (partial) machine model update.
            If the subscription mode is set to <see cref="F:DuetAPI.Connection.SubscriptionMode.Patch"/>, new update patches of the object model
            need to be applied manually. This method is intended to receive such fragments.
            </summary>
            <param name="cancellationToken">An optional cancellation token</param>
            <returns>The partial update JSON</returns>
            <exception cref="T:System.OperationCanceledException">Operation has been cancelled</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Receipt could not be acknowledged</exception>
            <seealso cref="M:DuetAPIClient.SubscribeConnection.GetMachineModel(System.Threading.CancellationToken)"/>
        </member>
    </members>
</doc>
